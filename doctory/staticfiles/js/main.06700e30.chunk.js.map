{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.ts","http/client.ts","views/AuthViews/validPasswordChecklist.jsx","assets/SecureImage.svg","assets/DoctorsInComputerImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","views/NotFoundPage/NotfoundPage.tsx","components/PresentationCard.tsx","assets/PowerPeople_Emma.png","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","components/TimeLine/AddButton.tsx","utils/utils.ts","views/Patient/NewConditionForm.tsx","utils/typesDefinitions.ts","routes/routes.ts","views/Patient/PatientHomeView.tsx","utils/connectionErrorToast.ts","views/Profile/ProfileView.tsx","views/Doctor/DoctorLandingView.tsx","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","hooks/usePasswordValidation.jsx","views/Navbar/navbarItems.tsx","views/Navbar/MobileNavbar.tsx","views/Navbar/DesktopNavbar.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","label","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","direction","justify","onClick","fontSize","spacing","size","variant","color","marginLeft","icon","aria-label","getToken","localStorage","getItem","setToken","token","setItem","defaultOk","status","data","defaultError","errors","http","url","document","location","origin","fields","ok","error","connectionError","fetch","this","method","headers","body","JSON","stringify","res","json","ValidPasswordChecklist","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","iconStates","textStates","alignItems","as","CheckIcon","bulletList","title","listItems","NotfoundPage","PresetationCard","userData","avatar","maxW","base","md","borderRadius","maxH","src","textAlign","whiteSpace","textOverflow","overflow","first_name","dob","email","TimeLine","children","useMediaQuery","theme","breakpoints","isMobile","w","h","d","flexDirection","flexGrow","pb","className","position","my","mb","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","date_of_diagnosis","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","right","p","boxShadow","rounded","bg","top","transform","isTruncated","noOfLines","fontWeight","zIndex","AddButton","cursor","_hover","Add","isValidDate","value","Date","parse","now","NewConditionForm","formId","onSubmit","backgroundSubtypes","useForm","register","handleSubmit","id","isRequired","isInvalid","Boolean","name","htmlFor","type","autoComplete","placeholder","ref","required","message","description","background_subtype","map","x","validate","userTypes","sexTypes","patientPaths","patientHome","path","component","useDisclosure","isOpen","onOpen","onClose","useState","setBackgroundSubtype","conditions","setConditions","toast","useToast","useEffect","statusCode","last_name","condition","placement","borderBottomWidth","values","newCondition","_","conds","sort","y","duration","isClosable","console","log","form","leftIcon","colorScheme","ml","mr","bottom","patientProfile","setValue","isLoading","setIsLoading","allergiesObject","setAllergiesObject","lastKnownAllergiesId","setLastKnownAllergiesId","specialties","setSpecialties","sex","setData","useCallback","patient","medic","includes","localLastKownID","allergy","parseArrayToAllergiesObject","allergies","getProfileInfo","BulletPoint","mx","align","pt","boxSize","borderColor","minW","filter","putProfileInfo","defaultValue","disabled","onChange","e","target","license","specialty","index","setArrValue","newValues","handleValueArrChange","s","blood_type","allergyId","findIndex","handleAllergieChange","length","obj","newValue","doctorPaths","doctorLanding","doctorpatients","generalPaths","default","landingImage","useBreakpointValue","DoctorWithPhoneImage","DoctorsInComputerImage","py","alt","sm","xl","lg","to","routes","signin","isFullWidth","SecureImage","list","i","item","indx","PresonInComputerImage","login","history","useHistory","px","push","loginError","Object","pattern","password","setPassword","initialPassword","setInitialPassword","requiredLength","isValid","validPassword","setValidPassword","validation","test","toLowerCase","toUpperCase","usePasswordValidation","signup","entries","MB","password2","onPaste","preventDefault","contact","notFound","navbarItems","MobileNavbar","closeNavbar","navItem","MobileNavItem","onToggle","background","ChevronDownIcon","transition","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","child","DesktopNavbar","trigger","border","DesktopSubNav","subLabel","role","_groupHover","opacity","flex","ChevronRightIcon","Navbar","userType","minH","borderBottom","Close","Hamburger","fontFamily","Footer","borderTop","marginStart","getFullYear","AppRouter","keys","k","exact","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","DoctoryApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"+TAiBaA,EAAoB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAChCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,mCACCR,EACD,cAAC,IAAD,CAAMS,UAAU,MAAMC,QAAQ,QAA9B,SACE,cAAC,IAAD,CACAC,QAAST,EACTD,QAASA,EACTW,SAAU,KAHV,SAKE,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACE,cAAC,IAAD,UAAMb,IACN,cAAC,IAAD,UAAK,cAACM,EAAD,aAKT,cAAC,IAAD,CACEL,QAASA,EACTa,KAAK,KACLF,SAAS,KACTG,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXN,QAAST,EACTgB,KAAM,cAACZ,EAAD,IACNa,aAAA,oBAA0Bf,EAA1B,c,8FC9CKgB,EAAW,WACtB,OAAOC,aAAaC,QAAQ,kBAEjBC,EAAW,SAACC,GACvBH,aAAaI,QAAQ,gBAAiBD,ICFlCE,EAAuB,SAACC,EAAQC,KAChCC,EAA6B,SAACF,EAAQG,KAgL/BC,EAAO,I,iDA7KVC,IAAyEC,SAASC,SAASC,O,gFAEnG,WACEC,GADF,kGAEEC,EAFF,+BAEgBX,EACdY,EAHF,+BAGsBT,EACpBU,EAJF,+BAIkB,aAJlB,kBAMsBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,kBAA8B,CACnDU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,KAX3B,cAMUW,EANV,gBAcuBA,EAAIC,OAd3B,UAcUpB,EAdV,OAgBsB,MAAfmB,EAAIpB,OAhBX,wBAiBMJ,EAASK,EAAKA,KAAKJ,OACnBa,EAAGU,EAAIpB,OAAQC,EAAKA,MAlB1B,2BAqBIU,EAAMS,EAAIpB,OAAQC,EAAKE,QArB3B,kDAuBIS,IAvBJ,0D,kHA2BA,WACEH,GADF,kGAEEC,EAFF,+BAEgBX,EACdY,EAHF,+BAGsBT,EACpBU,EAJF,+BAIkB,aAJlB,kBAMsBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,mBAA+B,CACpDU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUV,KAX3B,cAMUW,EANV,gBAauBA,EAAIC,OAb3B,UAaUpB,EAbV,OAesB,MAAfmB,EAAIpB,OAfX,wBAgBMJ,EAASK,EAAKA,KAAKJ,OACnBa,EAAGU,EAAIpB,OAAQC,EAAKA,MAjB1B,2BAoBIU,EAAMS,EAAIpB,OAAQC,EAAKE,QApB3B,kDAsBIS,IAtBJ,0D,wHA0BA,WACEH,GADF,kGAEEC,EAFF,+BAEgBX,EACdY,EAHF,+BAGsBT,EACpBU,EAJF,+BAIkB,aAJlB,kBAMsBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,uBAAmC,CACxDU,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,SAAhB,OAA0BvB,MAE5BwB,KAAMC,KAAKC,UAAUV,KAZ3B,cAMUW,EANV,gBAeuBA,EAAIC,OAf3B,UAeUpB,EAfV,OAgBsB,MAAfmB,EAAIpB,OAhBX,wBAiBMU,EAAGU,EAAIpB,OAAQC,EAAKA,MAjB1B,2BAoBIU,EAAMS,EAAIpB,OAAQC,EAAKE,QApB3B,kDAsBIS,IAtBJ,0D,sHA0BA,+GACEF,EADF,+BACgBX,EACdY,EAFF,+BAEsBT,EACpBU,EAHF,+BAGkB,aAHlB,kBAKwBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,uBAAmC,CACxDW,QAAS,CACP,cAAgB,SAAhB,OAA0BvB,QAPpC,cAKY2B,EALZ,gBAWyBA,EAAIC,OAX7B,UAWYpB,EAXZ,OAYwB,MAAfmB,EAAIpB,OAZb,wBAaQU,EAAGU,EAAIpB,OAAQC,EAAKA,MAb5B,2BAgBMU,EAAMS,EAAIpB,OAAQC,EAAKU,OAhB7B,kDAkBMC,IAlBN,0D,6HAsBA,+GACEF,EADF,+BACgBX,EACdY,EAFF,+BAEsBT,EACpBU,EAHF,+BAGkB,aAHlB,kBAKwBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,gCAA4C,CACjEW,QAAS,CACP,cAAgB,SAAhB,OAA0BvB,QAPpC,cAKY2B,EALZ,gBAWyBA,EAAIC,OAX7B,UAWYpB,EAXZ,OAYwB,MAAfmB,EAAIpB,OAZb,wBAaQU,EAAGU,EAAIpB,OAAQC,EAAKA,MAb5B,2BAgBMU,EAAMS,EAAIpB,OAAQC,EAAKU,OAhB7B,kDAkBMC,IAlBN,0D,yHAsBA,+GACEF,EADF,+BACgBX,EACdY,EAFF,+BAEsBT,EACpBU,EAHF,+BAGkB,aAHlB,kBAKsBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,oBAAgC,CACrDW,QAAS,CACP,cAAgB,SAAhB,OAA0BvB,QAPlC,cAKU2B,EALV,gBAUuBA,EAAIC,OAV3B,UAUUpB,EAVV,OAWsB,MAAfmB,EAAIpB,OAXX,wBAYMU,EAAGU,EAAIpB,OAAQC,EAAKA,MAZ1B,2BAeIU,EAAMS,EAAIpB,OAAQC,EAAKE,QAf3B,kDAiBIS,IAjBJ,0D,yHAqBA,WACEH,GADF,kGAEEC,EAFF,+BAEgBX,EACdY,EAHF,+BAGsBT,EACpBU,EAJF,+BAIkB,aAJlB,kBAMwBC,MAAM,GAAD,OAAIC,KAAKT,IAAT,oBAAgC,CACrDU,OAAQ,MACRC,QAAS,CACP,cAAgB,SAAhB,OAA0BvB,KAC1B,eAAgB,oBAElBwB,KAAMC,KAAKC,UAAUV,KAZ7B,cAMYW,EANZ,gBAcyBA,EAAIC,OAd7B,UAcYpB,EAdZ,OAgBwB,MAAfmB,EAAIpB,OAhBb,wBAiBQU,EAAGU,EAAIpB,OAAQC,EAAKA,MAjB5B,2BAoBMU,EAAMS,EAAIpB,OAAQC,EAAKE,QApB7B,kDAsBMS,IAtBN,0D,yGCrJWU,EAAyB,SAAC,GAMhC,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEMC,EACG,YADHA,EAEK,WAELC,EACG,WADHA,EAEK,WAEX,OACE,eAAC,IAAD,CAAM5C,SAAU,SAAUC,QAAS,EAAnC,UACE,eAAC,IAAD,CACEG,MAAOkC,EAAYM,EAAmBA,EACtCvD,QAAQ,OACRwD,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ3C,MAAOkC,EAAYK,EAAmBA,IAP1C,2BAWA,eAAC,IAAD,CACEvC,MAAOmC,EAAeK,EAAmBA,EACzCvD,QAAQ,OACRwD,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ3C,MAAOmC,EAAeI,EAAmBA,IAP7C,+BAWA,eAAC,IAAD,CACEvC,MAAOoC,EAAeI,EAAmBA,EACzCvD,QAAQ,OACRwD,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ3C,MAAOoC,EAAeG,EAAmBA,IAP7C,+BAWA,eAAC,IAAD,CACEvC,MAAOqC,EAAiBG,EAAmBA,EAC3CvD,QAAQ,OACRwD,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ3C,MAAOqC,EAAiBE,EAAmBA,IAP/C,mCAWA,eAAC,IAAD,CACEvC,MAAOsC,EAAiBE,EAAmBA,EAC3CvD,QAAQ,OACRwD,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ3C,MAAOsC,EAAiBC,EAAmBA,IAP/C,yC,SCjES,MAA0B,wCCA1B,MAA0B,mDCA1B,OAA0B,iDCA1B,OAA0B,kDCcnCK,GAAa,CAAC,CAClBC,MAAO,8BACPC,UAAW,CACT,oCACA,gDACA,sCAGJ,CACED,MAAO,4BACPC,UAAW,CACT,gDACA,uCACA,oCACA,uCC1BSC,GAAe,WAC1B,OACE,gCACE,qCACA,+C,QCIOC,GAAkB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,OAEzC,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAQC,KAAM,OAAd,UACE,cAAC,IAAD,CAAKA,KAAM,CAACC,KAAK,MAAOC,GAAG,OAA3B,SACE,cAAC,IAAD,CAAOC,aAAa,OAAOC,KAAM,OAAQC,IAAKN,MAEhD,eAAC,IAAD,CACEC,KAAM,CAACC,KAAK,MAAOC,GAAG,OACtBI,UAAU,OACV7D,SAAU,CAACwD,KAAK,KAAMC,GAAG,MACzBK,WAAW,SAJb,UAME,cAAC,IAAD,CACEC,aAAa,WACbC,SAAS,SACThE,SAAU,CAACwD,KAAK,KAAMC,GAAG,OAH3B,SAKGJ,EAASY,WAAa,IAAMZ,EAASY,aAExC,eAAC,IAAD,WAAOZ,EAASa,IAAhB,OACA,cAAC,IAAD,CAAMH,aAAa,WAAWC,SAAS,SAAvC,SACGX,EAAS/B,WAEZ,cAAC,IAAD,CAAMyC,aAAa,WAAWC,SAAS,SAAvC,SACGX,EAASc,iBCpCP,OAA0B,6C,mBCM5BC,GAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEtBC,aAAc,eAAD,OAAgBC,WAAMC,YAAYf,KAA3DgB,EAFkC,oBAIzC,OACE,cAAC,IAAD,CACEC,EAAE,OACFC,EAAE,OACFpB,KAAK,OACLqB,EAAG,OACHC,cAAc,SACdC,SAAU,EACVC,GAAG,IAPL,SASE,cAAC,IAAD,CACEC,UAAU,qBACVJ,EAAE,OACFC,cAAc,SACdI,SAAS,WACTC,GAAG,MACHC,GAAG,IACHJ,GAAG,MACHK,GAAI,CACF,UAAU,CACRC,gBAAiB5F,YAAkB,cAAc,eACjD6F,QAAQ,KACRL,SAAU,WACVM,KAAK,GAAD,OAAKd,EAAU,SAAU,qBAC7Be,MAAO,OACPC,OAAQ,SAfd,SAmBGpB,OChCIqB,GAAe,SAAC,GAAiF,IAAhFC,EAA+E,EAA/EA,eAAgBC,EAA+D,EAA/DA,kBAAmBC,EAA4C,EAA5CA,qBAA4C,EACxFvB,aAAc,eAAD,OAAgBC,WAAMC,YAAYf,KAA3DgB,EADoG,oBAE3G,OACE,cAAC,IAAD,CACEO,UAAU,gBACVC,SAAS,WACTL,EAAE,OACFkB,eAAe,WACfC,aAAY,UAAKtB,EAAU,QAAQ,OACnCuB,YAAW,UAAKvB,EAAU,MAAM,SAChCwB,EAAE,SACFT,MAAK,UAAKf,EAAU,OAAO,OAC3BW,GAAI,CACF,oBAAqB,CACnBc,UAAW,WACXJ,eAAgB,aAChBE,YAAa,MACbD,aAAc,KAEhB,2CAA2C,CACzClC,UAAW,OACXhB,WAAW,cAEb,kDAAkD,CAChDsD,MAAO,OACPZ,KAAM,SAER,mDAAmD,CACjDY,MAAO,OACPZ,KAAM,WA1BZ,SA8BE,eAAC,IAAD,CACE1C,WAAW,WACXuD,EAAE,MACFnG,QAAQ,IACR+E,UAAU,wBACVqB,UAAU,KACVC,QAAQ,KACRC,GAAI9G,YAAkB,QAAS,YAC/BiF,EAAE,OACFb,UAAWY,EAAU,OAAO,QAC5BQ,SAAS,WACTG,GAAI,CACF,UAAU,CACRE,QAAQ,MACRD,gBAAiB5F,YAAkB,QAAS,YAC5CwF,SAAU,WACVuB,IAAK,oBACLL,MAAM,GAAD,OAAK1B,EAAU,QAAQ,UAC5Bc,KAAK,GAAD,OAAKd,EAAU,QAAQ,SAC3BgC,UAAW,gBACXjB,MAAO,MACPC,OAAQ,QArBd,UAyBE,cAAC,IAAD,CACEiB,aAAW,EACXC,UAAW,EACX7C,WAAW,SACX9D,SAAS,KACT4G,WAAW,SACXlC,EAAE,OANJ,SAQGiB,IAEH,cAAC,IAAD,CACEM,EAAG,IACHS,aAAW,EACXC,UAAW,EACX7C,WAAW,SACX9D,SAAS,KACT4G,WAAW,SACX/C,UAAU,QACVa,EAAE,OARJ,SAUGkB,IAEFC,GACD,cAAC,IAAD,CACEa,aAAW,EACXC,UAAW,EACX7C,WAAW,SACX9D,SAAS,KACT4G,WAAW,SACX/C,UAAU,OACVa,EAAE,OAPJ,SASGmB,IAGH,cAAC,IAAD,CAAK/C,GAAG,OACNkC,UAAU,SACVuB,GAAI9G,YAAkB,cAAc,eACpCiE,aAAa,MACbuB,SAAS,WACTuB,IAAI,mBACJ9B,EAAE,MACFC,EAAE,MACFwB,MAAK,UAAM1B,EAAU,QAAQ,UAC7Bc,KAAI,UAAKd,EAAU,SAAS,SAC5BoC,OAAO,Y,UCzGJC,GAAY,WACvB,OACI,cAAC,IAAD,CACEP,GAAI9G,YAAkB,cAAe,eACrC6G,QAAQ,MACRS,OAAO,UACPC,OAAQ,CACNT,GAAG9G,YAAkB,cAAe,gBALxC,SAQE,cAACwH,GAAA,EAAD,CACEvC,EAAE,MACFC,EAAE,MACFyB,EAAE,OACFhG,MAAM,a,oBCnBH8G,GAAc,SAACC,GAE1B,OAD0BC,KAAKC,MAAMF,GACVC,KAAKE,OCkBrBC,GAAmB,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,OAAQC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,mBAA4C,EACpDC,cAAnCC,EADuF,EACvFA,SAAUC,EAD6E,EAC7EA,aAAc3G,EAD+D,EAC/DA,OAEhC,OACE,cAAC,IAAD,UACE,uBAAM4G,GAAIN,EAAQC,SAAUI,EAAaJ,GAAzC,UACE,eAAC,IAAD,CACEM,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOgH,MAH5B,UAIE,cAAC,IAAD,CAAWC,QAAQ,OAAnB,oBACA,cAAC,IAAD,CACED,KAAK,OACLE,KAAK,OACLC,aAAa,KACbC,YAAY,kBACZC,IAAKX,EAAS,CAACY,SAAU,+BAE3B,cAAC,IAAD,UACGtH,EAAOgH,MAAQhH,EAAOgH,KAAKO,aAGhC,eAAC,IAAD,CAAatD,GAAG,IAAI6C,UAAWC,QAAQ/G,EAAOwH,aAA9C,UACE,cAAC,IAAD,CAAWP,QAAQ,cAAnB,yBACA,cAAC,KAAD,CACED,KAAK,cACLI,YAAY,oCACZC,IAAKX,IACL1H,KAAK,UAGT,eAAC,IAAD,CACE6H,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOyH,oBAH5B,UAIE,cAAC,IAAD,CAAWR,QAAQ,qBAAnB,kCACA,cAAC,KAAD,CACED,KAAK,qBACLK,IAAKX,IAFP,SAGGF,EAAmBkB,KAAI,SAAAC,GAAC,OAAI,wBAAmB1B,MAAO0B,EAAEf,GAA5B,SAAiCe,EAAEX,MAAtBW,EAAEf,YAGhD,eAAC,IAAD,CACEC,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAO0E,mBAH5B,UAIE,cAAC,IAAD,CAAWuC,QAAQ,oBAAnB,qCACA,cAAC,IAAD,CACED,KAAK,oBACLE,KAAK,OACLC,aAAa,KACbE,IAAKX,EAAS,CACZY,SAAU,0BACVM,SAAU,SAAA3B,GAAK,OAAID,GAAYC,IAAU,gCAE7C,cAAC,IAAD,UACGjG,EAAO0E,mBAAqB1E,EAAO0E,kBAAkB6C,mB,6BC5ErDM,GACF,MADEA,GAEJ,MAGIC,GACL,IADKA,GAEH,IAFGA,GAGJ,IAHIA,GAII,ICIXC,GAA0C,CAC9CC,YAAa,CAAEC,KAAM,YAAaC,UCeL,WAE7B,IAFmC,EAUCC,cAA5BC,EAV2B,EAU3BA,OAAQC,EAVmB,EAUnBA,OAAQC,EAVW,EAUXA,QAVW,EAYhBlF,aAAc,eAAD,OAAgBC,WAAMC,YAAYf,KAA3DgB,EAZ4B,sBAcgBgF,mBAAkC,IAdlD,mBAc5B/B,EAd4B,KAcRgC,EAdQ,OAgBCD,mBAA0B,IAhB3B,mBAgB5BE,EAhB4B,KAgBhBC,EAhBgB,KAkB7BC,EAAQC,cAyCd,OAhBAC,qBAAU,WAKR5I,EAAKuG,oBAJiB,SAACsC,EAAYhJ,GAEjC0I,EADW1I,QAIZ,IAEH+I,qBAAU,WAKR5I,EAAKwI,YAJiB,SAACK,EAAYhJ,GAEjC4I,EADc5I,QAIf,IAGD,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMhB,SAAS,MAAf,gCACA,cAAC,GAAD,CAAiBqD,SA7DD,CACpBY,WAAY,iBACZgG,UAAW,qBACX/F,IAAK,cACLC,MAAO,qBACP7C,SAAU,yBAwD+BgC,OAAQA,KAC7C,cAAC,IAAD,CACEoB,EAAE,OACFnB,KAAM,CAACC,KAAM,OAAQC,GAAI,OAF3B,SAIE,cAAC,GAAD,UACGkG,EAAWf,KAAI,SAAAsB,GAAS,OACvB,cAAC,GAAD,CAEEvE,eAAgBuE,EAAUhC,KAC1BtC,kBAAmBsE,EAAUtE,kBAC7BC,qBAAsBqE,EAAUxB,aAH3BwB,EAAUpC,cAUzB,cAAC,KAAD,CACEqC,UAAW1F,EAAW,SAAW,QACjC6E,OAAQA,EACRE,QAASA,EAHX,SAII,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,IACA,cAAC,KAAD,CAAcY,kBAAkB,MAAhC,gCAIA,cAAC,KAAD,UACE,cAAC,GAAD,CACE3C,SA1EC,SAAC4C,GAoBhBlJ,EAAKmJ,aAAaD,GAnBI,SAACE,EAAGvJ,GACxB,IAAMwJ,EAAK,uBAAOb,GAAP,CAAmB3I,IAC9BwJ,EAAMC,MAAK,SAAC5B,EAAG6B,GAAJ,OAAU7B,EAAEjD,kBAAoB8E,EAAE9E,kBAAoB,GAAK,KACtEgE,EAAcY,GACdhB,IACAK,EAAM,CACJ5G,MAAO,sBACPyF,YAAa,mEACb3H,OAAQ,UACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,mBAGe,SAAC6J,EAAYtI,GACvCmJ,QAAQC,IAAIpJ,MAGuB,kBAAMmI,ECnEJ,CACzC5G,MAAO,uBACPyF,YAAa,2DACb3H,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,oBDmHOqH,OAAO,iBACPE,mBAAoBA,MAGxB,cAAC,KAAD,UACE,cAAC,IAAD,CACEU,KAAK,SACL2C,KAAK,iBACLC,SAAU,cAAC/D,GAAA,EAAD,IACVgE,YAAY,UAJd,gCASV,cAAC,IAAD,CACE5L,QAAQ,eACR6L,GAAG,OACHC,GAAG,OACHhG,GAAG,OACHF,SAAS,SACTmG,OAAO,OACPrL,QAASwJ,EAPX,SASE,cAAC,GAAD,WDpIN8B,eAAgB,CAAElC,KAAM,eAAgBC,UGFf,WAAO,IAAD,EACsBzB,cAA7CC,EADuB,EACvBA,SAAUC,EADa,EACbA,aAAc3G,EADD,EACCA,OAAQoK,EADT,EACSA,SADT,EAEG7B,oBAAS,GAFZ,mBAExB8B,EAFwB,KAEbC,EAFa,OAGe/B,mBAAwC,CAAC,CAAC3B,GAAG,EAAEX,MAAM,MAHpE,mBAGxBsE,EAHwB,KAGPC,EAHO,OAIyBjC,mBAAS,GAJlC,mBAIxBkC,EAJwB,KAIFC,EAJE,OAKOnC,mBAAS,CAAC,KALjB,mBAKxBoC,EALwB,KAKXC,EALW,OAMXxH,aAAc,eAAD,OAAgBC,SAAMC,YAAYf,KAC7DoG,GAPyB,oBAOjBC,eAPiB,EAQPL,mBAA0B,CAChDxF,WAAY,GACZgG,UAAW,GACX/F,IAAK,GACLC,MAAO,GACP4H,IAAK,GACL3D,KAAM,CAAC,MAdsB,mBAQxBpH,EARwB,KAQlBgL,EARkB,KAiBzBvK,EAAKwK,uBAAY,SAAC1B,EAAGvJ,GAEzB,IASMqC,EAAWrC,EACVkL,EAAkB7I,EAAlB6I,QAASC,EAAS9I,EAAT8I,MAChBb,EAAS,MAAOjI,EAAS0I,KACzBC,EAAQ3I,GAEJA,EAAS+E,KAAKgE,SAASrD,MACzBnB,EAAS,qBACT8D,EAhBkC,WAAgC,IAC9DW,EAAkBV,EAChBxJ,GAF2D,uDAAT,CAAC,KAEnCyG,KAAI,SAAA0D,GAAO,MAAK,CACpCxE,GAAIuE,IACJlF,MAAOmF,MAGT,OADAV,EAAwBS,GACjBlK,EASYoK,CAA4BL,EAAQM,WAAa,CAAC,OAEnEnJ,EAAS+E,KAAKgE,SAASrD,MACzBnB,EAAS,qBACT0D,EAAS,oBAAqBa,EAAMN,aACpCC,EAAeK,EAAMN,cAEvBL,GAAa,KAEb,CAACF,EAAU1D,IAEbmC,qBAAU,WACR5I,EAAKsL,eAAehL,KACnB,CAACA,IAIJ,IAiDMiL,EAAc,kBAClB,cAAC,IAAD,CACEnG,GAAI,eACJ7C,aAAc,MACdgB,EAAE,MACFC,EAAE,MACFgI,GAAG,UAIP,OACE,cAAC,IAAD,CACAjI,EAAE,QACFC,EAAE,OACFpB,KAAK,MACLqB,EAAG,OACHE,SAAU,EACV6H,GAAI,CAACnJ,KAAK,MAAOC,GAAG,OANpB,SAQA,cAAC,IAAD,CACEqB,SAAU,EACV8H,MAAO,aACP9M,QAAS,SACT+M,GAAI,GACJnI,EAAG,OALL,SAOA,eAAC,IAAD,CAAQA,EAAG,OAAX,UACE,cAAC,IAAD,CAAS1E,SAAU,MAAnB,2BACA,cAAC,IAAD,CAAOmF,GAAI,EAAGT,EAAG,OAAQkI,MAAO,SAAhC,SACE,cAAC,KAAD,CAAQhJ,IAAKN,GAAQpD,KAAK,MAA1B,SACE,cAAC,KAAD,CAAa4M,QAAQ,OAAOC,YAAY,cAAcxG,GAAG,QAAQS,OAAQ,CAAC5G,MAAM,YAAhF,SACE,cAAC,IAAD,UAIN,cAAC,IAAD,CACEkG,QAAS,KACT0G,KAAM,CAACxJ,KAAK,KAAMC,GAAI,MACtB8C,GAAI9G,YAAkB,QAAS,YAC/B4G,UAAW,KACXD,EAAG,EACHjB,GAAI,GANN,SASE,uBAAMsC,SAAUI,GA7FL,SAACwC,GAChBmB,GAAa,GACTxK,EAAKoH,KAAKgE,SAASrD,KACrBsB,EAAO6B,UAAY7B,EAAO6B,QAAQM,UAAYf,EAAgB7C,KAAI,SAAAC,GAAC,OAAIA,EAAE1B,SAAO8F,QAAO,SAAAvC,GAAC,MAAU,KAANA,MAa9FvJ,EAAK+L,eAAe7C,GAXE,WACpBmB,GAAa,MAEa,SAACjB,EAAG7I,GAC9B8J,GAAa,GACbX,QAAQC,IAAI,QAASpJ,MAEC,WACtB8J,GAAa,GACb3B,ED7EqC,CACzC5G,MAAO,uBACPyF,YAAa,2DACb3H,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,sBCqJH,UACE,eAAC,IAAD,CACEgF,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAO+C,YAH5B,UAIE,cAAC,IAAD,CAAWkE,QAAQ,aAAnB,uBACA,cAAC,IAAD,CACED,KAAK,aACLE,KAAK,OACLC,aAAa,KACbC,YAAY,OACZ6E,aAAcnM,EAAKiD,WACnBsE,IAAKX,EAAS,CAAEY,SAAU,+BAE5B,cAAC,IAAD,UACGtH,EAAO+C,YAAc/C,EAAO+C,WAAWwE,aAI5C,eAAC,IAAD,CACEtD,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAO+I,WAH5B,UAIE,cAAC,IAAD,CAAW9B,QAAQ,YAAnB,uBACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,OACLC,aAAa,KACbC,YAAY,WACZ6E,aAAcnM,EAAKiJ,UACnB1B,IAAKX,EAAS,CAAEY,SAAU,iCAE5B,cAAC,IAAD,UACGtH,EAAO+I,WAAa/I,EAAO+I,UAAUxB,aAI1C,eAAC,IAAD,CACEtD,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAOiD,OAH5B,UAIE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACLgF,UAAU,EACV9E,YAAY,oBACZnB,MAAOnG,EAAKmD,MACZoE,IAAKX,IAGP,cAAC,IAAD,UACG1G,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAOgD,KAH5B,UAIE,cAAC,IAAD,CAAWiE,QAAQ,MAAnB,iCACA,cAAC,IAAD,CACED,KAAK,MACLE,KAAK,OACLC,aAAa,KACb8E,aAAcnM,EAAKkD,IACnBqE,IAAKX,EAAS,CACZY,SAAU,0BACVM,SAAU,SAAA3B,GAAK,OAAID,GAAYC,IAAU,gCAG7C,cAAC,IAAD,UACCjG,EAAOgD,KAAOhD,EAAOgD,IAAIuE,aAI5B,eAAC,IAAD,CACEtD,GAAI,EADN,UAEE,cAAC,IAAD,CAAWgD,QAAQ,MAAnB,kBACE,eAAC,KAAD,CACErF,GAAG,SACHoF,KAAK,MACLmF,SAAW,SAACC,GAAD,OAAOhC,EAAS,MAAOgC,EAAEC,OAAOpG,QAC3CoB,IAAKX,EAJP,UAME,wBAAQT,MAAO6B,GAAf,6BACA,wBAAQ7B,MAAO6B,GAAf,mBACA,wBAAQ7B,MAAO6B,GAAf,oBACA,wBAAQ7B,MAAO6B,GAAf,wBAIN,eAAC,IAAD,CACE7D,GAAI,EADN,UAGE,cAAC,IAAD,CAAWgD,QAAQ,WAAnB,iCACA,cAAC,IAAD,CACED,KAAK,WACLE,KAAK,OACLC,aAAa,KACbC,YAAY,2BACZ6E,aAAcnM,EAAKM,SACnBiH,IAAKX,OAIR5G,EAAKoH,KAAKgE,SAASrD,KAClB,eAAC,IAAD,CAAa5D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,UAAnB,mCACA,cAAC,IAAD,CACED,KAAK,gBACLE,KAAK,OACLE,YAAY,WACZ6E,aAAcnM,EAAKmL,MAAOnL,EAAKmL,MAAMqB,QAAU,GAC/CjF,IAAKX,OAKV5G,EAAKoH,KAAKgE,SAASrD,KAClB,eAAC,IAAD,CAAa5D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,YAAnB,6BACC0D,EAAYjD,KAAI,SAAC6E,EAAUC,GAAX,OACf,eAAC,IAAD,CACEvI,GAAI,EADN,UAIGuH,IACD,cAAC,IAAD,CACEvF,MAAOsG,EACPJ,SAAU,SAAAC,GAAC,OAjMA,SAACA,EAAkCI,EAAexF,EAAcyF,GAC3FA,GAAY,SAAAtD,GACV,IAAIuD,EAAS,aAAOvD,GAGpB,OAFAuD,EAAUF,GAASJ,EAAEC,OAAOpG,MAC5BmE,EAASpD,EAAM0F,GACRA,KA4LsBC,CAAqBP,EAAGI,EAAO,oBAAqB5B,IACnE5L,KAAK,KACLkI,KAAK,OACLE,YAAY,eART,aAAaoF,MAatB,eAAC,IAAD,WACGhB,IACD,8BACA,cAAC,IAAD,CACExM,KAAK,KACLC,QAAQ,UACRJ,QA1NU,kBAAM+L,GAAe,SAACgC,GAAD,6BAAWA,GAAX,CAAc,SA2N7C9C,SAAU,cAAC/D,GAAA,EAAD,IAJZ,6BAWLjG,EAAKoH,KAAKgE,SAASrD,KAClB,eAAC,IAAD,CAAa5D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,aAAnB,4BACA,cAAC,IAAD,CACED,KAAK,qBACLE,KAAK,OACLC,aAAa,KACbC,YAAY,KACZ6E,aAAcnM,EAAKkL,QAASlL,EAAKkL,QAAQ6B,WAAa,GACtDxF,IAAKX,OAKV5G,EAAKoH,KAAKgE,SAASrD,KACpB,eAAC,IAAD,CACE5D,GAAI,EADN,UAGE,cAAC,IAAD,CAAWgD,QAAQ,YAAnB,sBACCsD,EAAgB7C,KAAI,SAAC0D,GAAD,OACnB,eAAC,IAAD,CACEnH,GAAI,EADN,UAIGuH,IACD,cAAC,IAAD,CACEvF,MAAOmF,EAAQnF,MACfkG,SAAU,SAAAC,GAAC,OAzOE,SAACA,EAAkChB,GAC9D,IAAI0B,EAAYvC,EAAgBwC,WAAU,SAAApF,GAAC,OAAIA,EAAEf,KAAOwE,EAAQxE,MAChE4D,GAAmB,SAAAc,GACjB,IAAIoB,EAAS,aAAOpB,GAEpB,OADAoB,EAAUI,GAAV,2BAA2B1B,GAA3B,IAAoCnF,MAAMmG,EAAEC,OAAOpG,QAC5CyG,KAoOoBM,CAAqBZ,EAAGhB,IACvCpM,KAAK,KACLkI,KAAK,OACLE,YAAY,eARTgE,EAAQxE,OAYjB,eAAC,IAAD,WACG4E,IACD,8BACA,cAAC,IAAD,CACExM,KAAK,KACLC,QAAQ,UACRiN,SAA8D,KAApD3B,EAAgBA,EAAgB0C,OAAO,GAAGhH,MACpDpH,QAzQU,WACtB2L,GAAmB,SAAA0C,GACjB,IAAMC,EAAW,CAACvG,GAAI6D,EAAsBxE,MAAO,IAEnD,OADAyE,GAAwB,SAAA/C,GAAC,OAAIA,EAAE,KACzB,GAAN,oBAAWuF,GAAX,CAAgBC,QAsQNrD,SAAU,cAAC/D,GAAA,EAAD,IALZ,6BAWJ,cAAC,IAAD,CAAQvC,EAAG,OAAQkI,MAAM,WAAzB,SACE,cAAC,IAAD,CACErB,UAAWA,EACXN,YAAY,UACZ7C,KAAK,SAHP,sCHrVNkG,GAAyC,CAC7CC,cAAe,CAAEpF,KAAM,eAAgBC,UIjBR,WAC7B,OACI,8BACI,oDJeVoF,eAAgB,CAAErF,KAAM,gBAAiBC,UAAWjG,KAGhDsL,GAA0C,CAC9CC,QAAS,CAAEvF,KAAM,IAAKC,UVSD,WAEvB,IAAMuF,EAAeC,YAAmB,CAAEpL,KAAMqL,GAAsBpL,GAAIqL,IAExE,OACE,cAAC,IAAD,CACEpK,EAAE,QACFC,EAAE,OACFpB,KAAK,MACLqB,EAAG,OACHE,SAAU,EACV6H,GAAI,CAACnJ,KAAK,MAAOC,GAAG,OANtB,SAQE,cAAC,IAAD,CACEqB,SAAU,EACV8H,MAAO,aACP9M,QAAS,SACTiP,GAAI,GACJrK,EAAG,OALL,SAOE,eAAC,IAAD,CAAQkI,MAAM,UAAU3M,QAAS,CAACuD,KAAM,MAAOC,GAAG,QAASiB,EAAG,OAA9D,UAEE,eAAC,IAAD,CAAQA,EAAG,OAAQoB,eAAe,SAAS7F,QAAS,MAApD,UACE,cAAC,IAAD,CAAMyE,EAAG,MAAOnB,KAAK,OAAOqJ,MAAM,SAAlC,SACE,cAAC,IAAD,CAAOhJ,IAAK+K,EAAcK,IAAK,cAEjC,eAAC,IAAD,CAAKtK,EAAG,MAAOnB,KAAM,CAAC0L,GAAG,KAAMxL,GAAG,KAAMyL,GAAG,MAAOtC,MAAM,SAAxD,UACI,cAAC,IAAD,CAAS9J,GAAG,KACVe,UAAU,OACVsB,GAAI,CAAC3B,KAAK,MAAO2L,GAAG,OACpBnP,SAAU,CAACwD,KAAK,MAAOC,GAAG,MAAO0L,GAAG,OACpC/O,MAAOX,YAAkB,cAAe,SAJ1C,qBAQF,cAAC,IAAD,CAAMO,SAAU,CAAC,KAAM,MAAO,MAAO,OAAQmF,GAAI,MAAOtB,UAAU,OAAO+C,WAAW,SAApF,0EAGA,cAAC,IAAD,CAAK/C,UAAU,SAASa,EAAG,CAAC,MAAO,OAAnC,SACE,cAAC,IAAD,CAAM0K,GAAIC,GAAOC,OAAOnG,KAAxB,SACE,cAAC,IAAD,CAAQjJ,KAAM,KAAMqP,aAAW,EAACtE,YAAa,UAA7C,8BAQR,eAAC,IAAD,CAAQvG,EAAG,OAAQoB,eAAe,SAAS7F,QAAS,CAACuD,KAAK,MAAOC,GAAG,OAApE,UACE,cAAC,IAAD,CAAMiB,EAAG,CAAClB,KAAK,KAAMC,GAAG,MAAOmJ,MAAM,SAArC,SACE,cAAC,IAAD,CAAOhJ,IAAK4L,EAAaR,IAAK,cAEhC,cAAC,IAAD,CAAKzL,KAAM,CAACC,KAAK,KAAMC,GAAG,MAAOmJ,MAAM,SAAvC,SACE,cAAC,IAAD,CAAM5M,SAAU,CAAC,KAAM,MAAO,MAAO,OAAQ6D,UAAU,OAAO+C,WAAW,SAAzE,mGAMJ,eAAC,IAAD,WACA,eAAC,IAAD,CAAM5G,SAAU,CAAC,MAAO,MAAO,MAAO,OAAQmF,GAAI,MAAOtB,UAAU,SAAS+C,WAAW,SAAvF,UACC,cAAC,IAAD,CAAM9D,GAAI,OAAQ1C,MAAOX,YAAkB,cAAe,SAA1D,qBADD,yCAGA,eAAC,IAAD,CAAOqG,eAAe,SAASjD,WAAW,SAAShD,UAAW,CAAC2D,KAAK,iBAAkBC,GAAG,OAAzF,UACE,cAAC,IAAD,CAAOF,KAAM,OAAQqJ,MAAM,SAAS/I,UAAU,OAA9C,SACGb,GAAW4F,KAAI,SAAC6G,EAAKC,GAAN,OAAY,gCAC1B,cAAC,IAAD,CAAmC9I,WAAW,SAAS5G,SAAS,KAAKmF,GAAI,MAAzE,SAAiFsK,EAAKxM,OAA3E,YAAYwM,EAAKxM,OAC5B,cAAC,IAAD,CAAsChD,QAAS,EAAGkF,GAAI,QAAtD,SACCsK,EAAKvM,UAAU0F,KAAI,SAAC+G,EAAMC,GAAP,OAAgB,8BAClC,eAAC,IAAD,WACE,cAAC,IAAD,CAAU9M,GAAIC,IAAW3C,MAAO,gBAC7BuP,MAHuCF,EAAKxM,MAAM2M,EAAKD,OADnD,cAAcF,EAAKxM,SAFMyM,EAAED,EAAKxM,YAY/C,cAAC,IAAD,CAAKyB,EAAG,OAAQnB,KAAM,CAACC,KAAK,OAAQ2L,GAAG,QAASvC,MAAM,SAAtD,SACE,cAAC,IAAD,CAAOhJ,IAAKiM,GAAuBnL,EAAE,MAAMsK,IAAK,UAAW7J,GAAI,gBAKnE,cAAC,IAAD,CAAKP,EAAG,OAAQkB,eAAe,SAASpB,EAAG,OAA3C,SACE,cAAC,IAAD,CAAKb,UAAU,SAASa,EAAE,KAA1B,SACE,cAAC,IAAD,CAAM0K,GAAIC,GAAOC,OAAOnG,KAAxB,SACE,cAAC,IAAD,CAAQjJ,KAAM,KAAMqP,aAAW,EAACtE,YAAa,UAA7C,mCU9Fd6E,MAAO,CAAE3G,KAAM,SAAUC,UKDF,WAAO,IAAD,EACczB,cAAnCC,EADqB,EACrBA,SAAUC,EADW,EACXA,aAAc3G,EADH,EACGA,OAC1B6O,EAAUC,cACVnG,EAAQC,cAuBd,OACE,cAAC,IAAD,CACEhF,SAAU,EACVH,EAAG,OACHiI,MAAO,SACP9M,QAAS,SACTyG,GAAI9G,YAAkB,WAAY,YALpC,SAOE,eAAC,IAAD,CAAOmN,MAAO,SAAU3M,QAAS,EAAG0M,GAAI,OAAQpJ,KAAM,KAAMwL,GAAI,GAAIkB,GAAI,EAAxE,UACE,cAAC,IAAD,CAASjQ,SAAU,MAAnB,+BACA,cAAC,IAAD,CACEoG,EAAG,EACHG,GAAI9G,YAAkB,QAAS,YAC/BuN,KAAK,KACL1G,QAAS,KACTD,UAAW,KALb,SAQE,uBAAMoB,SAAUI,GAvCP,SAACwC,GAkBhBlJ,EAAK2O,MAAMzF,GAhBY,SAACL,EAAYhJ,GAClC+O,EAAQG,KAAKb,GAAOnG,YAAYC,SAGL,SAACa,EAAYtI,GACxC,IAAMyO,EAAazO,EACnBmI,EAAM,CACJ5G,MAAO,OACPyF,YAAa0H,OAAO/F,OAAO8F,GAAY,GACvCpP,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,mBAGiB,kBAAM0J,EH7CG,CACzC5G,MAAO,uBACPyF,YAAa,2DACb3H,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,sBG2DD,UACE,eAAC,IAAD,CACEgF,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOiD,OAF5B,UAGE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACLC,aAAa,KACbC,YAAY,oBACZC,IAAKX,EAAS,CACZY,SAAU,0CACV6H,QAAS,CACPlJ,MAAO,4CACPsB,QAAS,kDAIf,cAAC,IAAD,UACGvH,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOoP,UAF5B,UAGE,cAAC,IAAD,CAAWnI,QAAQ,WAAnB,2BACA,cAAC,IAAD,CACED,KAAK,WACLE,KAAK,WACLC,aAAa,MACbE,IAAKX,EAAS,CAAEY,UAAU,SAG9B,eAAC,IAAD,CAAOvI,QAAS,EAAhB,UACE,cAAC,IAAD,8CACA,cAAC,IAAD,CAAQmI,KAAK,SAAb,mCL9EZkH,OAAQ,CAAEnG,KAAM,UAAWC,UMFH,WACxB,IAAM2G,EAAUC,cAEVnG,EAAQC,cAHgB,EAOanC,cAAnCC,EAPsB,EAOtBA,SAAUC,EAPY,EAOZA,aAAc3G,EAPF,EAOEA,OAPF,EASEuI,mBAAiB,IATnB,mBASvB6G,EATuB,KASbC,EATa,OAWgB9G,oBAAkB,GAXlC,mBAWvB+G,EAXuB,KAWNC,EAXM,OCtBK,SAAC,GAG/B,IAAD,IAFJH,gBAEI,MAFO,GAEP,MADJI,sBACI,MADa,EACb,IACsCjH,mBAAS,CACjDnH,UAAW,KACXC,aAAc,KACdC,aAAc,KACdC,eAAgB,KAChBC,eAAgB,KAChBiO,QAAS,OAPP,mBACGC,EADH,KACkBC,EADlB,KAsBJ,OAZA9G,qBAAU,WACR,IAAM+G,EAAa,GACnBA,EAAWxO,UAAY,KAAKyO,KAAKT,GACjCQ,EAAWvO,aAAe+N,EAASU,gBAAkBV,EACrDQ,EAAWtO,aAAe8N,EAASW,gBAAkBX,EACrDQ,EAAWrO,eAAiB,uCAAuCsO,KAAKT,GACxEQ,EAAWpO,eAAiB4N,EAASnC,QAAUuC,EAC/CI,EAAWH,QAAUG,EAAWxO,WAAawO,EAAWvO,cAAgBuO,EAAWtO,cAAgBsO,EAAWrO,gBAAkBqO,EAAWpO,eAC3ImO,EAAiBC,KAChB,CAACR,EAAUI,IAGPE,EDgBcM,CAAsB,CAAEZ,aAL3CK,EAd4B,EAc5BA,QACAjO,EAf4B,EAe5BA,eACAJ,EAhB4B,EAgB5BA,UACAC,EAjB4B,EAiB5BA,aACAC,EAlB4B,EAkB5BA,aACAC,EAnB4B,EAmB5BA,eA0BF,OACE,cAAC,IAAD,CACEiC,EAAE,OACFC,EAAE,OACFpB,KAAK,OACLqB,EAAG,OACHE,SAAU,EALZ,SAOE,cAAC,IAAD,CACEA,SAAU,EACV8H,MAAO,SACP9M,QAAS,SAHX,SAIE,eAAC,IAAD,CACEG,QAAS,EACTsD,KAAM,KACNwL,GAAI,GACJkB,GAAI,EAJN,UAKE,cAAC,IAAD,CAAOrD,MAAO,SAAd,SACE,cAAC,IAAD,CAAS5M,SAAU,MAAnB,2BAEF,cAAC,IAAD,CACEsG,QAAS,KACT0G,KAAM,KACNzG,GAAI9G,YAAkB,QAAS,YAC/B4G,UAAW,KACXD,EAAG,EALL,SAOE,uBAAMqB,SAAUI,GAlDT,SAACwC,GAehBlJ,EAAKgQ,OAAO9G,GAdW,SAACL,EAAYhJ,GAClC+O,EAAQG,KAAKb,GAAOnG,YAAYC,SAEL,SAACa,EAAYtI,GACxCmI,EAAM,CACJ5G,MAAO,OACPyF,YAAa0H,OAAOgB,QAAQ1P,GAAO,GAAG,GACtCX,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,mBAGkB,kBAAM0J,EJ3DE,CACzC5G,MAAO,uBACPyF,YAAa,2DACb3H,OAAQ,QACR4J,SAAU,IACVC,YAAY,EACZ3F,SAAU,MACV9E,QAAS,sBIuFC,UACE,eAAC,IAAD,CACEgF,GArEH,EAsEG6C,UAAWC,QAAQ/G,EAAO+C,YAF5B,UAGE,cAAC,IAAD,CAAWkE,QAAQ,aAAnB,oBACA,cAAC,IAAD,CACED,KAAK,aACLE,KAAK,OACLC,aAAa,KACbC,YAAY,OACZC,IAAKX,EAAS,CAAEY,SAAU,+BAE5B,cAAC,IAAD,UACGtH,EAAO+C,YAAc/C,EAAO+C,WAAWwE,aAI5C,eAAC,IAAD,CACEtD,GArFH,EAsFG6C,UAAWC,QAAQ/G,EAAO+I,WAF5B,UAGE,cAAC,IAAD,CAAW9B,QAAQ,YAAnB,sBACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,OACLC,aAAa,KACbC,YAAY,WACZC,IAAKX,EAAS,CAAEY,SAAU,iCAE5B,cAAC,IAAD,UACGtH,EAAO+I,WAAa/I,EAAO+I,UAAUxB,aAI1C,eAAC,IAAD,CACEtD,GArGH,EAsGG6C,UAAWC,QAAQ/G,EAAOiD,OAF5B,UAGE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACLC,aAAa,KACbC,YAAY,oBACZC,IAAKX,EAAS,CACZY,SAAU,0CACV6H,QAAS,CACPlJ,MAAO,4CACPsB,QAAS,kDAIf,cAAC,IAAD,UACGvH,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GA3HH,EA4HG6C,UAAWC,QAAQuI,GAAmBG,EAAU,MAFlD,UAGE,cAAC,IAAD,CAAWxI,QAAQ,YAAnB,2BACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,uBACZnB,MAAOmJ,EACPjD,SAjGa,SAACC,GAC5BiD,EAAYjD,EAAEC,OAAOpG,OACrBsJ,GAAmB,IAgGLlI,IAAKX,EAAS,CAAEY,UAAU,IAC1BrD,GAAIkM,KAEJV,GAAW,cAAC,EAAD,CACXrO,UAAWA,EACXE,aAAcA,EACdD,aAAcA,EACdE,eAAgBA,EAChBC,eAAgBA,OAGpB,eAAC,IAAD,CACEyC,GAjJH,EAkJG6C,UAAWC,QAAQ/G,EAAOoQ,WAF5B,UAGE,cAAC,IAAD,CAAWnJ,QAAQ,YAAnB,qCAGA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,wBACZiJ,QAAS,SAAAjE,GAAC,OAAIA,EAAEkE,kBAChBjJ,IAAKX,EAAS,CACZY,SAAU,4CACVM,SAAU,SAAC3B,GAAD,OAAmBA,IAAUmJ,GAAY,uCAGvD,cAAC,IAAD,UACGpP,EAAOoQ,WAAapQ,EAAOoQ,UAAU7I,aAG1C,cAAC,IAAD,CACE1I,QAAS,SAAAwK,GAAC,OAAIkG,GAAmB,IACjCrI,KAAK,SAFP,qCNvKZqJ,QAAS,CAAEtI,KAAM,WAAYC,UAAWjG,IACxCuO,SAAU,CAAEvI,KAAM,OAAQC,UAAWjG,KAG1BkM,GAAiC,uCACzCZ,IACAxF,IACAqF,IQzBQqD,GAA8B,CACzC,CACEvS,MAAO,SACP+J,KAAMkG,GAAOX,QAAQvF,MAEvB,CACE/J,MAAO,WACP+J,KAAMkG,GAAOoC,QAAQtI,OCDZyI,GAAe,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,YAC1B,OACI,eAAC,IAAD,CACEtL,GAAI9G,YAAkB,aAAc,eACpCsP,GAAI,EACJ1P,QAAS,CAAEoE,GAAI,QAHjB,UAIGkO,GAAY/I,KAAI,SAACkJ,GAAD,OACf,qBAAyB/R,QAAS8R,EAAlC,SACE,cAAC,GAAD,eAAoBC,KADZA,EAAQ1S,UAIpB,sBAAMW,QAAS8R,EAAf,SAA4B,cAAC,EAAD,CAAmBzS,MAAM,uBAKzD2S,GAAgB,SAAC,GAAwC,IAAtC3S,EAAqC,EAArCA,MAAOiF,EAA8B,EAA9BA,SAAU8E,EAAoB,EAApBA,KAAoB,EAC7BE,cAArBC,EADkD,EAClDA,OAAQ0I,EAD0C,EAC1CA,SAEhB,OACE,eAAC,IAAD,CAAO/R,QAAS,EAAGF,QAASsE,GAAY2N,EAAxC,UACE,cAAC,IAAD,CAAM5C,GAAE,OAAEjG,QAAF,IAAEA,IAAQ,IAAlB,SACE,eAAC,IAAD,CACE4F,GAAI,EACJkB,GAAI,EACJnQ,QAAS,gBACT8M,MAAO,SACP5F,OAAQ,CAACiL,WAAYxS,YAAkB,cAAe,gBALxD,UAOE,cAAC,IAAD,CACEmH,WAAY,IADd,SAGGxH,IAEFiF,GACC,cAAC,IAAD,CACEvB,GAAIoP,IACJC,WAAY,uBACZ1L,UAAW6C,EAAS,iBAAmB,GACvC5E,EAAG,EACHC,EAAG,SAKX,cAAC,IAAD,CAAUyN,GAAI9I,EAAQ+I,gBAAc,EAACC,MAAO,CAAEC,UAAW,eAAzD,SACE,cAAC,IAAD,CACEC,GAAI,EACJC,GAAI,EACJC,WAAY,EACZC,YAAa,QACb/F,MAAO,QALT,SAMGvI,GACCA,EAASuE,KAAI,SAACgK,GAAD,aACX,cAAC,IAAD,CAAwBxD,GAAE,UAAEwD,EAAMzJ,YAAR,QAAgB,IAA1C,SACE,cAAC,IAAD,CAAYrG,GAAG,OAAOiM,GAAI,EAA1B,SACG6D,EAAMxT,SAFAwT,EAAMxT,kB,oBC5DpByT,GAAgB,WAC3B,OAAO,mCACL,cAAC,IAAD,CAAOhT,UAAW,MAAOI,QAAS,EAAlC,SACG0R,GAAY/I,KAAI,SAACkJ,GAAD,aACf,cAAC,IAAD,UACE,eAAC,KAAD,CAASgB,QAAS,QAAS3I,UAAW,eAAtC,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAarH,GAAG,OAAOsD,EAAG,EAAGpG,SAAU,KAAM4G,WAAY,IAAzD,SACE,cAAC,IAAD,CAAMwI,GAAE,UAAE0C,EAAQ3I,YAAV,QAAkB,IAA1B,SACG2I,EAAQ1S,YAKd0S,EAAQzN,UACP,cAAC,KAAD,CACE0O,OAAQ,EACR1M,UAAW,KAEXD,EAAG,EACHE,QAAS,KACT0G,KAAM,KANR,SAOE,cAAC,IAAD,UACG8E,EAAQzN,SAASuE,KAAI,SAACgK,GAAD,OACpB,cAAC,GAAD,eAAqCA,GAAjBA,EAAMxT,kBApB5B0S,EAAQ1S,eAiCpB4T,GAAgB,SAAC,GAAwC,IAAtC5T,EAAqC,EAArCA,MAAO+J,EAA8B,EAA9BA,KAAM8J,EAAwB,EAAxBA,SACpC,OACE,cAAC,IAAD,CAAM7D,GAAE,OAAEjG,QAAF,IAAEA,IAAQ,IAAlB,SACA,cAAC,IAAD,CACErG,GAAG,OACHoQ,KAAM,QACN7T,QAAS,QACT+G,EAAG,EACHE,QAAS,KACTlG,MAAOX,YAAkB,WAAY,SANvC,SAQE,eAAC,IAAD,CAAOI,UAAW,MAAO+M,MAAO,SAAhC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEuF,WAAY,eACZgB,YAAa,CAAE/S,MAAOX,YAAkB,WAAY,aACpDmH,WAAY,IAHd,SAKGxH,IAEH,cAAC,IAAD,CAAMY,SAAU,KAAhB,SAAuBiT,OAEzB,cAAC,IAAD,CACEd,WAAY,eACZ1L,UAAW,oBACX2M,QAAS,EACTD,YAAa,CAAEC,QAAS,OAAQ3M,UAAW,iBAC3C3G,QAAS,WACT8M,MAAO,SACPyG,KAAM,EAPR,SAQE,cAAC,IAAD,CAAMjT,MAAO,WAAYsE,EAAG,EAAGC,EAAG,EAAG7B,GAAIwQ,iBCrDtCC,GAAS,SAAC,GAAmB,EAAlBC,SAAmB,IAAD,EAEXnK,cAArBC,EAFgC,EAEhCA,OAAQ0I,EAFwB,EAExBA,SAEhB,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEzL,GAAI9G,YAAkB,cAAc,eACpCW,MAAM,QACNqT,KAAM,OACN1E,GAAI,CAAEvL,KAAM,GACZyM,GAAI,CAAEzM,KAAM,GACZkQ,aAAc,EACdf,YAAa,QACb/F,MAAO,SART,UASE,cAAC,IAAD,CACEyG,KAAM,CAAE7P,KAAM,EAAGC,GAAI,QACrByH,GAAI,CAAE1H,MAAO,GACbnE,QAAS,CAAEmE,KAAM,OAAQC,GAAI,QAH/B,SAIE,cAAC,IAAD,CACE1D,QAASiS,EACT1R,KACEgJ,EAAS,cAACqK,EAAA,EAAD,CAAWjP,EAAG,EAAGC,EAAG,IAAQ,cAACiP,EAAA,EAAD,CAAelP,EAAG,EAAGC,EAAG,IAE/DxE,QAAS,QACTI,aAAY,wBAGhB,eAAC,IAAD,CAAM8S,KAAM,CAAE7P,KAAM,GAAK1D,QAAS,CAAE0D,KAAM,SAAUC,GAAI,SAAxD,UACE,cAAC,IAAD,CAAM2L,GAAIC,GAAOX,QAAQvF,KAAzB,SACE,cAAC,IAAD,CACEtF,UAAW+K,YAAmB,CAAEpL,KAAM,SAAUC,GAAI,SACpDoQ,WAAY,UACZ7T,SAAU,MACV4G,WAAY,OACZxG,MAAM,QALR,uBAWF,cAAC,IAAD,CAAMf,QAAS,CAAEmE,KAAM,OAAQC,GAAI,QAAUyH,GAAI,GAAjD,SACE,cAAC,GAAD,SAIJ,eAAC,IAAD,CACEmI,KAAM,CAAE7P,KAAM,EAAGC,GAAI,GACrB3D,QAAS,WACTD,UAAW,MACXI,QAAS,EAJX,UAME,cAAC,EAAD,CAAmBZ,QAAS,CAAEmE,KAAM,OAAQC,GAAI,UAChD,cAAC,IAAD,CAAM2L,GAAIC,GAAOS,MAAM3G,KAAMmJ,MAAO,CAACjS,WAAY,KAAjD,SACE,cAAC,IAAD,CACEH,KAAM,KACNF,SAAU,KACVG,QAAS,QACT2C,GAAG,SAJL,uCAaN,cAAC,IAAD,CAAUsP,GAAI9I,EAAQ+I,gBAAc,EAApC,SACE,cAAC,GAAD,CAAcR,YAAaG,UCrFtB8B,GAAS,WACpB,OACE,cAAC,IAAD,CAAKhR,GAAG,SAASiM,GAAG,IAAIgF,UAAU,YAAYhH,YAAatN,YAAkB,WAAY,YAAzF,SACE,cAAC,IAAD,CACEI,UAAW,CAAC2D,KAAM,SAAUC,GAAI,OAChCF,KAAM,CAACC,KAAM,KAAMC,GAAI,OACvBkJ,GAAG,OACHsD,GAAI,CAACzM,KAAM,IAAKC,GAAI,KACpBmJ,MAAM,SACN9G,eAAe,SANjB,SAQE,eAAC,IAAD,CACEZ,GAAI,CAAC1B,KAAM,IAAKC,GAAI,GACpB5D,UAAW,CAAC2D,KAAM,SAAUC,GAAI,OAChCuQ,YAAa,CAACvQ,GAAI,KAClBzD,SAAS,KACTC,QAAS,CAACuD,KAAM,IAAKC,GAAI,KACzBI,UAAW,CAACL,KAAM,SAAUC,GAAI,SANlC,UAQE,cAAC,IAAD,CAAM2L,GAAIC,GAAOX,QAAQvF,KAAzB,SACE,eAAC,IAAD,CAAM/I,MAAOX,YAAkB,cAAe,eAA9C,mBAAsE,IAAI2H,MAAO6M,cAAe,IAAhG,eAGF,cAAC,IAAD,gDCrBGC,GAAY,WAIvB,OACE,cAAC,IAAD,CAAKtP,EAAG,OAAQ/B,WAAY,SAAUgC,cAAe,SAAU4O,KAAM,QAArE,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK/O,EAAE,OAAP,SACE,cAAC,GAAD,MAEF,eAAC,IAAD,CAAKC,EAAE,OAAOa,MAAM,OAAOZ,EAAE,OAAOE,SAAU,EAAGD,cAAe,SAAU0B,GAAI9G,YAAkB,WAAY,YAA5G,UACE,eAAC,IAAD,WAEI2Q,OAAO+D,KAAK9E,IAAQzG,KAAI,SAAAwL,GAAC,OACvB,cAAC,IAAD,CAAeC,MAAa,QAAND,EAAajL,KAAMkG,GAAO+E,GAAGjL,KAAMC,UAAWiG,GAAO+E,GAAGhL,WAAlEgL,MAGhB,cAAC,IAAD,CAAUhF,GAAIC,GAAOqC,SAASvI,UAEhC,cAAC,GAAD,a,UCzBGmL,GAAeC,aAAY,CACtCC,OAAQ,CACNC,QAAS,CACPC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,cCTEC,GAAa,kBACxB,cAAC,IAAD,CAAgB7Q,MAAO+P,GAAvB,SACE,cAAC,GAAD,OCOWe,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMrN,QACW,cAA7B6N,OAAOxU,SAASyU,UAEe,UAA7BD,OAAOxU,SAASyU,UAEhBD,OAAOxU,SAASyU,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,GAAD,OAEF7U,SAAS8U,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAACe,GACLA,EAAaC,gBAEdC,OAAM,SAAC/U,GACNmJ,QAAQnJ,MAAMA,EAAM+G,YCvH5B4M,O","file":"static/js/main.06700e30.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  Button,\n  Flex,\n  HStack,\n  Box,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  label?: string,\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({label, display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n    {label ? \n    <Flex direction=\"row\" justify='right'>\n      <Button \n      onClick={toggleColorMode}\n      display={display}\n      fontSize={'md'}\n      >\n        <HStack spacing={2}>\n          <Box>{label}</Box>\n          <Box><SwitchIcon /></Box>\n        </HStack>\n      </Button>\n      </Flex>\n      : \n      <IconButton \n        display={display}\n        size=\"md\"\n        fontSize=\"lg\"\n        variant=\"ghost\"\n        color=\"current\"\n        marginLeft=\"2\"\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    }\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}","import { userInformation, LoginData, FunctionOk, FunctionError, SignUpData, ConditionData } from './types';\nimport { getToken, setToken } from '../utils/token';\n\nconst defaultOk:FunctionOk = (status, data) => {return};\nconst defaultError:FunctionError = (status, errors) => {return};\n\nclass Http {\n  private url = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : document.location.origin;\n\n  public async login(\n    fields:LoginData,\n    ok:FunctionOk=defaultOk,\n    error:FunctionError=defaultError,\n    connectionError=() => {}) {\n    try {\n      const res = await fetch(`${this.url}/api/v1/login/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(fields)\n      });\n\n      const data = await res.json();\n\n      if(res.status === 200) {\n        setToken(data.data.token);\n        ok(res.status, data.data);\n        return;\n      }\n      error(res.status, data.errors);\n    } catch (err) {\n      connectionError();\n    }\n  }\n\n  public async signup(\n    fields:SignUpData,\n    ok:FunctionOk=defaultOk,\n    error:FunctionError=defaultError,\n    connectionError=() => {}) {\n    try {\n      const res = await fetch(`${this.url}/api/v1/signup/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(fields)\n      });\n      const data = await res.json();\n\n      if(res.status === 201) {\n        setToken(data.data.token);\n        ok(res.status, data.data);\n        return;\n      }\n      error(res.status, data.errors);\n    } catch(err) {\n      connectionError();\n    }\n  }\n  \n  public async newCondition(\n    fields:ConditionData,\n    ok:FunctionOk=defaultOk, \n    error:FunctionError=defaultError,\n    connectionError=() => {}) {\n    try {\n      const res = await fetch(`${this.url}/api/v1/conditions/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Token ${getToken()}`\n        },\n        body: JSON.stringify(fields)\n      });\n\n      const data = await res.json();\n      if(res.status === 201) {\n        ok(res.status, data.data);\n        return;\n      }\n      error(res.status, data.errors);\n    } catch (err) {\n      connectionError()\n    }\n  }\n\n  public async conditions(\n    ok:FunctionOk=defaultOk,\n    error:FunctionError=defaultError,\n    connectionError=()=>{}) {\n      try {\n        const res = await fetch(`${this.url}/api/v1/conditions/`, {\n          headers: {\n            'Authorization': `Token ${getToken()}`\n          }\n        });\n  \n        const data = await res.json();\n        if(res.status === 200) {\n          ok(res.status, data.data);\n          return;\n        }\n        error(res.status, data.error);\n      } catch (err) {\n        connectionError();\n      }\n    }\n\n  public async backgroundSubtypes(\n    ok:FunctionOk=defaultOk,\n    error:FunctionError=defaultError,\n    connectionError=()=>{}) {\n      try {\n        const res = await fetch(`${this.url}/api/v1/background-subtypes/`, {\n          headers: {\n            'Authorization': `Token ${getToken()}`\n          }\n        });\n  \n        const data = await res.json();\n        if(res.status === 200) {\n          ok(res.status, data.data);\n          return;\n        }\n        error(res.status, data.error);\n      } catch (err) {\n        connectionError();\n      }\n    }\n\n  public async getProfileInfo(\n    ok:FunctionOk=defaultOk, \n    error:FunctionError=defaultError, \n    connectionError=()=>{}) {\n    try {\n      const res = await fetch(`${this.url}/api/v1/profile/`, {\n        headers: {\n          'Authorization': `Token ${getToken()}`\n        },\n      });\n      const data = await res.json();\n      if(res.status === 200) {\n        ok(res.status, data.data);\n        return;\n      }\n      error(res.status, data.errors);\n    } catch (err) {\n      connectionError();\n    }\n  }\n\n  public async putProfileInfo(\n    fields:userInformation, \n    ok:FunctionOk=defaultOk, \n    error:FunctionError=defaultError, \n    connectionError=()=>{}) {\n      try {\n        const res = await fetch(`${this.url}/api/v1/profile/`, {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Token ${getToken()}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(fields)\n        });\n        const data = await res.json();\n\n        if(res.status === 200) {\n          ok(res.status, data.data);\n          return;\n        }\n        error(res.status, data.errors,);\n      } catch (error) {\n        connectionError();\n      }\n  }\n}\n\nexport const http = new Http();\n","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon } from '@chakra-ui/react'\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: 'gray.100',\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signin.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signin.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","import React from 'react'\n\nexport const NotfoundPage = () => {\n  return (\n    <div>\n      <h1>404</h1>\n      <h2>Not found</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport {userInformation} from '../utils/typesDefinitions'\n\ntype presentationCardPropsTypes = {\n  userData: any,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box>\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'30%', md:'20%'}}>\n          <Image borderRadius=\"full\" maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box \n          maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'xl'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'3xl'}}\n          >\n            {userData.first_name + ' ' + userData.first_name}\n          </Text>\n          <Text>{userData.dob} </Text>\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.location}\n          </Text>\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-0.1em': 'calc(50% - 0.1em)'}`, //(50% - 1/2(width))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        }\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='1' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import { useColorModeValue } from '@chakra-ui/color-mode'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { Box } from '@chakra-ui/layout'\nimport React from 'react'\n\nexport const AddButton = () => {\n  return (\n      <Box\n        bg={useColorModeValue('primary.500', 'primary.200')}\n        rounded='50%'\n        cursor='pointer'\n        _hover={{\n          bg:useColorModeValue('primary.300', 'primary.300')\n        }}\n      >\n        <AddIcon \n          w='2em'\n          h='2em'\n          p='.5em'\n          color='white'\n        />\n      </Box>\n  )\n}\n","export const isValidDate = (value:string) => {\n  const date_of_diagnosis = Date.parse(value);\n  return date_of_diagnosis < Date.now();\n}","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n  Select\n} from '@chakra-ui/react';\nimport { BackgroundSubtypeData, ConditionData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\nimport { isValidDate } from '../../utils/utils';\n\ntype NewConditionProps = {\n  formId: string;\n  onSubmit: (values:ConditionData) => void;\n  backgroundSubtypes: BackgroundSubtypeData[];\n}\n\nexport const NewConditionForm = ({ formId, onSubmit, backgroundSubtypes }: NewConditionProps) => {\n  const { register, handleSubmit, errors } = useForm<ConditionData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Nombre</FormLabel>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='Diabetes tipo 1'\n            ref={register({required: 'El nombre es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <FormControl mb='4' isInvalid={Boolean(errors.description)}>\n          <FormLabel htmlFor=\"description\">Description</FormLabel>\n          <Textarea\n            name=\"description\"\n            placeholder='Descripción de la condición'\n            ref={register()}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.background_subtype)}>\n          <FormLabel htmlFor=\"background_subtype\">Tipo de condición</FormLabel>\n          <Select\n            name=\"background_subtype\"\n            ref={register()}>\n            {backgroundSubtypes.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.date_of_diagnosis)}>\n          <FormLabel htmlFor=\"date_of_diagnosis\">Fecha de diagnóstico</FormLabel>\n          <Input\n            name=\"date_of_diagnosis\"\n            type=\"date\"\n            autoComplete='on'\n            ref={register({\n              required: 'La fecha es obligatoria',\n              validate: value => isValidDate(value) || 'La fecha no es válida'\n            })}/>\n          <FormErrorMessage>\n            {errors.date_of_diagnosis && errors.date_of_diagnosis.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","export const userTypes = {\n  PATIENT: 'PAT',\n  MEDIC: 'MED',\n}\n\nexport const sexTypes = {\n  MALE: 'M',\n  FEMALE: 'F',\n  OTHER: 'O',\n  NOT_SPECIFIED: 'U',\n}\n\nexport type timeLineItemProps = {\n  conditionTitle: string,\n  date_of_diagnosis: string,\n  conditionType?: string,\n  conditionSubtype?: string,\n  conditionDescription?: string,\n}","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { DoctorLandingView } from \"../views/Doctor/DoctorLandingView\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientHomeView } from \"../views/Patient/PatientHomeView\";\nimport { ProfileView } from \"../views/Profile/ProfileView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nconst patientPaths: { [name: string]: route } = {\n  patientHome: { path: '/pat/home', component: PatientHomeView },\n  patientProfile: { path: '/pat/profile', component: ProfileView },\n}\n\nconst doctorPaths: { [name: string]: route } = {\n  doctorLanding: { path: '/med/landing', component: DoctorLandingView },\n  doctorpatients: { path: '/med/patients', component: NotfoundPage },\n}\n\nconst generalPaths: { [name: string]: route } = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signin: { path: '/signup', component: SignUpView },\n  contact: { path: '/contact', component: NotfoundPage },\n  notFound: { path: '/404', component: NotfoundPage },\n}\n\nexport const routes: { [name: string]: route } = {\n  ...generalPaths,\n  ...patientPaths,\n  ...doctorPaths,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Box, Text, VStack } from '@chakra-ui/layout';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport { userInformation } from '../../utils/typesDefinitions';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { AddButton } from '../../components/TimeLine/AddButton';\nimport { NewConditionForm } from './NewConditionForm';\nimport {\n  useDisclosure,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  useMediaQuery\n} from '@chakra-ui/react';\nimport theme from '@chakra-ui/theme'\nimport { AddIcon } from '@chakra-ui/icons';\nimport { BackgroundSubtypeData, ConditionData, FunctionError, FunctionOk } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useToast } from \"@chakra-ui/react\"\nimport { connectionErrorToast } from '../../utils/connectionErrorToast';\n\n\nexport const PatientHomeView = () => {\n\n  const userData: any = {\n    first_name: 'Sergio Gabriel',\n    last_name: 'Diosdado Castelazo',\n    dob: '14-dic-1998',\n    email: 'sergio@doctory.com',\n    location: 'Matamoros, Tamaulipas'\n  }\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`); \n\n  const [backgroundSubtypes, setBackgroundSubtype] = useState<BackgroundSubtypeData[]>([])\n  \n  const [conditions, setConditions] = useState<ConditionData[]>([])\n\n  const toast = useToast();\n\n  const onSubmit = (values:ConditionData) => {\n    const ok:FunctionOk = (_, data) => {\n      const conds = [...conditions, data as ConditionData]\n      conds.sort((x, y) => x.date_of_diagnosis < y.date_of_diagnosis ? 1 : -1)\n      setConditions(conds)\n      onClose();\n      toast({\n        title: 'Condición creada',\n        description: 'Se ha añadido una nueva condición a tu historia clínica',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n        variant: 'left-accent'\n      });\n    }\n    const error:FunctionError = (statusCode, error) => {\n      console.log(error);\n    }\n\n    http.newCondition(values, ok, error, () => toast(connectionErrorToast()));\n  }\n  \n  useEffect(() => {\n    const ok:FunctionOk = (statusCode, data) => {\n      const bs = data as BackgroundSubtypeData[];\n      setBackgroundSubtype(bs)\n    }\n    http.backgroundSubtypes(ok)\n  }, [])\n\n  useEffect(() => {\n    const ok:FunctionOk = (statusCode, data) => {\n      const conds = data as ConditionData[];\n      setConditions(conds)\n    }\n    http.conditions(ok)\n  }, [])\n\n  return (\n    <>\n      <VStack>\n        <Text fontSize='4xl'>Historia Médica</Text>\n        <PresetationCard userData={userData} avatar={avatar} />\n        <Box\n          w='100%'\n          maxW={{base: '100%', md: '75%'}}\n        >\n          <TimeLine>\n            {conditions.map(condition => (\n              <TimeLineItem \n                key={condition.id}\n                conditionTitle={condition.name}\n                date_of_diagnosis={condition.date_of_diagnosis}\n                conditionDescription={condition.description}\n              />\n            ))}\n          </TimeLine>\n        </Box>\n      </VStack>\n      \n      <Drawer \n        placement={isMobile ? 'bottom' : 'right'}\n        isOpen={isOpen}\n        onClose={onClose}>\n          <DrawerOverlay>\n            <DrawerContent>\n              <DrawerCloseButton/>\n              <DrawerHeader borderBottomWidth='1px'>\n                Nueva condición\n              </DrawerHeader>\n\n              <DrawerBody>\n                <NewConditionForm\n                  onSubmit={onSubmit}\n                  formId='form-condition'\n                  backgroundSubtypes={backgroundSubtypes}/>\n              </DrawerBody>\n              \n              <DrawerFooter>\n                <Button\n                  type='submit'\n                  form='form-condition'\n                  leftIcon={<AddIcon/>}\n                  colorScheme='primary'>Añadir</Button>\n              </DrawerFooter>\n            </DrawerContent>\n          </DrawerOverlay>\n      </Drawer>\n      <Box\n        display='inline-block'\n        ml='auto'\n        mr='1rem'\n        mb='1rem'\n        position='sticky'\n        bottom='1rem'\n        onClick={onOpen}\n      >\n        <AddButton/>\n      </Box>\n    </>\n  )\n}\n","import { UseToastOptions } from \"@chakra-ui/react\";\n\nexport const connectionErrorToast = () => ({\n  title: 'Error de conexión',\n  description: 'Comprueba tu conexión de internet e intenta de nuevo.',\n  status: 'error',\n  duration: 5000,\n  isClosable: true,\n  position: 'top',\n  variant: 'left-accent'\n} as UseToastOptions)","import React, { ChangeEvent, Dispatch, SetStateAction, useCallback, useEffect, useState } from 'react'\nimport { useForm } from 'react-hook-form';\nimport { Avatar, AvatarBadge, Button, FormControl, FormErrorMessage, FormLabel, Input, Select, theme, useColorModeValue, useMediaQuery, useToast } from \"@chakra-ui/react\"\nimport { Box, Container, Flex, Heading, HStack, Stack, VStack } from '@chakra-ui/layout';\nimport { FaCamera } from 'react-icons/fa';\nimport { sexTypes, userTypes } from '../../utils/typesDefinitions';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { FunctionError, FunctionOk, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { connectionErrorToast } from '../../utils/connectionErrorToast';\nimport { isValidDate } from '../../utils/utils';\n\nexport const ProfileView = () => {\n  const { register, handleSubmit, errors, setValue } = useForm<userInformation>();\n  const [isLoading, setIsLoading] = useState(true)\n  const [allergiesObject, setAllergiesObject] = useState<{id: number, value: string}[]>([{id:0,value:''},]);\n  const [lastKnownAllergiesId, setLastKnownAllergiesId] = useState(1)\n  const [specialties, setSpecialties] = useState(['']);\n  const [isDesktop] = useMediaQuery(`(min-width: ${theme.breakpoints.md}`); \n  const toast = useToast();\n  const [data, setData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  });\n\n  const ok = useCallback((_, data) => {\n    \n    const parseArrayToAllergiesObject = (allergies:string[] = ['']) => {\n      let localLastKownID = lastKnownAllergiesId;\n      const res = allergies.map(allergy => ({\n        id: localLastKownID++,\n        value: allergy\n      }));    \n      setLastKnownAllergiesId(localLastKownID);\n      return res;\n    }\n    const userData = data as userInformation;\n    const {patient, medic} = userData;\n    setValue('sex', userData.sex)\n    setData(userData);\n    \n    if (userData.type.includes(userTypes.PATIENT)) {\n      register('patient.allergies');\n      setAllergiesObject(parseArrayToAllergiesObject(patient.allergies || ['']));\n    }\n    if (userData.type.includes(userTypes.MEDIC)) {\n      register('medic.specialties');\n      setValue('medic.specialties', medic.specialties);\n      setSpecialties(medic.specialties);\n    }\n    setIsLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[setValue, register])\n\n  useEffect(() => {\n    http.getProfileInfo(ok);\n  }, [ok])\n  \n\n\n  const onSubmit = (values: userInformation) => {\n    setIsLoading(true);\n    if (data.type.includes(userTypes.PATIENT)) {\n      values.patient && (values.patient.allergies = allergiesObject.map(x => x.value).filter(y => y !== ''));\n    }\n    const ok:FunctionOk = () => {\n      setIsLoading(false);\n    }\n    const error:FunctionError = (_, error) => {\n      setIsLoading(false);\n      console.log('error', error);\n    }\n    const connectionError = () => {\n      setIsLoading(false);\n      toast(connectionErrorToast(isDesktop));\n    }  \n    http.putProfileInfo(values, ok, error, connectionError);\n  }\n\n  const addSpecialtyField = () => setSpecialties((s) => [...s, '']);\n  \n  const addAllergyField = () => {\n    setAllergiesObject(obj => {\n      const newValue = {id: lastKnownAllergiesId, value: ''};\n      setLastKnownAllergiesId(x => x+1);\n      return [...obj, newValue];\n    })\n  }\n  \n\n  const handleValueArrChange = (e: ChangeEvent<HTMLInputElement>, index: number, name:string,  setArrValue: Dispatch<SetStateAction<string[]>>) => {\n    setArrValue(values => {\n      let newValues = [...values];\n      newValues[index] = e.target.value;\n      setValue(name, newValues);\n      return newValues;\n    })\n  }\n  \n  const handleAllergieChange = (e: ChangeEvent<HTMLInputElement>, allergy:{id:number, value:string} ) => {\n    let allergyId = allergiesObject.findIndex(x => x.id === allergy.id);\n    setAllergiesObject(allergies => {    \n      let newValues = [...allergies];\n      newValues[allergyId] = {...allergy, value:e.target.value};\n      return newValues\n    })\n  }\n\n\n  const BulletPoint = () => (\n    <Box \n      bg= 'currentcolor'\n      borderRadius= '50%'\n      w='5px'\n      h='5px'\n      mx='.5em'\n    />\n  )\n\n  return (\n    <Container\n    w=\"100vw\"\n    h=\"100%\"\n    maxW=\"95%\"\n    d={'flex'}\n    flexGrow={1}\n    mx={{base:'1em', md:'2em'}}\n    >\n    <Flex\n      flexGrow={1}\n      align={'flex-start'}\n      justify={'center'}\n      pt={12}\n      w={'100%'}\n    >\n    <VStack w={'100%'}>\n      <Heading fontSize={'3xl'}>Editar Perfil</Heading>\n      <Stack mb={4} w={'100%'} align={'center'}>\n        <Avatar src={avatar} size=\"2xl\">\n          <AvatarBadge boxSize=\".8em\" borderColor=\"transparent\" bg=\"white\" _hover={{color:'gray.500'}}>\n            <FaCamera />\n          </AvatarBadge>\n        </Avatar>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        minW={{base:'xs', md: 'md'}}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n        mb={12}\n      >\n       \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.first_name)}>\n            <FormLabel htmlFor='first_name'>Nombre(s)</FormLabel>\n            <Input\n              name='first_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Juan'\n              defaultValue={data.first_name}\n              ref={register({ required: 'El nombre es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.first_name && errors.first_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.last_name)}>\n            <FormLabel htmlFor='last_name'>Apellidos</FormLabel>\n            <Input\n              name='last_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Pérez'\n              defaultValue={data.last_name}\n              ref={register({ required: 'El apellido es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.last_name && errors.last_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.email)}>\n            <FormLabel htmlFor='email'>Correo</FormLabel>\n            <Input\n              name='email'\n              type='email'\n              disabled={true}\n              placeholder='ejemplo@gmail.com'\n              value={data.email}\n              ref={register}\n            />\n            \n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.dob)}>\n            <FormLabel htmlFor='dob'>Fecha de nacimiento</FormLabel>\n            <Input\n              name='dob'\n              type='date'\n              autoComplete='on'\n              defaultValue={data.dob}\n              ref={register({\n                required: 'La fecha es obligatoria',\n                validate: value => isValidDate(value) || 'La fecha no es válida',\n               })}\n            />\n            <FormErrorMessage>\n            {errors.dob && errors.dob.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel htmlFor='sex'>Sexo</FormLabel>\n              <Select\n                as='select'\n                name='sex'\n                onChange= {(e) => setValue('sex', e.target.value)}\n                ref={register}\n              >\n                <option value={sexTypes.NOT_SPECIFIED}>Sin especificar</option>\n                <option value={sexTypes.FEMALE}>Mujer</option>\n                <option value={sexTypes.MALE}>Hombre</option>\n                <option value={sexTypes.OTHER}>Otro</option>\n              </Select>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='location'>Lugar de Residencia</FormLabel>\n            <Input\n              name='location'\n              type='text'\n              autoComplete='on'\n              placeholder='Monterrey, Nuevo León'\n              defaultValue={data.location}\n              ref={register}\n            />\n          </FormControl>\n          \n          {data.type.includes(userTypes.MEDIC) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='license'>Cédula Profesional</FormLabel>\n              <Input\n                name='medic.license'\n                type='text'\n                placeholder='12345678'\n                defaultValue={data.medic? data.medic.license : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.MEDIC) && \n            <FormControl mb={4} >\n              <FormLabel htmlFor='specialty'>Especialidad(s)</FormLabel>\n              {specialties.map((specialty,index) => (\n                <HStack\n                  mb={2}\n                  key={'specialty-'+index} // TODO: \n                >\n                  {BulletPoint()}\n                  <Input\n                    value={specialty}\n                    onChange={e => handleValueArrChange(e, index, 'medic.specialties', setSpecialties)}\n                    size='sm'\n                    type='text'\n                    placeholder='Cirujano'\n                  />\n                </HStack>\n              ))}\n\n              <HStack>\n                {BulletPoint()}\n                <div>\n                <Button\n                  size='sm'\n                  variant=\"outline\"\n                  onClick={addSpecialtyField}\n                  leftIcon={<AddIcon/>}\n                >Agregar</Button>\n                </div>\n              </HStack>\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='blood_type'>Tipo de Sangre</FormLabel>\n              <Input\n                name='patient.blood_type'\n                type='text'\n                autoComplete='on'\n                placeholder='O+'\n                defaultValue={data.patient? data.patient.blood_type : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) && \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='allergies'>Alergias</FormLabel>\n            {allergiesObject.map((allergy) => (\n              <HStack\n                mb={2}\n                key={allergy.id}\n              >\n                {BulletPoint()}\n                <Input\n                  value={allergy.value}\n                  onChange={e => handleAllergieChange(e, allergy)}\n                  size='sm'\n                  type='text'\n                  placeholder='Pólen'\n                />\n              </HStack>\n            ))}\n            <HStack>\n              {BulletPoint()}\n              <div>\n              <Button\n                size='sm'\n                variant=\"outline\"\n                disabled={allergiesObject[allergiesObject.length-1].value === ''}\n                onClick={addAllergyField}\n                leftIcon={<AddIcon/>}\n              >Agregar</Button>\n              </div>\n            </HStack>\n          </FormControl>\n          }\n          <Stack  w={'100%'} align='flex-end'>\n            <Button \n              isLoading={isLoading}\n              colorScheme='primary'\n              type=\"submit\"\n            >\n              Guardar\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </VStack>\n    </Flex>\n  </Container>\n  )\n}","import React from 'react'\n\nexport const DoctorLandingView = () => {\n    return (\n        <div>\n            <h1>DOCTOR LANDING</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  useToast,\n} from '@chakra-ui/react';\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { FunctionError, LoginData, LoginError  } from '../../http/types';\nimport { FunctionOk } from '../../http/types';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { connectionErrorToast } from '../../utils/connectionErrorToast';\n\n\nexport const LoginView = () => {\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  const history = useHistory()\n  const toast = useToast();\n  \n  const onSubmit = (values: LoginData) => {\n    \n    const ok: FunctionOk = (statusCode, data) => {\n      history.push(routes.patientHome.path)\n    }\n\n    const error: FunctionError = (statusCode, error) => {\n      const loginError = error as LoginError;\n      toast({\n        title: 'Ups!',\n        description: Object.values(loginError)[0],\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n        variant: 'left-accent'\n      });\n    }\n    http.login(values, ok, error, () => toast(connectionErrorToast()));\n  }\n\n  return (\n    <Flex\n      flexGrow={1}\n      h={'100%'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.100', 'gray.800')}\n    >\n      <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n        <Box\n          p={8}\n          bg={useColorModeValue('white', 'gray.700')}\n          minW='xs'\n          rounded={'lg'}\n          boxShadow={'lg'}\n        >\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.email)}>\n              <FormLabel htmlFor=\"email\">Correo</FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                autoComplete='on'\n                placeholder='ejemplo@gmail.com'\n                ref={register({\n                  required: 'El correo electrónico es obligatorio',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: 'Ingresa un correo electrónico válido',\n                  },\n                })}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.password)}>\n              <FormLabel htmlFor='password'>Contraseña</FormLabel>\n              <Input\n                name='password'\n                type=\"password\"\n                autoComplete='off'\n                ref={register({ required: true })}\n              />\n            </FormControl>\n            <Stack spacing={8}>\n              <ChakraLink>¿Olvidó la contraseña?</ChakraLink>\n              <Button type=\"submit\">Entrar</Button>\n            </Stack>\n          </form>\n        </Box>\n      </Stack>\n    </Flex>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n  useToast,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData, FunctionOk, FunctionError } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { connectionErrorToast } from '../../utils/connectionErrorToast';\n\nexport const SignUpView = () => {\n  const history = useHistory()\n\n  const toast = useToast()\n\n  const MB = 4\n\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n  \n\n  const onSubmit = (values: SignUpData) => {\n    const ok: FunctionOk = (statusCode, data) => {\n      history.push(routes.patientHome.path)\n    }\n    const error: FunctionError = (statusCode, error) => {\n      toast({\n        title: 'Ups!',\n        description: Object.entries(error)[0][1],\n        status: 'error',\n        duration: 5000,\n        isClosable: true,\n        position: 'top',\n        variant: 'left-accent'\n      })\n    }\n    http.signup(values, ok, error, () => toast(connectionErrorToast()));\n  }\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n    >\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  onPaste={e => e.preventDefault()}\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import { routes } from \"../../routes/routes\";\n\nexport interface NavItem {\n  label: string;\n  subLabel?: string;\n  children?: Array<NavItem>;\n  path?: string;\n}\n\nexport const navbarItems: Array<NavItem> = [\n  {\n    label: 'Inicio',\n    path: routes.default.path,\n  },\n  {\n    label: 'Contacto',\n    path: routes.contact.path,\n  },\n]\n\n// ---------- STRUCTURE-----------\n// {\n//   label: 'Compartir',\n//   path: '/share',\n// },\n// {\n//   label: 'Doctores',\n//   children: [\n//     {\n//       label: 'Job Board',\n//       subLabel: 'Find your dream design job',\n//       path: '#',\n//     },\n//     {\n//       label: 'Freelance Projects',\n//       subLabel: 'An exclusive list for contract work',\n//       path: '#',\n//     },\n//   ],\n// },\n","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport { useDisclosure } from '@chakra-ui/hooks';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Flex, Link as ChakraLink, Stack, Text } from '@chakra-ui/layout';\nimport { Collapse } from '@chakra-ui/transition';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from '../../theme/ColorModeSwitcher';\nimport { navbarItems, NavItem } from './navbarItems';\n\ntype mobileNavbarProps = {\n  closeNavbar: any\n}\n\nexport const MobileNavbar = ({closeNavbar} : mobileNavbarProps) => {\n    return (\n        <Stack\n          bg={useColorModeValue('primary.50', 'primary.900')}\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <div key={navItem.label} onClick={closeNavbar} >\n              <MobileNavItem  {...navItem} />\n            </div>\n          ))}\n          <span onClick={closeNavbar}><ColorModeSwitcher label='Cambiar tema'/></span>\n        </Stack>\n      );\n}\n\nconst MobileNavItem = ({ label, children, path }: NavItem) => {\n    const { isOpen, onToggle } = useDisclosure();\n  \n    return (\n      <Stack spacing={4} onClick={children && onToggle}>\n        <Link to={path ?? '/'}>\n          <Flex\n            py={2}\n            px={4}\n            justify={'space-between'}\n            align={'center'}\n            _hover={{background: useColorModeValue('primary.100', 'primary.800')}}\n          >\n            <Text\n              fontWeight={600}\n            >\n              {label}\n            </Text>\n            {children && (\n              <Icon\n                as={ChevronDownIcon}\n                transition={'all .25s ease-in-out'}\n                transform={isOpen ? 'rotate(180deg)' : ''}\n                w={6}\n                h={6}\n              />\n            )}\n          </Flex>\n        </Link>\n        <Collapse in={isOpen} animateOpacity style={{ marginTop: '0!important' }}>\n          <Stack\n            mt={2}\n            pl={4}\n            borderLeft={1}\n            borderStyle={'solid'}\n            align={'start'}>\n            {children &&\n              children.map((child) => (\n                <Link key={child.label} to={child.path ?? '/'}>\n                  <ChakraLink as='span' py={2}>\n                    {child.label}\n                  </ChakraLink>\n                </Link>\n              ))}\n          </Stack>\n        </Collapse>\n      </Stack>\n    );\n  };\n  ","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\nimport { Box, Flex, Stack, Link as ChackraLink, Text } from '@chakra-ui/layout';\nimport { Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/popover';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { navbarItems, NavItem } from './navbarItems';\n\nexport const DesktopNavbar = ():JSX.Element => {\n  return <>\n    <Stack direction={'row'} spacing={4}>\n      {navbarItems.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={'hover'} placement={'bottom-start'}>\n            <PopoverTrigger>\n              <ChackraLink as='span' p={2} fontSize={'sm'} fontWeight={600}>\n                <Link to={navItem.path ?? '/'}>\n                  {navItem.label}\n                </Link>\n              </ChackraLink>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={'xl'}\n                // bg={useColorModeValue('white', 'gray.800')}\n                p={4}\n                rounded={'xl'}\n                minW={'sm'}>\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  </>\n}\n\n\nconst DesktopSubNav = ({ label, path, subLabel }: NavItem) => {\n  return (\n    <Link to={path ?? '/'}>\n    <ChackraLink\n      as='span'\n      role={'group'}\n      display={'block'}\n      p={2}\n      rounded={'md'}\n      color={useColorModeValue('blue.800', 'white')}\n    >\n      <Stack direction={'row'} align={'center'}>\n        <Box>\n          <Text\n            transition={'all .3s ease'}\n            _groupHover={{ color: useColorModeValue('blue.400', 'blue.300')}}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={'sm'}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={'all .3s ease'}\n          transform={'translateX(-10px)'}\n          opacity={0}\n          _groupHover={{ opacity: '100%', transform: 'translateX(0)' }}\n          justify={'flex-end'}\n          align={'center'}\n          flex={1}>\n          <Icon color={'blue.400'} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </ChackraLink>\n    </Link>\n  );\n};\n\n","import * as React from \"react\"\nimport {\n    Box,\n    Flex,\n    Text,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useColorModeValue,\n    useBreakpointValue,\n    useDisclosure,\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\nimport { MobileNavbar } from \"./MobileNavbar\";\nimport { DesktopNavbar } from \"./DesktopNavbar\";\nimport { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\nimport { Link } from \"react-router-dom\";\nimport { routes } from \"../../routes/routes\";\n\nexport const Navbar = ({userType}:any) => {  \n\n  const { isOpen, onToggle } = useDisclosure();\n  \n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue('primary.500','primary.800')}\n        color='white'\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n          <Link to={routes.default.path}>\n            <Text\n              textAlign={useBreakpointValue({ base: 'center', md: 'left' })}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n              color='white'\n            >\n              {/* TODO: replace for logo */}\n              Doctory\n            </Text>\n          </Link>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10}>\n            <DesktopNavbar />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n          <Link to={routes.login.path} style={{marginLeft: '0'}}>\n            <Button\n              size={'md'}\n              fontSize={'sm'}\n              variant={'ghost'}\n              as='button'\n            >\n              {/* TODO: when logged in, display none */}\n              Iniciar sesión\n            </Button>\n          </Link>\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNavbar closeNavbar={onToggle} />\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { routes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\n\nexport const AppRouter = () => {\n  // const [isLoggedIn, setisLoggedIn] = useState(false);\n  // const [useType, setUserType] = useState('PAC');\n\n  return (\n    <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n      <Router>\n        <Box w='100%'>\n          <Navbar />\n        </Box>\n        <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n          <Switch>\n            {\n              Object.keys(routes).map(k => (\n                <Route key={k} exact={k !== '404'} path={routes[k].path} component={routes[k].component}/>\n              ))\n            }\n            <Redirect to={routes.notFound.path} />\n          </Switch>\n          <Footer />\n        </Box>\n      </Router>\n  </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\n\nexport const DoctoryApp = () => (\n  <ChakraProvider theme={customTheme}>\n    <AppRouter />\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}