{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.ts","http/client.ts","provider/AuthProvider.tsx","hooks/usePasswordValidation.jsx","views/AuthViews/validPasswordChecklist.tsx","utils/typesDefinitions.ts","assets/DoctorsInComputerImage.svg","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","components/EmptyState.tsx","views/Conditions/ConditionsTimeLine.tsx","views/Conditions/ConditionsTable.tsx","views/Medic/PatientsTable.tsx","utils/utils.ts","views/Conditions/NewConditionForm.tsx","components/ActionButton.tsx","components/HomeDrawer.tsx","views/Patient/ShareHistoryForm.tsx","components/TableSkeleton.tsx","components/TimeLine/TimeLineSkeleton.tsx","assets/SecureImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","assets/NotFoundImage.svg","views/NotFoundPage/NotfoundPage.tsx","assets/PowerPeople_Emma.png","components/PresentationCard.tsx","components/PresentationSkeletonCard.tsx","views/Profile/ChangePasswordForm.tsx","routes/routes.ts","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","views/Profile/ProfileView.tsx","views/Landing/Home.tsx","views/Patient/PatientConditions.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","views/AuthViews/LoadingView.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","mx","onClick","icon","aria-label","getToken","localStorage","getItem","setToken","token","setItem","clearToken","removeItem","http","url","document","location","origin","fetch","this","headers","res","json","data","status","types","fields","method","body","JSON","stringify","values","Object","keys","errors","map","key","join","Error","id","params","defaultContextValues","authContext","type","isLoggedIn","isLoading","login","logout","UserContext","createContext","AuthProvider","children","useState","setAuthContext","useEffect","getUserType","then","undefined","Provider","value","_","usePasswordValidation","password","requiredLength","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","isValid","validPassword","setValidPassword","validation","test","toLowerCase","toUpperCase","length","ValidPasswordChecklist","iconStates","textStates","valid","invalid","fontSize","spacing","alignItems","as","CheckIcon","userTypes","sexTypes","TimeLine","useMediaQuery","theme","breakpoints","md","isMobile","w","h","maxW","d","flexDirection","flexGrow","pb","className","position","my","mb","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","date_of_diagnosis","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","textAlign","right","p","boxShadow","rounded","bg","top","transform","isTruncated","noOfLines","whiteSpace","fontWeight","borderRadius","zIndex","EmptyState","ConditionsTimeLine","conditions","condition","name","description","ConditionsTable","lg","ml","background_subtype_name","PatientsTable","patients","linkColor","patient","Link","to","routes","path","replace","String","first_name","last_name","dob","blood_type","isValidDate","Date","parse","now","NewConditionForm","formId","onSubmit","backgroundSubtypes","useForm","register","handleSubmit","isRequired","isInvalid","Boolean","htmlFor","autoComplete","placeholder","ref","required","message","background_subtype","x","validate","ActionButton","AddIcon","cursor","_hover","HomeDrawer","drawerPlacement","isOpen","onClose","headerText","Form","buttonProps","placement","borderBottomWidth","form","leftIcon","colorScheme","ShareHistoryForm","email","TableSkeleton","items","index","push","base","TimeLineSkeleton","bulletList","title","listItems","NotfoundPage","useContext","maxH","src","NotFoundImage","home","default","PresetationCard","userData","avatar","textOverflow","overflow","allergies","PresentationSkeletonCard","ChangePasswordForm","initialPassword","setInitialPassword","setPassword","onChange","e","target","password2","onPaste","preventDefault","publicRoutes","component","landingImage","useBreakpointValue","DoctorWithPhoneImage","DoctorsInComputerImage","align","justify","py","alt","sm","xl","signup","isFullWidth","SecureImage","direction","list","i","item","indx","PresonInComputerImage","history","useHistory","toast","useToast","toastPosition","mutate","useMutation","onSuccess","onError","duration","isClosable","px","minW","pattern","MB","contact","notFound","protectedRoutes","profile","setIsLoading","allergiesObject","setAllergiesObject","lastKnownAllergiesId","setLastKnownAllergiesId","specialties","setSpecialties","sex","setData","useDisclosure","onOpen","setValue","ok","useCallback","localLastKownID","allergy","parseArrayToAllergiesObject","includes","useQuery","getProfileInfo","onSettled","updateProfile","mutatePassword","updatePassword","BulletPoint","boxSize","borderColor","filter","y","console","log","defaultValue","disabled","license","specialty","setArrValue","newValues","handleValueArrChange","s","Add","allergyId","findIndex","handleAllergieChange","obj","newValue","patientId","useParams","lastTabIndex","setPatients","setBackgroundSubtype","setConditions","Number","tabIndex","setTabIndex","drawerContent","setDrawerContent","isMedic","mutateNewCondition","newCondition","conds","sort","onSubmitNewCondition","mutateShareHistory","shareHistory","onSubmitShare","isPatintsFetched","getPatients","enabled","isFetchedAfterMount","isConditionsFetched","pt","isFitted","overflowX","mr","bottom","MdShare","setUserData","isProfileFetched","Navbar","onToggle","navbarItems","setNavbarItems","homePath","setHomePath","mobileContainerHover","loggedInItems","label","minH","borderBottom","borderStyle","flex","Close","Hamburger","fontFamily","navItem","in","animateOpacity","Footer","borderTop","marginStart","getFullYear","LoadingView","isIndeterminate","AppRouter","k","exact","render","Component","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","queryClient","QueryClient","DoctoryApp","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.13c38777.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n      <IconButton \n        display={display}\n        size=\"md\"\n        variant=\"ghost\"\n        color=\"current\"\n        mx={2}\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}\nexport const clearToken = () => {\n  localStorage.removeItem('doctory_token');\n}","import { \n  userInformation,\n  LoginData,\n  SignUpData,\n  ConditionData,\n  ChangePasswordData,\n  ShareData\n} from './types';\nimport { getToken, setToken } from '../utils/token';\n\nclass Http {\n  private url = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : document.location.origin;\n\n  public async getUserType() {\n    const res = await fetch(`${this.url}/api/v1/type/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data.types;\n    return null;\n  }\n\n  public async login(fields:LoginData) {\n    const res = await fetch(`${this.url}/api/v1/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async signup(fields:SignUpData) {\n    const res = await fetch(`${this.url}/api/v1/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n  \n  public async newCondition(fields:ConditionData) {\n    const res = await fetch(`${this.url}/api/v1/conditions/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${getToken()}`\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async conditions(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/conditions/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async backgroundSubtypes() {\n    const res = await fetch(`${this.url}/api/v1/background-subtypes/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    if(res.status === 200) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getProfileInfo(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/profile/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updateProfile(fields:userInformation) {\n    const res = await fetch(`${this.url}/api/v1/profile/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updatePassword(fields:ChangePasswordData) {\n    const res = await fetch(`${this.url}/api/v1/change-password/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getPatients() {\n    const res = await fetch(`${this.url}/api/v1/patients/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    \n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async shareHistory(fields:ShareData) {\n    const res = await fetch(`${this.url}/api/v1/share-history/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${getToken()}`\n      },\n      body: JSON.stringify(fields)\n    });\n    \n    const data = await res.json();\n    if(res.status === 201) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key]).join(';')\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 404) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n}\n\nexport const http = new Http();\n","import React, { useState, FC, useEffect } from 'react';\nimport { createContext } from \"react\";\nimport { http } from '../http/client';\nimport { clearToken, getToken } from '../utils/token';\n\n\ntype authContextStateType = {\n  type?: string[],\n  isLoggedIn: boolean,\n  isLoading: boolean,\n}\n\ntype authContextType = {\n  authContext: authContextStateType,\n  login: (type: string[]) => void,\n  logout: () => void,\n}\n\nconst defaultContextValues: authContextType = {\n  authContext: { type: [''], isLoggedIn: false, isLoading: true },\n  login: () => {},\n  logout: () => {},\n}\n// Context\nexport const UserContext = createContext<authContextType>(defaultContextValues);\n\n// Provider\nexport const AuthProvider : FC = ({ children }) => {\n  \n  const [authContext, setAuthContext] = useState<authContextStateType>(defaultContextValues.authContext);\n\n  const login = (type : string[]) => {\n    setAuthContext(_ => ({\n      type,\n      isLoggedIn: true,\n      isLoading: false,\n    }));\n  };\n\n  const logout = () => {\n    clearToken();\n    setAuthContext(_ => ({\n      type: [''],\n      isLoggedIn: false,\n      isLoading: false,\n    }));\n  };\n\n  useEffect(() => {\n    if(getToken()) { // If there's already a Token in storage we validate it\n      http.getUserType().then(type => {\n        if(!type) {\n          clearToken();\n          setAuthContext({type:undefined, isLoggedIn: false, isLoading: false})\n        }else{\n          setAuthContext({type:type, isLoggedIn: true, isLoading: false})\n        }\n      })\n    }else{\n      setAuthContext({type:undefined, isLoggedIn: false,  isLoading: false})\n    }\n\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ authContext, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon, useColorModeValue } from '@chakra-ui/react'\n\ntype passwordChecklistPropsTypes = {\n  hasNumber: boolean,\n  hasUpperCase: boolean,\n  hasLowerCase: boolean,\n  hasSpecialChar: boolean,\n  hasValidLength: boolean\n}\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}: passwordChecklistPropsTypes) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: useColorModeValue('gray.800','gray.100'),\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export const userTypes = {\n  PATIENT: 'PAT',\n  MEDIC: 'MED',\n}\n\nexport const sexTypes = {\n  MALE: 'M',\n  FEMALE: 'F',\n  OTHER: 'O',\n  NOT_SPECIFIED: 'U',\n}\n\nexport type timeLineItemProps = {\n  conditionTitle: string,\n  date_of_diagnosis: string,\n  conditionType?: string,\n  conditionSubtype?: string,\n  conditionDescription?: string,\n}\n","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-0.1em': 'calc(50% - 0.1em)'}`, //(50% - 1/2(width))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        }\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='1' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { VStack, Text, useColorModeValue } from '@chakra-ui/react'\n\ntype emptyStateProps ={\n  text: string\n}\n\nexport const EmptyState = ({text}:emptyStateProps) => {\n  \n  return (\n    <VStack flexGrow={1} justifyContent='center'>\n      <Text textAlign='center' fontSize='4xl' my='4em' color={useColorModeValue('gray.600', 'gray.200')}>\n        {text}\n      </Text>\n    </VStack>\n  )\n}\n","import React from 'react';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { ConditionData } from '../../http/types';\nimport { EmptyState } from '../../components/EmptyState';\n\ntype ConditionsTimeLineProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTimeLine = ({ conditions }:ConditionsTimeLineProps) => {\n  \n  if(conditions.length === 0){\n    return <EmptyState text='Sin condiciones' />\n  }\n\n  return(\n    <TimeLine>\n      {conditions.map((condition:ConditionData) => (\n        <TimeLineItem \n          key={condition.id}\n          conditionTitle={condition.name}\n          date_of_diagnosis={condition.date_of_diagnosis}\n          conditionDescription={condition.description}\n        />\n      ))}\n    </TimeLine>\n  )\n}","import React from 'react';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from \"@chakra-ui/react\"\nimport { ConditionData } from '../../http/types';\nimport { EmptyState } from '../../components/EmptyState';\n\ntype ConditionsTableProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTable = ({ conditions }:ConditionsTableProps) => {\n\n  if(conditions.length === 0){\n    return <EmptyState text='Sin condiciones' />\n  }\n\n  return (\n    <Table variant=\"striped\" width={{lg:'150%'}} ml={{lg:'-25%'}}>\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Descripción</Th>\n          <Th>Fecha de diagnóstico</Th>\n          <Th>Tipo de condición</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {\n          conditions.map((condition:ConditionData) => (\n            <Tr key={condition.id}>\n              <Td>{condition.name}</Td>\n              <Td>{condition.description}</Td>\n              <Td>{condition.date_of_diagnosis}</Td>\n              <Td>{condition.background_subtype_name}</Td>\n            </Tr>\n          ))\n        }\n      </Tbody>\n    </Table>\n  )\n}","import React from 'react';\nimport { Table, Tbody, Td, Th, Thead, Tr, Link as ChakraLink, useColorModeValue } from '@chakra-ui/react';\nimport { userInformation } from '../../http/types';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { EmptyState } from '../../components/EmptyState';\n\ntype PatientsTableProps = {\n  patients: userInformation[];\n};\n\nexport const PatientsTable = ({ patients }: PatientsTableProps) => {\n  const linkColor = useColorModeValue('blue.600', 'blue.400');\n  \n  if(patients.length === 0){\n    return <EmptyState text='Sin pacientes' />\n  }\n\n  return (\n    <Table variant=\"striped\">\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Edad</Th>\n          <Th>Tipo de sangre</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {patients.map((patient) => (\n          <Tr key={patient.id}>\n            <Td>\n              <ChakraLink \n                as={Link} \n                to={routes.patient.path.replace(':id', String(patient.id))}\n                color={linkColor}\n              >\n              {patient.first_name + ' ' + patient.last_name}\n              </ChakraLink>\n            </Td>\n            <Td>{patient.dob || '-'}</Td>\n            <Td>{patient.patient?.blood_type || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n","export const isValidDate = (value:string) => {\n  const date_of_diagnosis = Date.parse(value);\n  return date_of_diagnosis < Date.now();\n}","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n  Select\n} from '@chakra-ui/react';\nimport { BackgroundSubtypeData, ConditionData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\nimport { isValidDate } from '../../utils/utils';\n\ntype NewConditionProps = {\n  formId: string;\n  onSubmit: (values:ConditionData) => void;\n  backgroundSubtypes: BackgroundSubtypeData[];\n}\n\nexport const NewConditionForm = ({ formId, onSubmit, backgroundSubtypes }: NewConditionProps) => {\n  const { register, handleSubmit, errors } = useForm<ConditionData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Nombre</FormLabel>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='Diabetes tipo 1'\n            ref={register({required: 'El nombre es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <FormControl mb='4' isInvalid={Boolean(errors.description)}>\n          <FormLabel htmlFor=\"description\">Description</FormLabel>\n          <Textarea\n            name=\"description\"\n            placeholder='Descripción de la condición'\n            ref={register()}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.background_subtype)}>\n          <FormLabel htmlFor=\"background_subtype\">Tipo de condición</FormLabel>\n          <Select\n            name=\"background_subtype\"\n            ref={register()}>\n            {backgroundSubtypes.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.date_of_diagnosis)}>\n          <FormLabel htmlFor=\"date_of_diagnosis\">Fecha de diagnóstico</FormLabel>\n          <Input\n            name=\"date_of_diagnosis\"\n            type=\"date\"\n            autoComplete='on'\n            ref={register({\n              required: 'La fecha es obligatoria',\n              validate: value => isValidDate(value) || 'La fecha no es válida'\n            })}/>\n          <FormErrorMessage>\n            {errors.date_of_diagnosis && errors.date_of_diagnosis.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","import React from 'react'\nimport { ComponentWithAs, IconProps, Icon } from '@chakra-ui/react'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { IconType } from 'react-icons/lib'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box } from '@chakra-ui/layout'\n\ntype actionButonProps = {\n  icon?: IconType | ComponentWithAs<\"svg\", IconProps>\n}\n\nexport const ActionButton = ({icon = AddIcon}:actionButonProps) => {\n  return (\n    <Box\n      bg={useColorModeValue('primary.500', 'primary.200')}\n      rounded='50%'\n      cursor='pointer'\n      _hover={{\n        bg:useColorModeValue('primary.300', 'primary.300')\n      }}\n    >\n      <Icon \n        w='2em'\n        h='2em'\n        p='.5em'\n        color='white'\n        as={icon}\n      />\n    </Box>\n  )\n}\n","import React, { JSXElementConstructor, ReactElement } from 'react';\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerProps,\n} from '@chakra-ui/react';\nimport { IconType } from 'react-icons';\nimport { ReactJSXElement } from '@emotion/react/types/jsx-namespace';\n\nexport type buttonSubmit = {\n  text: string,\n  formId: string,\n  icon?: ReactElement<IconType, string | JSXElementConstructor<IconType>>,\n}\n\ntype homeDraweProps = {\n  drawerPlacement: DrawerProps['placement'],\n  isOpen: boolean,\n  onClose: () => void,\n  headerText: string,\n  Form: ReactJSXElement,\n  buttonProps: buttonSubmit,\n}\n\n\nexport const HomeDrawer = ({drawerPlacement, isOpen, onClose, headerText, Form, buttonProps}:homeDraweProps) => {\n  return (\n    <Drawer\n      placement={drawerPlacement}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader borderBottomWidth=\"1px\">\n            {headerText}\n          </DrawerHeader>\n\n          <DrawerBody>\n            {Form}\n          </DrawerBody>\n\n          <DrawerFooter>\n              <Button\n                type=\"submit\"\n                form={buttonProps.formId}\n                leftIcon={buttonProps.icon}\n                colorScheme=\"primary\"\n              >\n                {buttonProps.text}\n              </Button>\n          </DrawerFooter>\n\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n} from '@chakra-ui/react';\nimport { ShareData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\n\ntype ShareHistoryProps = {\n  formId: string;\n  onSubmit: (values:ShareData) => void;\n}\n\nexport const ShareHistoryForm = ({ formId, onSubmit}: ShareHistoryProps) => {\n  const { register, handleSubmit, errors } = useForm<ShareData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.email)}>\n          <FormLabel htmlFor=\"email\">Correo del médico</FormLabel>\n          <Input\n            name=\"email\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='medico@gmail.com'\n            ref={register({required: 'El correo electrónico del médico es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.email && errors.email.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","import { Box, Skeleton, VStack } from '@chakra-ui/react'\nimport React from 'react'\n\nexport const TableSkeleton = ({isLoading}:{isLoading:boolean}) => {\n  const numElements = 5;\n  const items = [];\n  \n  for (let index = 0; index < numElements; index++) {\n    items.push(\n      <Box key={index} width='100%'>\n        <Skeleton height='3rem' />\n      </Box>\n    )    \n  }\n  \n\n  if (isLoading) {\n    return (\n      <VStack width={{base:'100%', lg:'150%'}} ml={{lg:'-25%'}}>\n        {items}\n      </VStack>\n    )\n  } else {\n    return <></>\n  }\n\n}\n","import { Container, HStack, VStack } from '@chakra-ui/layout'\nimport { Box, theme, useMediaQuery } from '@chakra-ui/react';\nimport { Skeleton } from '@chakra-ui/skeleton'\nimport React from 'react'\n\nexport const TimeLineSkeleton = ({isLoading}:{isLoading:boolean}) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  const numElements = 5;\n  const items = [];\n  \n  for (let index = 0; index < numElements; index++) {\n    items.push(\n      <HStack key={index} w='100%' justifyContent={(index % 2 === 0) ? 'flex-end' : 'flex-start'}>\n          <Box width={`${isMobile? '100%':'50%'}`} >\n            <Skeleton  height='5rem' />\n          </Box>\n      </HStack>\n    )    \n  }\n\n  if(isLoading) {\n    return (\n      <Container>\n        <VStack w='100%'>\n          {items}\n        </VStack>\n      </Container>\n    )\n  }else {\n    return <></>\n  }\n  \n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signup.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signup.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","export default __webpack_public_path__ + \"static/media/NotFoundImage.2f089071.svg\";","import React, { useContext } from 'react'\nimport { Link } from \"react-router-dom\";\nimport { VStack, Image, Button, } from '@chakra-ui/react'\nimport NotFoundImage from '../../assets/NotFoundImage.svg';\nimport { UserContext } from '../../provider/AuthProvider';\nimport { routes } from '../../routes/routes';\n\n\nexport const NotfoundPage = () => {\n  const { authContext } = useContext(UserContext)\n  return (\n    <VStack flexGrow={1} justifyContent='center'>\n      <Image \n        maxH={{base:'15rem', md:'20rem'}}\n        src={NotFoundImage}\n        mb='4em'\n      />\n      <Link \n        to={ authContext.isLoggedIn?  routes.home.path : routes.default.path} \n      >\n        <Button size='lg' colorScheme='primary' >\n          Ir a inicio\n        </Button>\n      </Link>\n    </VStack>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport { userInformation } from '../http/types'\n\ntype presentationCardPropsTypes = {\n  userData: userInformation,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box my='1rem'>\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'30%', md:'20%'}}>\n          <Image borderRadius=\"full\" maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box \n          maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'md'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'2xl'}}\n          >\n            {userData.first_name + ' ' + userData.last_name}\n          </Text>\n          {userData.dob &&\n            <Text>{userData.dob}</Text>\n          }\n          {userData.blood_type &&\n            <Text>Tipo de sangre: {userData.blood_type}</Text>\n          }\n          {userData.location &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              {userData.location}\n            </Text>\n          }\n          {userData.allergies &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              Alergias: {userData.allergies.join(', ')}\n            </Text>\n          }\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","import { Container, HStack, Stack } from '@chakra-ui/layout'\nimport { Skeleton, SkeletonCircle } from '@chakra-ui/skeleton'\nimport React from 'react'\n\nexport const PresentationSkeletonCard = ({isLoading}:{isLoading:boolean}) => {\n\n  if (isLoading) {\n    return (\n      <Container>\n        <HStack w='100%'  h='100%' >\n          <Stack w='20%'>\n            <SkeletonCircle size='4rem'/>\n          </Stack>\n          <Stack w='100%' >\n            <Skeleton height=\"1rem\" />\n            <Skeleton height=\"1rem\" />\n            <Skeleton height=\"1rem\" />\n          </Stack>\n        </HStack>\n      </Container>\n    )\n  } else {\n    return <></>\n  }\n\n}\n","import React, {useState, ChangeEvent} from 'react';\nimport { \n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input\n } from '@chakra-ui/react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from '../AuthViews/validPasswordChecklist';\nimport { ChangePasswordData } from '../../http/types';\n\n\ntype ChangePasswordProps = {\n  formId: string;\n  onSubmit: SubmitHandler<ChangePasswordData>;\n}\n\nexport const ChangePasswordForm = ({formId, onSubmit}:ChangePasswordProps) => {\n  const { register, handleSubmit, errors } = useForm<ChangePasswordData>();\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n  const [password, setPassword] = useState<string>('');\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n  \n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n      <FormControl\n        mb='4'\n        isInvalid={Boolean(initialPassword ? !isValid : null)}>\n        <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n        <Input\n          name='password1'\n          type='password'\n          autoComplete='off'\n          placeholder='Contraseña segura'\n          value={password}\n          onChange={handlePasswordChange}\n          ref={register({ required: true })}\n          mb={4}\n        />\n        {!isValid && <ValidPasswordChecklist\n          hasNumber={hasNumber}\n          hasLowerCase={hasLowerCase}\n          hasUpperCase={hasUpperCase}\n          hasSpecialChar={hasSpecialChar}\n          hasValidLength={hasValidLength} />}\n      </FormControl>\n\n      <FormControl\n        mb={4}\n        isInvalid={Boolean(errors.password2)}>\n        <FormLabel htmlFor='password2'>\n          Confirmar contraseña\n        </FormLabel>\n        <Input\n          name='password2'\n          type='password'\n          autoComplete='off'\n          placeholder='Repetir contraseña'\n          onPaste={e => e.preventDefault()}\n          ref={register({\n            required: 'Es obligatorio confirmar la contraseña',\n            validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n          })}\n        />\n        <FormErrorMessage>\n          {errors.password2 && errors.password2.message}\n        </FormErrorMessage>\n      </FormControl>\n      </form>\n\n    </Stack>\n  )\n}","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { Home } from \"../views/Landing/Home\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientConditions } from \"../views/Patient/PatientConditions\";\nimport { ProfileView } from \"../views/Profile/ProfileView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nexport const publicRoutes: { [name: string]: route } = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signup: { path: '/signup', component: SignUpView },\n  contact: { path: '/contact', component: NotfoundPage },\n  notFound: { path: '/404', component: NotfoundPage },\n}\n\nexport const protectedRoutes: { [name: string]: route } = {\n  profile: { path: '/profile', component: ProfileView },\n  home: { path: '/home', component: Home },\n  patient: { path: '/patient/:id', component: PatientConditions },\n}\n\nexport const routes: { [name: string]: route } = {\n  ...publicRoutes,\n  ...protectedRoutes,\n};\n","import React, { useContext } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  useToast,\n  Divider,\n  Text,\n  useBreakpointValue,\n  ToastPosition\n} from '@chakra-ui/react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { LoginData } from '../../http/types';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\n\n\nexport const LoginView = () => {\n  const { login } = useContext(UserContext);\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  const history = useHistory()\n  \n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  \n  const onSuccess = (type: string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('login', (values:LoginData) => http.login(values), {onSuccess, onError})\n  \n  const onSubmit = (values: LoginData) => {\n    mutate(values);\n  }\n\n  return (\n    <Flex\n      flexGrow={1}\n      h={'100%'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.100', 'gray.800')}\n    >\n      <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n        <Box\n          p={8}\n          bg={useColorModeValue('white', 'gray.700')}\n          minW='xs'\n          rounded={'lg'}\n          boxShadow={'lg'}\n        >\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.email)}>\n              <FormLabel htmlFor=\"email\">Correo</FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                autoComplete='on'\n                placeholder='ejemplo@gmail.com'\n                ref={register({\n                  required: 'El correo electrónico es obligatorio',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: 'Ingresa un correo electrónico válido',\n                  },\n                })}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.password)}>\n              <FormLabel htmlFor='password'>Contraseña</FormLabel>\n              <Input\n                name='password'\n                type=\"password\"\n                autoComplete='off'\n                ref={register({ required: true })}\n              />\n            </FormControl>\n            <Stack spacing={8}>\n              <Button type=\"submit\">Entrar</Button>\n            </Stack>\n          </form>\n          <Divider my={4}/>\n          <Box textAlign={'center'} >\n            <ChakraLink \n              as={Link}\n              to={routes.signup.path}>\n                <Text color={useColorModeValue('primary.500', 'primary.300')}>Crear una nueva cuenta</Text>\n            </ChakraLink>\n          </Box>\n        </Box>\n      </Stack>\n     \n    </Flex>\n  );\n}\n","import React, { ChangeEvent, useState, useContext } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n  useToast,\n  Link as ChakraLink,\n  useBreakpointValue,\n  ToastPosition,\n  Select\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData } from '../../http/types';\nimport { http } from '../../http/client';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\nimport { userTypes } from '../../utils/typesDefinitions';\n\nexport const SignUpView = () => {\n  const history = useHistory()\n  const { login } = useContext(UserContext);\n  const toast = useToast()\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const onSuccess = (type:string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('signup', (values:SignUpData) => http.signup(values), {onSuccess, onError})\n  \n  const onSubmit = (values: SignUpData) => {\n    mutate(values);\n  }\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n  \n  const MB = 4\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n    >\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  onPaste={e => e.preventDefault()}\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={4}>\n                <FormLabel htmlFor='user_type'>Tipo de Cuenta</FormLabel>\n                  <Select\n                    as='select'\n                    name='user_type'\n                    ref={register()}\n                  >\n                    <option value={userTypes.PATIENT}>Paciente</option>\n                    <option value={userTypes.MEDIC}>Médico</option>\n                  </Select>\n              </FormControl>\n              \n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n          <Box display='flex' justifyContent='center'>\n            <ChakraLink as={Link} to={routes.login.path}>\n              ¿Ya con cuenta? Inicie Sesión\n            </ChakraLink>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import React, { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react'\nimport { useForm } from 'react-hook-form';\nimport {\n  Avatar,\n  AvatarBadge,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Select,\n  useColorModeValue,\n  useToast,\n  Box,\n  Container,\n  Flex,\n  Heading,\n  HStack,\n  Stack,\n  VStack,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  useBreakpointValue,\n  ToastPosition,\n} from \"@chakra-ui/react\"\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { FaCamera } from 'react-icons/fa';\nimport { sexTypes, userTypes } from '../../utils/typesDefinitions';\nimport { ChangePasswordData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { isValidDate } from '../../utils/utils';\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { setToken } from '../../utils/token';\nimport { useMutation, useQuery } from 'react-query';\n\nexport const ProfileView = () => {\n  \n  const [isLoading, setIsLoading] = useState(true)\n  const [allergiesObject, setAllergiesObject] = useState<{id: number, value: string}[]>([{id:0,value:''},]);\n  const [lastKnownAllergiesId, setLastKnownAllergiesId] = useState(1)\n  const [specialties, setSpecialties] = useState(['']);\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const toast = useToast();\n  const [data, setData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { register, handleSubmit, errors, setValue } = useForm<userInformation>();\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const ok = useCallback((_, data) => {\n    \n    const parseArrayToAllergiesObject = (allergies:string[] = ['']) => {\n      if (!allergies || allergies.length === 0) allergies = [''];\n      \n      let localLastKownID = lastKnownAllergiesId;\n      const res = allergies.map(allergy => ({\n        id: localLastKownID++,\n        value: allergy\n      }));    \n      setLastKnownAllergiesId(localLastKownID);\n      return res;\n    }\n    const userData = data as userInformation;\n    \n    setValue('sex', userData.sex)\n    setData(userData);\n    register('allergies');\n    setAllergiesObject(parseArrayToAllergiesObject(userData.allergies));\n    \n    if (userData.type.includes(userTypes.MEDIC)) {\n      register('specialties');\n      setValue('specialties', userData.specialties || ['']);\n      setSpecialties(userData.specialties || ['']);\n    }\n    setIsLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[setValue, register])\n\n  useQuery('profile', () => http.getProfileInfo(), {\n    onSuccess: (data:userInformation) => ok(null, data),\n    onError,\n    onSettled: () => setIsLoading(false)\n  })\n\n  const { mutate } = useMutation('updateProfile', (values:userInformation) => http.updateProfile(values), {\n    onSuccess: () => {\n      toast({\n        description: '¡Tu información se ha guardado con éxito!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const { mutate: mutatePassword } = useMutation('changePassword', (values:ChangePasswordData) => http.updatePassword(values), {\n    onSuccess: ({ token }:{token:string}) => {\n      setToken(token)\n      onClose()\n      toast({\n        title: 'Contraseña actualizada',\n        description: 'Tu contraseña se ha cambiado exitosamente. Los otros equipos dónde utilices doctory tendrán que volver a iniciar sesión.',\n        status: 'success',\n        duration: 10000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const onSubmit = (values: userInformation) => {\n    setIsLoading(true);\n    \n    values.allergies = allergiesObject.map(x => x.value).filter(y => y !== '');\n    values.specialties = undefined; // TODO: Medic Specialties\n    console.log(values);\n    \n    mutate(values);\n  }\n\n  const addSpecialtyField = () => setSpecialties((s) => [...s, '']);\n  \n  const addAllergyField = () => {\n    setAllergiesObject(obj => {\n      const newValue = {id: lastKnownAllergiesId, value: ''};\n      setLastKnownAllergiesId(x => x+1);\n      return [...obj, newValue];\n    })\n  }\n\n  const handleValueArrChange = (e: ChangeEvent<HTMLInputElement>, index: number, name:string,  setArrValue: Dispatch<SetStateAction<string[]>>) => {\n    setArrValue(values => {\n      let newValues = [...values];\n      newValues[index] = e.target.value;\n      setValue(name, newValues);\n      return newValues;\n    })\n  }\n  \n  const handleAllergieChange = (e: ChangeEvent<HTMLInputElement>, allergy:{id:number, value:string} ) => {\n    let allergyId = allergiesObject.findIndex(x => x.id === allergy.id);\n    setAllergiesObject(allergies => {    \n      let newValues = [...allergies];\n      newValues[allergyId] = {...allergy, value:e.target.value};\n      return newValues\n    })\n  }\n\n  const onChangePassword = (values:ChangePasswordData) => {\n    mutatePassword(values);\n  }\n\n  const BulletPoint = () => (\n    <Box \n      bg= 'currentcolor'\n      borderRadius= '50%'\n      w='5px'\n      h='5px'\n      mx='.5em'\n    />\n  )\n\n  return (\n    <Container\n    w=\"100vw\"\n    h=\"100%\"\n    maxW=\"95%\"\n    d={'flex'}\n    flexGrow={1}\n    mx={{base:'1em', md:'2em'}}\n    >\n      <Drawer\n        placement={useBreakpointValue({base: 'bottom', lg: 'right'})}\n        isOpen={isOpen}\n        onClose={onClose}\n        >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader>\n              Actualizar contraseña\n            </DrawerHeader>\n\n            <DrawerBody>\n              <ChangePasswordForm formId='change-password-form' onSubmit={onChangePassword}/>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button\n                type='submit'\n                form='change-password-form'\n                colorScheme='primary'>Cambiar contraseña</Button>\n            </DrawerFooter>\n\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    <Flex\n      flexGrow={1}\n      align={'flex-start'}\n      justify={'center'}\n      py={12}\n      w={'100%'}\n    >\n    <VStack w={'100%'} mb={12} >\n      <Heading fontSize={'3xl'}>Editar Perfil</Heading>\n      <Stack w={'100%'} align={'center'}>\n        <Avatar src={avatar} size=\"2xl\" mb={4}>\n          <AvatarBadge\n            boxSize=\".8em\"\n            borderColor=\"transparent\"\n            bg=\"white\"\n            _hover={{color:'gray.500'}}>\n            <FaCamera />\n          </AvatarBadge>\n        </Avatar>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        minW={{base:'xs', md: 'md'}}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n      >\n       \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.first_name)}>\n            <FormLabel htmlFor='first_name'>Nombre(s)</FormLabel>\n            <Input\n              name='first_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Juan'\n              defaultValue={data.first_name}\n              ref={register({ required: 'El nombre es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.first_name && errors.first_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.last_name)}>\n            <FormLabel htmlFor='last_name'>Apellidos</FormLabel>\n            <Input\n              name='last_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Pérez'\n              defaultValue={data.last_name}\n              ref={register({ required: 'El apellido es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.last_name && errors.last_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.email)}>\n            <FormLabel htmlFor='email'>Correo</FormLabel>\n            <Input\n              name='email'\n              type='email'\n              disabled={true}\n              placeholder='ejemplo@gmail.com'\n              value={data.email}\n              ref={register}\n            />\n            \n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel>Contraseña</FormLabel>\n            <Button onClick={onOpen} variant='link' colorScheme='primary'>Cambiar contraseña</Button>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.dob)}>\n            <FormLabel htmlFor='dob'>Fecha de nacimiento</FormLabel>\n            <Input\n              name='dob'\n              type='date'\n              autoComplete='on'\n              defaultValue={data.dob}\n              ref={register({\n                required: 'La fecha es obligatoria',\n                validate: value => isValidDate(value) || 'La fecha no es válida',\n               })}\n            />\n            <FormErrorMessage>\n            {errors.dob && errors.dob.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel htmlFor='sex'>Sexo</FormLabel>\n              <Select\n                as='select'\n                name='sex'\n                onChange= {(e) => setValue('sex', e.target.value)}\n                ref={register}\n              >\n                <option value={sexTypes.NOT_SPECIFIED}>Sin especificar</option>\n                <option value={sexTypes.FEMALE}>Mujer</option>\n                <option value={sexTypes.MALE}>Hombre</option>\n                <option value={sexTypes.OTHER}>Otro</option>\n              </Select>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='location'>Lugar de Residencia</FormLabel>\n            <Input\n              name='location'\n              type='text'\n              autoComplete='on'\n              placeholder='Monterrey, Nuevo León'\n              defaultValue={data.location}\n              ref={register}\n            />\n          </FormControl>\n          \n          {data.type.includes(userTypes.MEDIC) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='license'>Cédula Profesional</FormLabel>\n              <Input\n                name='license'\n                type='text'\n                placeholder='12345678'\n                defaultValue={data.license || ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.MEDIC) && \n            <FormControl mb={4} >\n              <FormLabel htmlFor='specialty'>Especialidad(s)</FormLabel>\n              {specialties.map((specialty,index) => (\n                <HStack\n                  mb={2}\n                  key={'specialty-'+index} // TODO: \n                >\n                  {BulletPoint()}\n                  <Input\n                    value={specialty}\n                    onChange={e => handleValueArrChange(e, index, 'specialties', setSpecialties)}\n                    size='sm'\n                    type='text'\n                    placeholder='Cirujano'\n                  />\n                </HStack>\n              ))}\n\n              <HStack>\n                {BulletPoint()}\n                <div>\n                <Button\n                  size='sm'\n                  variant=\"outline\"\n                  onClick={addSpecialtyField}\n                  leftIcon={<AddIcon/>}\n                >Agregar</Button>\n                </div>\n              </HStack>\n            </FormControl>\n          }\n\n          <FormControl mb={4}>\n            <FormLabel htmlFor='blood_type'>Tipo de Sangre</FormLabel>\n            <Input\n              name='blood_type'\n              type='text'\n              autoComplete='on'\n              placeholder='O+'\n              defaultValue={data.blood_type || ''}\n              ref={register}\n            />\n          </FormControl>\n\n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='allergies'>Alergias</FormLabel>\n            {allergiesObject.map((allergy) => (\n              <HStack\n                mb={2}\n                key={allergy.id}\n              >\n                {BulletPoint()}\n                <Input\n                  value={allergy.value}\n                  onChange={e => handleAllergieChange(e, allergy)}\n                  size='sm'\n                  type='text'\n                  placeholder='Pólen'\n                />\n              </HStack>\n            ))}\n            <HStack>\n              {BulletPoint()}\n              <div>\n              <Button\n                size='sm'\n                variant=\"outline\"\n                disabled={allergiesObject[allergiesObject.length-1] && allergiesObject[allergiesObject.length-1].value === ''}\n                onClick={addAllergyField}\n                leftIcon={<AddIcon/>}\n              >Agregar</Button>\n              </div>\n            </HStack>\n          </FormControl>\n          \n          <Stack  w={'100%'} align='flex-end'>\n            <Button \n              isLoading={isLoading}\n              colorScheme='primary'\n              type=\"submit\"\n            >\n              Guardar\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </VStack>\n    </Flex>\n  </Container>\n  )\n}","import React, { useContext, useState } from 'react';\nimport {\n  Box,\n  Image,\n  Tabs,\n  TabList,\n  Tab,\n  TabPanel,\n  TabPanels,\n  VStack,\n  useToast,\n  useBreakpointValue,\n  ToastPosition,\n  useDisclosure,\n  DrawerProps,\n  Icon,\n} from '@chakra-ui/react';\nimport { UserContext } from '../../provider/AuthProvider';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport { BackgroundSubtypeData, ConditionData, userInformation, ShareData } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useMutation, useQuery } from 'react-query';\nimport { ConditionsTimeLine } from '../Conditions/ConditionsTimeLine';\nimport { ConditionsTable } from '../Conditions/ConditionsTable';\nimport { PatientsTable } from '../Medic/PatientsTable';\nimport { NewConditionForm } from '../Conditions/NewConditionForm';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { MdShare } from \"react-icons/md\"\nimport { userTypes } from '../../utils/typesDefinitions';\nimport { useParams } from 'react-router-dom';\nimport { ActionButton } from '../../components/ActionButton';\nimport { buttonSubmit, HomeDrawer } from '../../components/HomeDrawer';\nimport { ReactJSXElement } from '@emotion/react/types/jsx-namespace';\nimport { ShareHistoryForm } from '../Patient/ShareHistoryForm';\nimport { TableSkeleton } from '../../components/TableSkeleton';\nimport { TimeLineSkeleton } from '../../components/TimeLine/TimeLineSkeleton';\n\n\nexport const Home = () => {\n  const { authContext } = useContext(UserContext)\n  const {id: patientId} = useParams<{id:string}>();\n  const lastTabIndex = localStorage.getItem('tableTabIndex');\n\n  const { isOpen, onOpen, onClose } = useDisclosure() \n  const [patients, setPatients] = useState<userInformation[]>([])\n  const [backgroundSubtypes, setBackgroundSubtype] = useState<BackgroundSubtypeData[]>([])\n  const [conditions, setConditions] = useState<ConditionData[]>([])\n  const [tabIndex, setTabIndex] = useState(lastTabIndex? Number(lastTabIndex): 0);\n\n  const [drawerContent, setDrawerContent] = useState<{headerText: string, Form: ReactJSXElement, buttonProps: buttonSubmit}>({\n    headerText: '',\n    Form: <></>,\n    buttonProps: {} as buttonSubmit,\n  })\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const drawerPlacement = useBreakpointValue({base: 'bottom', lg: 'right'});\n  \n  const isMedic = authContext.type?.includes(userTypes.MEDIC);\n\n  const handleTabsChange = (index:number) => {\n    setTabIndex(index);\n    localStorage.setItem('tableTabIndex', String(index));\n  };\n\n  const onOpenCond = () => {\n    setDrawerContent({\n      headerText: 'Nueva condición',\n      Form: <NewConditionForm\n        onSubmit={onSubmitNewCondition}\n        formId='form-condition'\n        backgroundSubtypes={backgroundSubtypes}/>,\n      buttonProps: {\n        formId: 'form-condition',\n        icon: <AddIcon/>,\n        text: 'Añadir',\n      }\n    })\n    onOpen()\n  }\n\n  const onOpenShare = () => {\n    setDrawerContent({\n      headerText: 'Compartir historia clínica',\n      Form: <ShareHistoryForm\n        onSubmit={onSubmitShare}\n        formId='form-share'/>,\n      buttonProps: {\n        formId: 'form-share',\n        icon: <Icon as={MdShare}/>,\n        text: 'Compartir',\n      }\n    })\n    onOpen()\n  }\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const onSuccessNewCondition = (data:ConditionData) => {\n    const conds = [...conditions, data]\n    conds.sort((x, y) => x.date_of_diagnosis < y.date_of_diagnosis ? 1 : -1)\n    setConditions(conds)\n    onClose();\n    toast({\n      title: 'Condición creada',\n      description: 'Se ha añadido una nueva condición a tu historia clínica',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const onSuccessShareHistory = () => {\n    onClose();\n    toast({\n      title: 'Hisoria clínica compartida',\n      description: 'Se ha compartido tu historia clínica',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate: mutateNewCondition } = useMutation('newCondition', (values:ConditionData) => http.newCondition(values), {onSuccess: onSuccessNewCondition, onError})\n\n  const onSubmitNewCondition = (values:ConditionData) => {\n    mutateNewCondition(values);\n  }\n\n  const { mutate: mutateShareHistory } = useMutation('shareHistory', (values:ShareData) => http.shareHistory(values), {onSuccess: onSuccessShareHistory, onError})\n\n  const onSubmitShare = (values:ShareData) => {\n    mutateShareHistory(values)\n  }\n\n  const {isFetchedAfterMount: isPatintsFetched} = useQuery('patients', () => http.getPatients(), {\n    enabled: isMedic,\n    onSuccess: (data:userInformation[]) => setPatients(data),\n    onError\n  })\n\n  const {isFetchedAfterMount: isConditionsFetched} = useQuery('conditions', () => http.conditions(Number(patientId)), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n\n  useQuery('background-subtypes', () => http.backgroundSubtypes(), {\n    onSuccess: (data:BackgroundSubtypeData[]) => setBackgroundSubtype(data),\n    onError\n  })\n\n\n  return ( <>\n    <VStack>\n      <Image \n        maxH='15rem'\n        src={DoctorsInComputerImage} />\n      <Box\n        w='100%'\n        pt='2rem'\n        maxW={{base: '100%', md: '75%', lg: '50%'}} >\n\n        <Tabs isFitted index={tabIndex} onChange={handleTabsChange}>\n          <TabList>\n            {isMedic && <Tab>Pacientes</Tab>}\n            <Tab>Mis condiciones</Tab>\n            <Tab>Lista de condiciones</Tab>\n          </TabList>\n\n          <TabPanels>\n            {isMedic &&\n            <TabPanel>\n              {isPatintsFetched && <PatientsTable patients={patients} />}\n              <TableSkeleton isLoading={!isPatintsFetched} />\n            </TabPanel>}\n            <TabPanel>\n              {isConditionsFetched && <ConditionsTimeLine conditions={conditions} />}\n              <TimeLineSkeleton isLoading={!isConditionsFetched} />\n            </TabPanel>\n            <TabPanel overflowX={{base: 'scroll', lg: 'visible'}}>\n              {isConditionsFetched &&  <ConditionsTable conditions={conditions} />}\n              <TableSkeleton isLoading={!isConditionsFetched} />\n            </TabPanel>\n          </TabPanels>\n          </Tabs>\n      </Box>\n    </VStack>\n    \n    <HomeDrawer\n      onClose={onClose}\n      isOpen={isOpen}\n      drawerPlacement={drawerPlacement as DrawerProps['placement']}\n      {...drawerContent}\n    />\n\n    {(tabIndex !== 0 || !isMedic) &&\n    <>\n      <Box\n        display='inline-block'\n        ml='auto'\n        mr='1rem'\n        mb='1rem'\n        position='sticky'\n        bottom='4rem'\n        right='1rem'\n        onClick={onOpenShare}\n      >\n        <ActionButton icon={MdShare} />\n      </Box>\n\n      <Box\n        display='inline-block'\n        ml='auto'\n        mr='1rem'\n        mb='1rem'\n        position='sticky'\n        bottom='1rem'\n        onClick={onOpenCond}\n      >\n        <ActionButton/>\n      </Box>\n    </>\n    }\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useQuery } from 'react-query';\nimport {\n  useBreakpointValue,\n  ToastPosition,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Box,\n  VStack,\n  useToast\n} from '@chakra-ui/react';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport { ConditionsTimeLine } from '../Conditions/ConditionsTimeLine';\nimport { ConditionsTable } from '../Conditions/ConditionsTable';\nimport { ConditionData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { PresentationSkeletonCard } from '../../components/PresentationSkeletonCard';\nimport { TimeLineSkeleton } from '../../components/TimeLine/TimeLineSkeleton';\nimport { TableSkeleton } from '../../components/TableSkeleton';\n\nexport const PatientConditions = () => {\n  const {id: patientId} = useParams<{id:string}>();\n  const [userData, setUserData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  })\n  \n  const [conditions, setConditions] = useState<ConditionData[]>([])\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const {isFetchedAfterMount: isConditionsFetched} = useQuery('conditions', () => http.conditions(Number(patientId)), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n  \n  const {isFetchedAfterMount: isProfileFetched} = useQuery('profile', () => http.getProfileInfo(Number(patientId)), {\n    onSuccess: (data:userInformation) => setUserData(data),\n    onError\n  })\n\n  return (\n    <>\n      <VStack pt='2rem'>\n        <PresentationSkeletonCard isLoading={!isProfileFetched} />\n        {isProfileFetched && <PresetationCard userData={userData} avatar={avatar} />}\n        <Box\n          w='100%'\n          pt='2rem'\n          maxW={{base: '100%', md: '75%', lg: '50%'}}\n        >\n          <Tabs isFitted>\n            <TabList>\n              <Tab>Línea del tiempo</Tab>\n              <Tab>Lista de condiciones</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <TimeLineSkeleton isLoading={!isConditionsFetched}/>\n                {isConditionsFetched && <ConditionsTimeLine conditions={conditions}/>}\n              </TabPanel>\n              <TabPanel overflowX={{base: 'scroll', lg: 'visible'}}>\n                <TableSkeleton isLoading={!isConditionsFetched} />\n                {isConditionsFetched && <ConditionsTable conditions={conditions}/>}\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </VStack>\n    </>\n  )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Link } from \"react-router-dom\";\nimport {\n    Box,\n    Flex,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useDisclosure,\n    Link as ChackraLink,\n    useColorModeValue\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\n  import { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\n  import { UserContext } from '../../provider/AuthProvider';\nimport { routes } from \"../../routes/routes\";\n\ntype NavItem = {\n  label: string;\n  path: string;\n}\n\nexport const Navbar = () => {\n  const { authContext, logout } = useContext(UserContext)\n  const { isOpen, onToggle } = useDisclosure();\n  const [navbarItems, setNavbarItems] = useState<NavItem[]>([]);\n  const [homePath, setHomePath] = useState('/')\n  const mobileContainerHover = useColorModeValue('gray.100', 'gray.700');\n\n  useEffect(() => {\n    const loggedInItems:NavItem[] = [\n      {label: 'Perfil', path: routes.profile.path},\n    ];\n    const loggedOutItems:NavItem[] = [];\n\n    if (authContext.isLoggedIn) {\n      setHomePath(routes.home.path);\n      setNavbarItems(loggedInItems);\n    }else{\n      setHomePath(routes.default.path)\n      setNavbarItems(loggedOutItems);\n    }\n  }, [authContext])\n\n  return (\n    <Box>\n      <Flex\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n            <ChackraLink\n              as={Link}\n              to={homePath}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n              my='auto'\n            >\n              Doctory\n            </ChackraLink>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10} alignItems='center'>\n            <Stack direction={'row'} alignItems='center' spacing={4}>\n              {navbarItems.map((navItem) => (\n                <ChackraLink key={navItem.label} as={Link} to={navItem.path ?? '/'} fontSize={'sm'} fontWeight={600} sx={{display:'block'}}>\n                    {navItem.label}\n                </ChackraLink>\n              ))}\n              <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n            </Stack>\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          {!authContext.isLoading &&\n            authContext.isLoggedIn ? (\n              <Button as={Link} to={routes.default.path} onClick={logout} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Cerrar Sesión\n              </Button>\n            ):(\n              <Button as={Link} to={routes.login.path} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Iniciar sesión\n              </Button>\n            )\n          }\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <Stack\n          borderBottom='0.5px solid gray'\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <Link key={navItem.label} to={navItem.path ?? '/'} onClick={onToggle}>\n              <Box\n                mx={3}\n                p={1}\n                _hover={{bg: mobileContainerHover}}\n              >\n              {navItem.label}\n              </Box>\n            </Link>\n          ))}\n          <Box\n            mx={3}\n            p={1}\n            d='flex'\n            justifyContent='end'\n            onClick={onToggle}>\n              <ColorModeSwitcher display={{base: 'flex', md: 'none'}}/>\n          </Box>\n        </Stack>\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Container, Stack, Text } from '@chakra-ui/layout'\nimport { Progress } from '@chakra-ui/progress'\nimport React from 'react'\n\nexport const LoadingView = () => {\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n      justifyContent='center'\n      alignItems='center'\n    >\n      <Stack spacing='5' width='100%'>\n        <Text fontSize=\"4xl\" textAlign='center' >Doctory</Text>\n        <Progress size=\"xs\" isIndeterminate colorScheme='primary' />\n      </Stack>\n    </Container>\n  )\n}\n","import { Box } from '@chakra-ui/layout';\nimport React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { protectedRoutes, publicRoutes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\nimport { UserContext } from '../provider/AuthProvider';\nimport { LoadingView } from '../views/AuthViews/LoadingView';\n\nexport const AppRouter = () => {\n  const { authContext } = useContext(UserContext)\n\n  return (\n    <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n      <Router>\n        <Box w='100%'>\n          <Navbar />\n        </Box>\n        <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n          { authContext.isLoading\n            ? <LoadingView />\n            : (\n              <Switch>\n                {Object.keys(publicRoutes).map(k => (\n                  <Route key={k} exact={k !== '404'} path={publicRoutes[k].path} component={publicRoutes[k].component}/>  \n                ))}\n\n                {Object.keys(protectedRoutes).map(k => (\n                  <Route key={k} exact\n                    path={protectedRoutes[k].path}\n                    render= { () => {\n                      const Component = protectedRoutes[k].component;\n                      return authContext.isLoggedIn\n                      ? <Component /> \n                      : <Redirect to={publicRoutes.login.path}/>\n                    }}\n                  />\n                ))\n                }\n                <Redirect to={publicRoutes.notFound.path} />\n              </Switch>\n            )\n          }\n          <Footer />\n        </Box>\n      </Router>\n    </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { AuthProvider } from \"./provider/AuthProvider\"\n \nconst queryClient = new QueryClient()\n\nexport const DoctoryApp = () => (\n  <AuthProvider>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={customTheme}>\n        <AppRouter />\n      </ChakraProvider>\n    </QueryClientProvider>\n  </AuthProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}