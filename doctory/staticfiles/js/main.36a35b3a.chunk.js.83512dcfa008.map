{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.ts","http/client.ts","provider/AuthProvider.tsx","hooks/usePasswordValidation.jsx","views/AuthViews/validPasswordChecklist.tsx","assets/DoctorsInComputerImage.svg","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","views/Conditions/ConditionsTimeLine.tsx","views/Conditions/ConditionsTable.tsx","views/Medic/PatientsTable.tsx","components/TimeLine/AddButton.tsx","utils/utils.ts","views/Conditions/NewConditionForm.tsx","utils/typesDefinitions.ts","assets/SecureImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","assets/NotFoundImage.svg","views/NotFoundPage/NotfoundPage.tsx","assets/PowerPeople_Emma.png","components/PresentationCard.tsx","views/Profile/ChangePasswordForm.tsx","routes/routes.ts","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","views/Profile/ProfileView.tsx","views/Landing/Home.tsx","views/Patient/PatientConditions.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","views/AuthViews/LoadingView.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","mx","onClick","icon","aria-label","getToken","localStorage","getItem","setToken","token","setItem","clearToken","removeItem","http","url","document","location","origin","fetch","this","headers","res","json","data","status","types","fields","method","body","JSON","stringify","values","Object","keys","errors","map","key","join","Error","id","params","defaultContextValues","authContext","type","isLoggedIn","isLoading","login","logout","UserContext","createContext","AuthProvider","children","useState","setAuthContext","useEffect","getUserType","then","undefined","Provider","value","_","usePasswordValidation","password","requiredLength","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","isValid","validPassword","setValidPassword","validation","test","toLowerCase","toUpperCase","length","ValidPasswordChecklist","iconStates","textStates","valid","invalid","fontSize","spacing","alignItems","as","CheckIcon","TimeLine","useMediaQuery","theme","breakpoints","md","isMobile","w","h","maxW","d","flexDirection","flexGrow","pb","className","position","my","mb","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","date_of_diagnosis","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","textAlign","right","p","boxShadow","rounded","bg","top","transform","isTruncated","noOfLines","whiteSpace","fontWeight","borderRadius","zIndex","ConditionsTimeLine","conditions","condition","name","description","ConditionsTable","lg","ml","background_subtype_name","PatientsTable","patients","linkColor","patient","Link","to","routes","path","replace","String","first_name","last_name","dob","blood_type","AddButton","cursor","_hover","Add","isValidDate","Date","parse","now","NewConditionForm","formId","onSubmit","backgroundSubtypes","useForm","register","handleSubmit","isRequired","isInvalid","Boolean","htmlFor","autoComplete","placeholder","ref","required","message","background_subtype","x","validate","userTypes","sexTypes","bulletList","title","listItems","NotfoundPage","useContext","maxH","base","src","NotFoundImage","home","default","colorScheme","PresetationCard","userData","avatar","textOverflow","overflow","allergies","email","ChangePasswordForm","initialPassword","setInitialPassword","setPassword","onChange","e","target","password2","onPaste","preventDefault","publicRoutes","component","landingImage","useBreakpointValue","DoctorWithPhoneImage","DoctorsInComputerImage","align","justify","py","alt","sm","xl","signup","isFullWidth","SecureImage","direction","list","i","item","indx","PresonInComputerImage","history","useHistory","toast","useToast","toastPosition","mutate","useMutation","onSuccess","push","onError","duration","isClosable","px","minW","pattern","MB","contact","notFound","protectedRoutes","profile","setIsLoading","allergiesObject","setAllergiesObject","lastKnownAllergiesId","setLastKnownAllergiesId","specialties","setSpecialties","sex","setData","useDisclosure","isOpen","onOpen","onClose","setValue","ok","useCallback","medic","includes","localLastKownID","allergy","parseArrayToAllergiesObject","useQuery","getProfileInfo","onSettled","updateProfile","mutatePassword","updatePassword","BulletPoint","placement","form","boxSize","borderColor","filter","y","defaultValue","disabled","license","specialty","index","setArrValue","newValues","handleValueArrChange","s","leftIcon","allergyId","findIndex","handleAllergieChange","obj","newValue","patientId","useParams","setPatients","setBackgroundSubtype","setConditions","tabIndex","setTabIndex","drawerPlacement","isMedic","mutateNewCondition","newCondition","conds","sort","getPatients","enabled","Number","pt","isFitted","overflowX","borderBottomWidth","mr","bottom","setUserData","Navbar","onToggle","navbarItems","setNavbarItems","homePath","setHomePath","mobileContainerHover","loggedInItems","label","minH","borderBottom","borderStyle","flex","Close","Hamburger","fontFamily","navItem","in","animateOpacity","Footer","borderTop","marginStart","getFullYear","LoadingView","isIndeterminate","AppRouter","k","exact","render","Component","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","queryClient","QueryClient","DoctoryApp","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.36a35b3a.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n      <IconButton \n        display={display}\n        size=\"md\"\n        variant=\"ghost\"\n        color=\"current\"\n        mx={2}\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}\nexport const clearToken = () => {\n  localStorage.removeItem('doctory_token');\n}","import { \n  userInformation,\n  LoginData,\n  SignUpData,\n  ConditionData,\n  ChangePasswordData\n} from './types';\nimport { getToken, setToken } from '../utils/token';\n\nclass Http {\n  private url = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : document.location.origin;\n\n  public async getUserType() {\n    const res = await fetch(`${this.url}/api/v1/type/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data.types;\n    return null;\n  }\n\n  public async login(fields:LoginData) {\n    const res = await fetch(`${this.url}/api/v1/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async signup(fields:SignUpData) {\n    const res = await fetch(`${this.url}/api/v1/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n  \n  public async newCondition(fields:ConditionData) {\n    const res = await fetch(`${this.url}/api/v1/conditions/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${getToken()}`\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async conditions(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/conditions/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async backgroundSubtypes() {\n    const res = await fetch(`${this.url}/api/v1/background-subtypes/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    if(res.status === 200) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getProfileInfo(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/profile/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updateProfile(fields:userInformation) {\n    const res = await fetch(`${this.url}/api/v1/profile/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updatePassword(fields:ChangePasswordData) {\n    const res = await fetch(`${this.url}/api/v1/change-password/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getPatients() {\n    const res = await fetch(`${this.url}/api/v1/patients/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n}\n\nexport const http = new Http();\n","import React, { useState, FC, useEffect } from 'react';\nimport { createContext } from \"react\";\nimport { http } from '../http/client';\nimport { clearToken, getToken } from '../utils/token';\n\n\ntype authContextStateType = {\n  type?: string[],\n  isLoggedIn: boolean,\n  isLoading: boolean,\n}\n\ntype authContextType = {\n  authContext: authContextStateType,\n  login: (type: string[]) => void,\n  logout: () => void,\n}\n\nconst defaultContextValues: authContextType = {\n  authContext: { type: [''], isLoggedIn: false, isLoading: true },\n  login: () => {},\n  logout: () => {},\n}\n// Context\nexport const UserContext = createContext<authContextType>(defaultContextValues);\n\n// Provider\nexport const AuthProvider : FC = ({ children }) => {\n  \n  const [authContext, setAuthContext] = useState<authContextStateType>(defaultContextValues.authContext);\n\n  const login = (type : string[]) => {\n    setAuthContext(_ => ({\n      type,\n      isLoggedIn: true,\n      isLoading: false,\n    }));\n  };\n\n  const logout = () => {\n    clearToken();\n    setAuthContext(_ => ({\n      type: [''],\n      isLoggedIn: false,\n      isLoading: false,\n    }));\n  };\n\n  useEffect(() => {\n    if(getToken()) { // If there's already a Token in storage we validate it\n      http.getUserType().then(type => {\n        if(!type) {\n          clearToken();\n          setAuthContext({type:undefined, isLoggedIn: false, isLoading: false})\n        }else{\n          setAuthContext({type:type, isLoggedIn: true, isLoading: false})\n        }\n      })\n    }else{\n      setAuthContext({type:undefined, isLoggedIn: false,  isLoading: false})\n    }\n\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ authContext, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon, useColorModeValue } from '@chakra-ui/react'\n\ntype passwordChecklistPropsTypes = {\n  hasNumber: boolean,\n  hasUpperCase: boolean,\n  hasLowerCase: boolean,\n  hasSpecialChar: boolean,\n  hasValidLength: boolean\n}\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}: passwordChecklistPropsTypes) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: useColorModeValue('gray.800','gray.100'),\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-0.1em': 'calc(50% - 0.1em)'}`, //(50% - 1/2(width))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        }\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='1' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import React from 'react';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { ConditionData } from '../../http/types';\n\ntype ConditionsTimeLineProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTimeLine = ({ conditions }:ConditionsTimeLineProps) => {\n  return(\n    <TimeLine>\n      {conditions.map((condition:ConditionData) => (\n        <TimeLineItem \n          key={condition.id}\n          conditionTitle={condition.name}\n          date_of_diagnosis={condition.date_of_diagnosis}\n          conditionDescription={condition.description}\n        />\n      ))}\n    </TimeLine>\n  )\n}","import React from 'react';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from \"@chakra-ui/react\"\nimport { ConditionData } from '../../http/types';\n\ntype ConditionsTableProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTable = ({ conditions }:ConditionsTableProps) => {\n  return (\n    <Table variant=\"striped\" width={{lg:'150%'}} ml={{lg:'-25%'}}>\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Descripción</Th>\n          <Th>Fecha de diagnóstico</Th>\n          <Th>Tipo de condición</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {\n          conditions.map((condition:ConditionData) => (\n            <Tr key={condition.id}>\n              <Td>{condition.name}</Td>\n              <Td>{condition.description}</Td>\n              <Td>{condition.date_of_diagnosis}</Td>\n              <Td>{condition.background_subtype_name}</Td>\n            </Tr>\n          ))\n        }\n      </Tbody>\n    </Table>\n  )\n}","import React from 'react';\nimport { Table, Tbody, Td, Th, Thead, Tr, Link as ChakraLink, useColorModeValue } from '@chakra-ui/react';\nimport { userInformation } from '../../http/types';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\n\ntype PatientsTableProps = {\n  patients: userInformation[];\n};\n\nexport const PatientsTable = ({ patients }: PatientsTableProps) => {\n  const linkColor = useColorModeValue('blue.600', 'blue.400');\n  return (\n    <Table variant=\"striped\">\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Edad</Th>\n          <Th>Tipo de sangre</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {patients.map((patient) => (\n          <Tr key={patient.id}>\n            <Td>\n              <ChakraLink \n                as={Link} \n                to={routes.patient.path.replace(':id', String(patient.id))}\n                color={linkColor}\n              >\n              {patient.first_name + ' ' + patient.last_name}\n              </ChakraLink>\n            </Td>\n            <Td>{patient.dob || '-'}</Td>\n            <Td>{patient.patient?.blood_type || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n","import { useColorModeValue } from '@chakra-ui/color-mode'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { Box } from '@chakra-ui/layout'\nimport React from 'react'\n\nexport const AddButton = () => {\n  return (\n      <Box\n        bg={useColorModeValue('primary.500', 'primary.200')}\n        rounded='50%'\n        cursor='pointer'\n        _hover={{\n          bg:useColorModeValue('primary.300', 'primary.300')\n        }}\n      >\n        <AddIcon \n          w='2em'\n          h='2em'\n          p='.5em'\n          color='white'\n        />\n      </Box>\n  )\n}\n","export const isValidDate = (value:string) => {\n  const date_of_diagnosis = Date.parse(value);\n  return date_of_diagnosis < Date.now();\n}","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n  Select\n} from '@chakra-ui/react';\nimport { BackgroundSubtypeData, ConditionData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\nimport { isValidDate } from '../../utils/utils';\n\ntype NewConditionProps = {\n  formId: string;\n  onSubmit: (values:ConditionData) => void;\n  backgroundSubtypes: BackgroundSubtypeData[];\n}\n\nexport const NewConditionForm = ({ formId, onSubmit, backgroundSubtypes }: NewConditionProps) => {\n  const { register, handleSubmit, errors } = useForm<ConditionData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Nombre</FormLabel>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='Diabetes tipo 1'\n            ref={register({required: 'El nombre es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <FormControl mb='4' isInvalid={Boolean(errors.description)}>\n          <FormLabel htmlFor=\"description\">Description</FormLabel>\n          <Textarea\n            name=\"description\"\n            placeholder='Descripción de la condición'\n            ref={register()}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.background_subtype)}>\n          <FormLabel htmlFor=\"background_subtype\">Tipo de condición</FormLabel>\n          <Select\n            name=\"background_subtype\"\n            ref={register()}>\n            {backgroundSubtypes.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.date_of_diagnosis)}>\n          <FormLabel htmlFor=\"date_of_diagnosis\">Fecha de diagnóstico</FormLabel>\n          <Input\n            name=\"date_of_diagnosis\"\n            type=\"date\"\n            autoComplete='on'\n            ref={register({\n              required: 'La fecha es obligatoria',\n              validate: value => isValidDate(value) || 'La fecha no es válida'\n            })}/>\n          <FormErrorMessage>\n            {errors.date_of_diagnosis && errors.date_of_diagnosis.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","export const userTypes = {\n  PATIENT: 'PAT',\n  MEDIC: 'MED',\n}\n\nexport const sexTypes = {\n  MALE: 'M',\n  FEMALE: 'F',\n  OTHER: 'O',\n  NOT_SPECIFIED: 'U',\n}\n\nexport type timeLineItemProps = {\n  conditionTitle: string,\n  date_of_diagnosis: string,\n  conditionType?: string,\n  conditionSubtype?: string,\n  conditionDescription?: string,\n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signup.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signup.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","export default __webpack_public_path__ + \"static/media/NotFoundImage.2f089071.svg\";","import React, { useContext } from 'react'\nimport { Link } from \"react-router-dom\";\nimport { VStack, Image, Button, } from '@chakra-ui/react'\nimport NotFoundImage from '../../assets/NotFoundImage.svg';\nimport { UserContext } from '../../provider/AuthProvider';\nimport { routes } from '../../routes/routes';\n\n\nexport const NotfoundPage = () => {\n  const { authContext } = useContext(UserContext)\n  return (\n    <VStack flexGrow={1} justifyContent='center'>\n      <Image \n        maxH={{base:'15rem', md:'20rem'}}\n        src={NotFoundImage}\n        mb='4em'\n      />\n      <Link \n        to={ authContext.isLoggedIn?  routes.home.path : routes.default.path} \n      >\n        <Button size='lg' colorScheme='primary' >\n          Ir a inicio\n        </Button>\n      </Link>\n    </VStack>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport { userInformation } from '../http/types'\n\ntype presentationCardPropsTypes = {\n  userData: userInformation,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box my='1rem'>\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'30%', md:'20%'}}>\n          <Image borderRadius=\"full\" maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box \n          maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'md'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'2xl'}}\n          >\n            {userData.first_name + ' ' + userData.last_name}\n          </Text>\n          {userData.dob &&\n            <Text>{userData.dob}</Text>\n          }\n          {userData.patient?.blood_type &&\n            <Text>Tipo de sangre: {userData.patient?.blood_type}</Text>\n          }\n          {userData.location &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              {userData.location}\n            </Text>\n          }\n          {userData.patient?.allergies &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              Alergias: {userData.patient?.allergies.join(', ')}\n            </Text>\n          }\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","import React, {useState, ChangeEvent} from 'react';\nimport { \n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input\n } from '@chakra-ui/react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from '../AuthViews/validPasswordChecklist';\nimport { ChangePasswordData } from '../../http/types';\n\n\ntype ChangePasswordProps = {\n  formId: string;\n  onSubmit: SubmitHandler<ChangePasswordData>;\n}\n\nexport const ChangePasswordForm = ({formId, onSubmit}:ChangePasswordProps) => {\n  const { register, handleSubmit, errors } = useForm<ChangePasswordData>();\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n  const [password, setPassword] = useState<string>('');\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n  \n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n      <FormControl\n        mb='4'\n        isInvalid={Boolean(initialPassword ? !isValid : null)}>\n        <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n        <Input\n          name='password1'\n          type='password'\n          autoComplete='off'\n          placeholder='Contraseña segura'\n          value={password}\n          onChange={handlePasswordChange}\n          ref={register({ required: true })}\n          mb={4}\n        />\n        {!isValid && <ValidPasswordChecklist\n          hasNumber={hasNumber}\n          hasLowerCase={hasLowerCase}\n          hasUpperCase={hasUpperCase}\n          hasSpecialChar={hasSpecialChar}\n          hasValidLength={hasValidLength} />}\n      </FormControl>\n\n      <FormControl\n        mb={4}\n        isInvalid={Boolean(errors.password2)}>\n        <FormLabel htmlFor='password2'>\n          Confirmar contraseña\n        </FormLabel>\n        <Input\n          name='password2'\n          type='password'\n          autoComplete='off'\n          placeholder='Repetir contraseña'\n          onPaste={e => e.preventDefault()}\n          ref={register({\n            required: 'Es obligatorio confirmar la contraseña',\n            validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n          })}\n        />\n        <FormErrorMessage>\n          {errors.password2 && errors.password2.message}\n        </FormErrorMessage>\n      </FormControl>\n      </form>\n\n    </Stack>\n  )\n}","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { Home } from \"../views/Landing/Home\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientConditions } from \"../views/Patient/PatientConditions\";\nimport { ProfileView } from \"../views/Profile/ProfileView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nexport const publicRoutes: { [name: string]: route } = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signup: { path: '/signup', component: SignUpView },\n  contact: { path: '/contact', component: NotfoundPage },\n  notFound: { path: '/404', component: NotfoundPage },\n}\n\nexport const protectedRoutes: { [name: string]: route } = {\n  profile: { path: '/profile', component: ProfileView },\n  home: { path: '/home', component: Home },\n  patient: { path: '/patient/:id', component: PatientConditions },\n}\n\nexport const routes: { [name: string]: route } = {\n  ...publicRoutes,\n  ...protectedRoutes,\n};\n","import React, { useContext } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  useToast,\n  Divider,\n  Text,\n  useBreakpointValue,\n  ToastPosition\n} from '@chakra-ui/react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { LoginData } from '../../http/types';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\n\n\nexport const LoginView = () => {\n  const { login } = useContext(UserContext);\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  const history = useHistory()\n  \n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  \n  const onSuccess = (type: string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('login', (values:LoginData) => http.login(values), {onSuccess, onError})\n  \n  const onSubmit = (values: LoginData) => {\n    mutate(values);\n  }\n\n  return (\n    <Flex\n      flexGrow={1}\n      h={'100%'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.100', 'gray.800')}\n    >\n      <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n        <Box\n          p={8}\n          bg={useColorModeValue('white', 'gray.700')}\n          minW='xs'\n          rounded={'lg'}\n          boxShadow={'lg'}\n        >\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.email)}>\n              <FormLabel htmlFor=\"email\">Correo</FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                autoComplete='on'\n                placeholder='ejemplo@gmail.com'\n                ref={register({\n                  required: 'El correo electrónico es obligatorio',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: 'Ingresa un correo electrónico válido',\n                  },\n                })}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.password)}>\n              <FormLabel htmlFor='password'>Contraseña</FormLabel>\n              <Input\n                name='password'\n                type=\"password\"\n                autoComplete='off'\n                ref={register({ required: true })}\n              />\n            </FormControl>\n            <Stack spacing={8}>\n              <Button type=\"submit\">Entrar</Button>\n            </Stack>\n          </form>\n          <Divider my={4}/>\n          <Box textAlign={'center'} >\n            <ChakraLink \n              as={Link}\n              to={routes.signup.path}>\n                <Text color={useColorModeValue('primary.500', 'primary.300')}>Crear una nueva cuenta</Text>\n            </ChakraLink>\n          </Box>\n        </Box>\n      </Stack>\n     \n    </Flex>\n  );\n}\n","import React, { ChangeEvent, useState, useContext } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n  useToast,\n  Link as ChakraLink,\n  useBreakpointValue,\n  ToastPosition,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData } from '../../http/types';\nimport { http } from '../../http/client';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\n\nexport const SignUpView = () => {\n  const history = useHistory()\n  const { login } = useContext(UserContext);\n  const toast = useToast()\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const onSuccess = (type:string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('signup', (values:SignUpData) => http.signup(values), {onSuccess, onError})\n  \n  const onSubmit = (values: SignUpData) => {\n    mutate(values);\n  }\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n  \n  const MB = 4\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n    >\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  onPaste={e => e.preventDefault()}\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n              \n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n          <Box display='flex' justifyContent='center'>\n            <ChakraLink as={Link} to={routes.login.path}>\n              ¿Ya con cuenta? Inicie Sesión\n            </ChakraLink>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import React, { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react'\nimport { useForm } from 'react-hook-form';\nimport {\n  Avatar,\n  AvatarBadge,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Select,\n  useColorModeValue,\n  useToast,\n  Box,\n  Container,\n  Flex,\n  Heading,\n  HStack,\n  Stack,\n  VStack,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  useBreakpointValue,\n  ToastPosition,\n} from \"@chakra-ui/react\"\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { FaCamera } from 'react-icons/fa';\nimport { sexTypes, userTypes } from '../../utils/typesDefinitions';\nimport { ChangePasswordData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { isValidDate } from '../../utils/utils';\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { setToken } from '../../utils/token';\nimport { useMutation, useQuery } from 'react-query';\n\nexport const ProfileView = () => {\n  \n  const [isLoading, setIsLoading] = useState(true)\n  const [allergiesObject, setAllergiesObject] = useState<{id: number, value: string}[]>([{id:0,value:''},]);\n  const [lastKnownAllergiesId, setLastKnownAllergiesId] = useState(1)\n  const [specialties, setSpecialties] = useState(['']);\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const toast = useToast();\n  const [data, setData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { register, handleSubmit, errors, setValue } = useForm<userInformation>();\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const ok = useCallback((_, data) => {\n    \n    const parseArrayToAllergiesObject = (allergies:string[] = ['']) => {\n      if (!allergies || allergies.length === 0) allergies = [''];\n      \n      let localLastKownID = lastKnownAllergiesId;\n      const res = allergies.map(allergy => ({\n        id: localLastKownID++,\n        value: allergy\n      }));    \n      setLastKnownAllergiesId(localLastKownID);\n      return res;\n    }\n    const userData = data as userInformation;\n    const {patient, medic} = userData;\n    setValue('sex', userData.sex)\n    setData(userData);\n    \n    if (userData.type.includes(userTypes.PATIENT)) {\n      register('patient.allergies');\n      setAllergiesObject(parseArrayToAllergiesObject(patient && patient.allergies));\n    }\n    if (userData.type.includes(userTypes.MEDIC)) {\n      register('medic.specialties');\n      setValue('medic.specialties', medic? medic.specialties : ['']);\n      setSpecialties(medic? medic.specialties : ['']);\n    }\n    setIsLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[setValue, register])\n\n  useQuery('profile', () => http.getProfileInfo(), {\n    onSuccess: (data:userInformation) => ok(null, data),\n    onError,\n    onSettled: () => setIsLoading(false)\n  })\n\n  const { mutate } = useMutation('updateProfile', (values:userInformation) => http.updateProfile(values), {\n    onSuccess: () => {\n      toast({\n        description: '¡Tu información se ha guardado con éxito!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const { mutate: mutatePassword } = useMutation('changePassword', (values:ChangePasswordData) => http.updatePassword(values), {\n    onSuccess: ({ token }:{token:string}) => {\n      setToken(token)\n      onClose()\n      toast({\n        title: 'Contraseña actualizada',\n        description: 'Tu contraseña se ha cambiado exitosamente. Los otros equipos dónde utilices doctory tendrán que volver a iniciar sesión.',\n        status: 'success',\n        duration: 10000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const onSubmit = (values: userInformation) => {\n    setIsLoading(true);\n    if (data.type.includes(userTypes.PATIENT)) {\n      values.patient && (values.patient.allergies = allergiesObject.map(x => x.value).filter(y => y !== ''));\n    }\n    mutate(values);\n  }\n\n  const addSpecialtyField = () => setSpecialties((s) => [...s, '']);\n  \n  const addAllergyField = () => {\n    setAllergiesObject(obj => {\n      const newValue = {id: lastKnownAllergiesId, value: ''};\n      setLastKnownAllergiesId(x => x+1);\n      return [...obj, newValue];\n    })\n  }\n\n  const handleValueArrChange = (e: ChangeEvent<HTMLInputElement>, index: number, name:string,  setArrValue: Dispatch<SetStateAction<string[]>>) => {\n    setArrValue(values => {\n      let newValues = [...values];\n      newValues[index] = e.target.value;\n      setValue(name, newValues);\n      return newValues;\n    })\n  }\n  \n  const handleAllergieChange = (e: ChangeEvent<HTMLInputElement>, allergy:{id:number, value:string} ) => {\n    let allergyId = allergiesObject.findIndex(x => x.id === allergy.id);\n    setAllergiesObject(allergies => {    \n      let newValues = [...allergies];\n      newValues[allergyId] = {...allergy, value:e.target.value};\n      return newValues\n    })\n  }\n\n  const onChangePassword = (values:ChangePasswordData) => {\n    mutatePassword(values);\n  }\n\n  const BulletPoint = () => (\n    <Box \n      bg= 'currentcolor'\n      borderRadius= '50%'\n      w='5px'\n      h='5px'\n      mx='.5em'\n    />\n  )\n\n  return (\n    <Container\n    w=\"100vw\"\n    h=\"100%\"\n    maxW=\"95%\"\n    d={'flex'}\n    flexGrow={1}\n    mx={{base:'1em', md:'2em'}}\n    >\n      <Drawer\n        placement={useBreakpointValue({base: 'bottom', lg: 'right'})}\n        isOpen={isOpen}\n        onClose={onClose}\n        >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader>\n              Actualizar contraseña\n            </DrawerHeader>\n\n            <DrawerBody>\n              <ChangePasswordForm formId='change-password-form' onSubmit={onChangePassword}/>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button\n                type='submit'\n                form='change-password-form'\n                colorScheme='primary'>Cambiar contraseña</Button>\n            </DrawerFooter>\n\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    <Flex\n      flexGrow={1}\n      align={'flex-start'}\n      justify={'center'}\n      py={12}\n      w={'100%'}\n    >\n    <VStack w={'100%'} mb={12} >\n      <Heading fontSize={'3xl'}>Editar Perfil</Heading>\n      <Stack w={'100%'} align={'center'}>\n        <Avatar src={avatar} size=\"2xl\" mb={4}>\n          <AvatarBadge\n            boxSize=\".8em\"\n            borderColor=\"transparent\"\n            bg=\"white\"\n            _hover={{color:'gray.500'}}>\n            <FaCamera />\n          </AvatarBadge>\n        </Avatar>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        minW={{base:'xs', md: 'md'}}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n      >\n       \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.first_name)}>\n            <FormLabel htmlFor='first_name'>Nombre(s)</FormLabel>\n            <Input\n              name='first_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Juan'\n              defaultValue={data.first_name}\n              ref={register({ required: 'El nombre es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.first_name && errors.first_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.last_name)}>\n            <FormLabel htmlFor='last_name'>Apellidos</FormLabel>\n            <Input\n              name='last_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Pérez'\n              defaultValue={data.last_name}\n              ref={register({ required: 'El apellido es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.last_name && errors.last_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.email)}>\n            <FormLabel htmlFor='email'>Correo</FormLabel>\n            <Input\n              name='email'\n              type='email'\n              disabled={true}\n              placeholder='ejemplo@gmail.com'\n              value={data.email}\n              ref={register}\n            />\n            \n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel>Contraseña</FormLabel>\n            <Button onClick={onOpen} variant='link' colorScheme='primary'>Cambiar contraseña</Button>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.dob)}>\n            <FormLabel htmlFor='dob'>Fecha de nacimiento</FormLabel>\n            <Input\n              name='dob'\n              type='date'\n              autoComplete='on'\n              defaultValue={data.dob}\n              ref={register({\n                required: 'La fecha es obligatoria',\n                validate: value => isValidDate(value) || 'La fecha no es válida',\n               })}\n            />\n            <FormErrorMessage>\n            {errors.dob && errors.dob.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel htmlFor='sex'>Sexo</FormLabel>\n              <Select\n                as='select'\n                name='sex'\n                onChange= {(e) => setValue('sex', e.target.value)}\n                ref={register}\n              >\n                <option value={sexTypes.NOT_SPECIFIED}>Sin especificar</option>\n                <option value={sexTypes.FEMALE}>Mujer</option>\n                <option value={sexTypes.MALE}>Hombre</option>\n                <option value={sexTypes.OTHER}>Otro</option>\n              </Select>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='location'>Lugar de Residencia</FormLabel>\n            <Input\n              name='location'\n              type='text'\n              autoComplete='on'\n              placeholder='Monterrey, Nuevo León'\n              defaultValue={data.location}\n              ref={register}\n            />\n          </FormControl>\n          \n          {data.type.includes(userTypes.MEDIC) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='license'>Cédula Profesional</FormLabel>\n              <Input\n                name='medic.license'\n                type='text'\n                placeholder='12345678'\n                defaultValue={data.medic? data.medic.license : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.MEDIC) && \n            <FormControl mb={4} >\n              <FormLabel htmlFor='specialty'>Especialidad(s)</FormLabel>\n              {specialties.map((specialty,index) => (\n                <HStack\n                  mb={2}\n                  key={'specialty-'+index} // TODO: \n                >\n                  {BulletPoint()}\n                  <Input\n                    value={specialty}\n                    onChange={e => handleValueArrChange(e, index, 'medic.specialties', setSpecialties)}\n                    size='sm'\n                    type='text'\n                    placeholder='Cirujano'\n                  />\n                </HStack>\n              ))}\n\n              <HStack>\n                {BulletPoint()}\n                <div>\n                <Button\n                  size='sm'\n                  variant=\"outline\"\n                  onClick={addSpecialtyField}\n                  leftIcon={<AddIcon/>}\n                >Agregar</Button>\n                </div>\n              </HStack>\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='blood_type'>Tipo de Sangre</FormLabel>\n              <Input\n                name='patient.blood_type'\n                type='text'\n                autoComplete='on'\n                placeholder='O+'\n                defaultValue={data.patient? data.patient.blood_type : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) && \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='allergies'>Alergias</FormLabel>\n            {allergiesObject.map((allergy) => (\n              <HStack\n                mb={2}\n                key={allergy.id}\n              >\n                {BulletPoint()}\n                <Input\n                  value={allergy.value}\n                  onChange={e => handleAllergieChange(e, allergy)}\n                  size='sm'\n                  type='text'\n                  placeholder='Pólen'\n                />\n              </HStack>\n            ))}\n            <HStack>\n              {BulletPoint()}\n              <div>\n              <Button\n                size='sm'\n                variant=\"outline\"\n                disabled={allergiesObject[allergiesObject.length-1] && allergiesObject[allergiesObject.length-1].value === ''}\n                onClick={addAllergyField}\n                leftIcon={<AddIcon/>}\n              >Agregar</Button>\n              </div>\n            </HStack>\n          </FormControl>\n          }\n          <Stack  w={'100%'} align='flex-end'>\n            <Button \n              isLoading={isLoading}\n              colorScheme='primary'\n              type=\"submit\"\n            >\n              Guardar\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </VStack>\n    </Flex>\n  </Container>\n  )\n}","import React, { useContext, useState } from 'react';\nimport { Box, Image, Tabs, TabList, Tab, TabPanel, TabPanels, VStack, useToast, useBreakpointValue, ToastPosition, Drawer, DrawerOverlay, DrawerContent, DrawerCloseButton, DrawerHeader, DrawerBody, DrawerFooter, Button, useDisclosure, DrawerProps } from '@chakra-ui/react';\n\n\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport { BackgroundSubtypeData, ConditionData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useMutation, useQuery } from 'react-query';\nimport { ConditionsTimeLine } from '../Conditions/ConditionsTimeLine';\nimport { ConditionsTable } from '../Conditions/ConditionsTable';\nimport { PatientsTable } from '../Medic/PatientsTable';\nimport { AddButton } from '../../components/TimeLine/AddButton';\nimport { NewConditionForm } from '../Conditions/NewConditionForm';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { UserContext } from '../../provider/AuthProvider';\nimport { userTypes } from '../../utils/typesDefinitions';\nimport { useParams } from 'react-router-dom';\n\nexport const Home = () => {\n  const { authContext } = useContext(UserContext)\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const {id: patientId} = useParams<{id:string}>();\n\n  const [patients, setPatients] = useState<userInformation[]>([])\n  const [backgroundSubtypes, setBackgroundSubtype] = useState<BackgroundSubtypeData[]>([])\n  const [conditions, setConditions] = useState<ConditionData[]>([])\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const drawerPlacement = useBreakpointValue({base: 'bottom', lg: 'right'});\n\n  const isMedic = authContext.type?.includes(userTypes.MEDIC);\n\n  const handleTabsChange = (index:number) => {\n    setTabIndex(index);\n  };\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const onSuccessNewCondition = (data:ConditionData) => {\n    const conds = [...conditions, data]\n    conds.sort((x, y) => x.date_of_diagnosis < y.date_of_diagnosis ? 1 : -1)\n    setConditions(conds)\n    onClose();\n    toast({\n      title: 'Condición creada',\n      description: 'Se ha añadido una nueva condición a tu historia clínica',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate: mutateNewCondition } = useMutation('newCondition', (values:ConditionData) => http.newCondition(values), {onSuccess: onSuccessNewCondition, onError})\n\n  const onSubmit = (values:ConditionData) => {\n    mutateNewCondition(values);\n  }\n\n  useQuery('patients', () => http.getPatients(), {\n    enabled: isMedic,\n    onSuccess: (data:userInformation[]) => setPatients(data),\n    onError\n  })\n  useQuery('conditions', () => http.conditions(Number(patientId)), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n\n  useQuery('background-subtypes', () => http.backgroundSubtypes(), {\n    onSuccess: (data:BackgroundSubtypeData[]) => setBackgroundSubtype(data),\n    onError\n  })\n\n\n  return ( <>\n    <VStack>\n      <Image \n        maxH='15rem'\n        src={DoctorsInComputerImage}\n      />\n      <Box\n        w='100%'\n        pt='2rem'\n        maxW={{base: '100%', md: '75%', lg: '50%'}}\n      >\n        <Tabs isFitted index={tabIndex} onChange={handleTabsChange}>\n          <TabList>\n            {isMedic && <Tab>Pacientes</Tab>}\n            <Tab>Mis condiciones</Tab>\n            <Tab>Lista de condiciones</Tab>\n          </TabList>\n\n          <TabPanels>\n            {isMedic &&\n            <TabPanel>\n              <PatientsTable patients={patients} />\n            </TabPanel>}\n            <TabPanel>\n              <ConditionsTimeLine conditions={conditions} />\n            </TabPanel>\n            <TabPanel overflowX={{base: 'scroll', lg: 'visible'}}>\n              <ConditionsTable conditions={conditions} />\n            </TabPanel>\n          </TabPanels>\n          </Tabs>\n      </Box>\n    </VStack>\n    <Drawer \n      placement={drawerPlacement as DrawerProps['placement']}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <DrawerOverlay>\n        <DrawerContent>\n          <DrawerCloseButton/>\n          <DrawerHeader borderBottomWidth='1px'>\n            Nueva condición\n          </DrawerHeader>\n\n          <DrawerBody>\n            <NewConditionForm\n              onSubmit={onSubmit}\n              formId='form-condition'\n              backgroundSubtypes={backgroundSubtypes}/>\n          </DrawerBody>\n          \n          <DrawerFooter>\n            <Button\n              type='submit'\n              form='form-condition'\n              leftIcon={<AddIcon/>}\n              colorScheme='primary'>Añadir</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </DrawerOverlay>\n    </Drawer>\n    {(tabIndex !== 0 || !isMedic) &&\n      <Box\n        display='inline-block'\n        ml='auto'\n        mr='1rem'\n        mb='1rem'\n        position='sticky'\n        bottom='1rem'\n        onClick={onOpen}\n      >\n        <AddButton/>\n      </Box>\n    }\n  </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { useQuery } from 'react-query';\nimport {\n  useBreakpointValue,\n  ToastPosition,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Box,\n  VStack,\n  useToast\n} from '@chakra-ui/react';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport { ConditionsTimeLine } from '../Conditions/ConditionsTimeLine';\nimport { ConditionsTable } from '../Conditions/ConditionsTable';\nimport { ConditionData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\n\nexport const PatientConditions = () => {\n  const {id: patientId} = useParams<{id:string}>();\n  const [userData, setUserData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  })\n  \n  const [conditions, setConditions] = useState<ConditionData[]>([])\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  useQuery('conditions', () => http.conditions(Number(patientId)), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n  useQuery('profile', () => http.getProfileInfo(Number(patientId)), {\n    onSuccess: (data:userInformation) => setUserData(data),\n    onError\n  })\n\n  return (\n    <>\n      <VStack pt='2rem'>\n        <PresetationCard userData={userData} avatar={avatar}/>\n        <Box\n          w='100%'\n          pt='2rem'\n          maxW={{base: '100%', md: '75%', lg: '50%'}}\n        >\n          <Tabs isFitted>\n            <TabList>\n              <Tab>Línea del tiempo</Tab>\n              <Tab>Lista de condiciones</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <ConditionsTimeLine conditions={conditions}/>\n              </TabPanel>\n              <TabPanel overflowX={{base: 'scroll', lg: 'visible'}}>\n                <ConditionsTable conditions={conditions}/>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </VStack>\n    </>\n  )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Link } from \"react-router-dom\";\nimport {\n    Box,\n    Flex,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useDisclosure,\n    Link as ChackraLink,\n    useColorModeValue\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\n  import { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\n  import { UserContext } from '../../provider/AuthProvider';\nimport { routes } from \"../../routes/routes\";\n\ntype NavItem = {\n  label: string;\n  path: string;\n}\n\nexport const Navbar = () => {\n  const { authContext, logout } = useContext(UserContext)\n  const { isOpen, onToggle } = useDisclosure();\n  const [navbarItems, setNavbarItems] = useState<NavItem[]>([]);\n  const [homePath, setHomePath] = useState('/')\n  const mobileContainerHover = useColorModeValue('gray.100', 'gray.700');\n\n  useEffect(() => {\n    const loggedInItems:NavItem[] = [\n      {label: 'Perfil', path: routes.profile.path},\n    ];\n    const loggedOutItems:NavItem[] = [];\n\n    if (authContext.isLoggedIn) {\n      setHomePath(routes.home.path);\n      setNavbarItems(loggedInItems);\n    }else{\n      setHomePath(routes.default.path)\n      setNavbarItems(loggedOutItems);\n    }\n  }, [authContext])\n\n  return (\n    <Box>\n      <Flex\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n            <ChackraLink\n              as={Link}\n              to={homePath}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n              my='auto'\n            >\n              Doctory\n            </ChackraLink>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10} alignItems='center'>\n            <Stack direction={'row'} alignItems='center' spacing={4}>\n              {navbarItems.map((navItem) => (\n                <ChackraLink key={navItem.label} as={Link} to={navItem.path ?? '/'} fontSize={'sm'} fontWeight={600} sx={{display:'block'}}>\n                    {navItem.label}\n                </ChackraLink>\n              ))}\n              <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n            </Stack>\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          {!authContext.isLoading &&\n            authContext.isLoggedIn ? (\n              <Button as={Link} to={routes.default.path} onClick={logout} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Cerrar Sesión\n              </Button>\n            ):(\n              <Button as={Link} to={routes.login.path} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Iniciar sesión\n              </Button>\n            )\n          }\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <Stack\n          borderBottom='0.5px solid gray'\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <Link key={navItem.label} to={navItem.path ?? '/'} onClick={onToggle}>\n              <Box\n                mx={3}\n                p={1}\n                _hover={{bg: mobileContainerHover}}\n              >\n              {navItem.label}\n              </Box>\n            </Link>\n          ))}\n          <Box\n            mx={3}\n            p={1}\n            d='flex'\n            justifyContent='end'\n            onClick={onToggle}>\n              <ColorModeSwitcher display={{base: 'flex', md: 'none'}}/>\n          </Box>\n        </Stack>\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Container, Stack, Text } from '@chakra-ui/layout'\nimport { Progress } from '@chakra-ui/progress'\nimport React from 'react'\n\nexport const LoadingView = () => {\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n      justifyContent='center'\n      alignItems='center'\n    >\n      <Stack spacing='5' width='100%'>\n        <Text fontSize=\"4xl\" textAlign='center' >Doctory</Text>\n        <Progress size=\"xs\" isIndeterminate colorScheme='primary' />\n      </Stack>\n    </Container>\n  )\n}\n","import { Box } from '@chakra-ui/layout';\nimport React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { protectedRoutes, publicRoutes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\nimport { UserContext } from '../provider/AuthProvider';\nimport { LoadingView } from '../views/AuthViews/LoadingView';\n\nexport const AppRouter = () => {\n  const { authContext } = useContext(UserContext)\n\n  return (\n    <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n      <Router>\n        <Box w='100%'>\n          <Navbar />\n        </Box>\n        <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n          { authContext.isLoading\n            ? <LoadingView />\n            : (\n              <Switch>\n                {Object.keys(publicRoutes).map(k => (\n                  <Route key={k} exact={k !== '404'} path={publicRoutes[k].path} component={publicRoutes[k].component}/>  \n                ))}\n\n                {Object.keys(protectedRoutes).map(k => (\n                  <Route key={k} exact\n                    path={protectedRoutes[k].path}\n                    render= { () => {\n                      const Component = protectedRoutes[k].component;\n                      return authContext.isLoggedIn\n                      ? <Component /> \n                      : <Redirect to={publicRoutes.login.path}/>\n                    }}\n                  />\n                ))\n                }\n                <Redirect to={publicRoutes.notFound.path} />\n              </Switch>\n            )\n          }\n          <Footer />\n        </Box>\n      </Router>\n    </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { AuthProvider } from \"./provider/AuthProvider\"\n \nconst queryClient = new QueryClient()\n\nexport const DoctoryApp = () => (\n  <AuthProvider>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={customTheme}>\n        <AppRouter />\n      </ChakraProvider>\n    </QueryClientProvider>\n  </AuthProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}