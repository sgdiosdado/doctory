{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.ts","http/client.ts","hooks/usePasswordValidation.jsx","views/AuthViews/validPasswordChecklist.tsx","assets/SecureImage.svg","assets/DoctorsInComputerImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","views/NotFoundPage/NotfoundPage.tsx","components/PresentationCard.tsx","assets/PowerPeople_Emma.png","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","components/TimeLine/AddButton.tsx","utils/utils.ts","views/Patient/NewConditionForm.tsx","utils/typesDefinitions.ts","views/Profile/ChangePasswordForm.tsx","routes/routes.ts","views/Patient/PatientHomeView.tsx","views/Doctor/DoctorLandingView.tsx","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","views/Profile/ProfileView.tsx","views/Navbar/navbarItems.tsx","views/Navbar/MobileNavbar.tsx","views/Navbar/DesktopNavbar.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","label","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","direction","justify","onClick","fontSize","spacing","size","variant","color","marginLeft","icon","aria-label","getToken","localStorage","getItem","setToken","token","setItem","http","url","document","location","origin","fields","fetch","this","method","headers","body","JSON","stringify","res","json","data","status","values","Object","keys","errors","map","key","join","Error","usePasswordValidation","password","requiredLength","useState","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","isValid","validPassword","setValidPassword","useEffect","validation","test","toLowerCase","toUpperCase","length","ValidPasswordChecklist","iconStates","textStates","alignItems","as","CheckIcon","bulletList","title","listItems","NotfoundPage","PresetationCard","userData","avatar","maxW","base","md","borderRadius","maxH","src","textAlign","whiteSpace","textOverflow","overflow","first_name","last_name","dob","email","TimeLine","children","useMediaQuery","theme","breakpoints","isMobile","w","h","d","flexDirection","flexGrow","pb","className","position","my","mb","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","date_of_diagnosis","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","right","p","boxShadow","rounded","bg","top","transform","isTruncated","noOfLines","fontWeight","zIndex","AddButton","cursor","_hover","Add","isValidDate","value","Date","parse","now","NewConditionForm","formId","onSubmit","backgroundSubtypes","useForm","register","handleSubmit","id","isRequired","isInvalid","Boolean","name","htmlFor","type","autoComplete","placeholder","ref","required","message","description","background_subtype","x","validate","userTypes","sexTypes","ChangePasswordForm","initialPassword","setInitialPassword","setPassword","onChange","e","target","password2","onPaste","preventDefault","patientPaths","patientHome","path","component","sex","setUserData","useDisclosure","isOpen","onOpen","onClose","setBackgroundSubtype","conditions","setConditions","toast","useToast","toastPosition","useBreakpointValue","onError","duration","isClosable","mutateNewCondition","useMutation","newCondition","onSuccess","conds","sort","y","mutate","useQuery","getProfileInfo","condition","placement","lg","borderBottomWidth","form","leftIcon","colorScheme","ml","mr","bottom","doctorPaths","doctorLanding","doctorpatients","generalPaths","default","landingImage","DoctorWithPhoneImage","DoctorsInComputerImage","mx","align","py","alt","sm","xl","to","routes","signup","isFullWidth","SecureImage","list","i","item","indx","PresonInComputerImage","login","history","useHistory","push","px","minW","pattern","Link","MB","_","profile","isLoading","setIsLoading","allergiesObject","setAllergiesObject","lastKnownAllergiesId","setLastKnownAllergiesId","specialties","setSpecialties","setData","setValue","ok","useCallback","patient","medic","includes","allergies","localLastKownID","allergy","parseArrayToAllergiesObject","onSettled","updateProfile","mutatePassword","updatePassword","BulletPoint","boxSize","borderColor","filter","defaultValue","disabled","license","specialty","index","setArrValue","newValues","handleValueArrChange","s","blood_type","allergyId","findIndex","handleAllergieChange","obj","newValue","contact","notFound","navbarItems","MobileNavbar","closeNavbar","navItem","MobileNavItem","onToggle","background","ChevronDownIcon","transition","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","child","DesktopNavbar","trigger","border","DesktopSubNav","subLabel","role","_groupHover","opacity","flex","ChevronRightIcon","Navbar","userType","minH","borderBottom","Close","Hamburger","fontFamily","Footer","borderTop","marginStart","getFullYear","AppRouter","k","exact","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","queryClient","QueryClient","DoctoryApp","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"+TAiBaA,EAAoB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAChCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,mCACCR,EACD,cAAC,IAAD,CAAMS,UAAU,MAAMC,QAAQ,QAA9B,SACE,cAAC,IAAD,CACAC,QAAST,EACTD,QAASA,EACTW,SAAU,KAHV,SAKE,eAAC,IAAD,CAAQC,QAAS,EAAjB,UACE,cAAC,IAAD,UAAMb,IACN,cAAC,IAAD,UAAK,cAACM,EAAD,aAKT,cAAC,IAAD,CACEL,QAASA,EACTa,KAAK,KACLF,SAAS,KACTG,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXN,QAAST,EACTgB,KAAM,cAACZ,EAAD,IACNa,aAAA,oBAA0Bf,EAA1B,c,uGC9CKgB,EAAW,WACtB,OAAOC,aAAaC,QAAQ,kBAEjBC,EAAW,SAACC,GACvBH,aAAaI,QAAQ,gBAAiBD,IC4I3BE,EAAO,I,iDAvIVC,IAAyEC,SAASC,SAASC,O,gFAEnG,WAAmBC,GAAnB,2FACoBC,MAAM,GAAD,OAAIC,KAAKN,IAAT,kBAA8B,CACnDO,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KANzB,cACQQ,EADR,gBAQqBA,EAAIC,OARzB,UAQQC,EARR,OAUoB,MAAfF,EAAIG,OAVT,yCAUgCnB,EAASkB,EAAKA,KAAKjB,QAVnD,UAYQmB,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAbT,uBAa+B,IAAIQ,MAAMP,GAbzC,WAcoB,MAAfJ,EAAIG,OAdT,uBAc+B,IAAIQ,MAAM,4DAdzC,iD,kHAiBA,WAAoBnB,GAApB,2FACoBC,MAAM,GAAD,OAAIC,KAAKN,IAAT,mBAA+B,CACpDO,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUP,KANzB,cACQQ,EADR,gBAQqBA,EAAIC,OARzB,UAQQC,EARR,OAUoB,MAAfF,EAAIG,OAVT,yCAUgCnB,EAASkB,EAAKA,KAAKjB,QAVnD,UAYQmB,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAbT,uBAa+B,IAAIQ,MAAMP,GAbzC,WAcoB,MAAfJ,EAAIG,OAdT,uBAc+B,IAAIQ,MAAM,4DAdzC,iD,wHAiBA,WAA0BnB,GAA1B,2FACoBC,MAAM,GAAD,OAAIC,KAAKN,IAAT,uBAAmC,CACxDO,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAgB,SAAhB,OAA0Bf,MAE5BgB,KAAMC,KAAKC,UAAUP,KAPzB,cACQQ,EADR,gBASqBA,EAAIC,OATzB,UASQC,EATR,OAWoB,MAAfF,EAAIG,OAXT,yCAWgCD,EAAKA,MAXrC,UAaQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAdT,uBAc+B,IAAIQ,MAAMP,GAdzC,WAeoB,MAAfJ,EAAIG,OAfT,uBAe+B,IAAIQ,MAAM,4DAfzC,iD,sHAkBA,wGACoBlB,MAAM,GAAD,OAAIC,KAAKN,IAAT,uBAAmC,CACxDQ,QAAS,CACP,cAAgB,SAAhB,OAA0Bf,QAHhC,cACQmB,EADR,gBAMqBA,EAAIC,OANzB,UAMQC,EANR,OAQoB,MAAfF,EAAIG,OART,yCAQgCD,EAAKA,MARrC,UAUQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAXT,uBAW+B,IAAIQ,MAAMP,GAXzC,WAYoB,MAAfJ,EAAIG,OAZT,uBAY+B,IAAIQ,MAAM,4DAZzC,iD,6HAeA,wGACoBlB,MAAM,GAAD,OAAIC,KAAKN,IAAT,gCAA4C,CACjEQ,QAAS,CACP,cAAgB,SAAhB,OAA0Bf,QAHhC,cACQmB,EADR,gBAMqBA,EAAIC,OANzB,UAMQC,EANR,OAOoB,MAAfF,EAAIG,OAPT,yCAOgCD,EAAKA,MAPrC,UASQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAVT,uBAU+B,IAAIQ,MAAMP,GAVzC,WAWoB,MAAfJ,EAAIG,OAXT,uBAW+B,IAAIQ,MAAM,4DAXzC,iD,yHAcA,wGACoBlB,MAAM,GAAD,OAAIC,KAAKN,IAAT,oBAAgC,CACrDQ,QAAS,CACP,cAAgB,SAAhB,OAA0Bf,QAHhC,cACQmB,EADR,gBAMqBA,EAAIC,OANzB,UAMQC,EANR,OAQoB,MAAfF,EAAIG,OART,yCAQgCD,EAAKA,MARrC,UAUQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAXT,uBAW+B,IAAIQ,MAAMP,GAXzC,WAYoB,MAAfJ,EAAIG,OAZT,uBAY+B,IAAIQ,MAAM,4DAZzC,iD,wHAeA,WAA2BnB,GAA3B,2FACoBC,MAAM,GAAD,OAAIC,KAAKN,IAAT,oBAAgC,CACrDO,OAAQ,MACRC,QAAS,CACP,cAAgB,SAAhB,OAA0Bf,KAC1B,eAAgB,oBAElBgB,KAAMC,KAAKC,UAAUP,KAPzB,cACQQ,EADR,gBASqBA,EAAIC,OATzB,UASQC,EATR,OAWoB,MAAfF,EAAIG,OAXT,yCAWgCD,EAAKA,MAXrC,UAaQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAdT,uBAc+B,IAAIQ,MAAMP,GAdzC,WAeoB,MAAfJ,EAAIG,OAfT,uBAe+B,IAAIQ,MAAM,4DAfzC,iD,0HAkBA,WAA4BnB,GAA5B,2FACoBC,MAAM,GAAD,OAAIC,KAAKN,IAAT,4BAAwC,CAC7DO,OAAQ,MACRC,QAAS,CACP,cAAgB,SAAhB,OAA0Bf,KAC1B,eAAgB,oBAElBgB,KAAMC,KAAKC,UAAUP,KAPzB,cACQQ,EADR,gBASqBA,EAAIC,OATzB,UASQC,EATR,OAWoB,MAAfF,EAAIG,OAXT,yCAWgCD,EAAKA,MAXrC,UAaQE,EAASC,OAAOC,KAAKJ,EAAKK,QAAQC,KAAI,SAAAC,GAAG,OAAIP,EAAKK,OAAOE,GAAKC,KAAK,QAAM,GAC7D,MAAfV,EAAIG,OAdT,uBAc+B,IAAIQ,MAAMP,GAdzC,WAeoB,MAAfJ,EAAIG,OAfT,uBAe+B,IAAIQ,MAAM,4DAfzC,iD,gGC5HWC,EAAwB,SAAC,GAG/B,IAAD,IAFJC,gBAEI,MAFO,GAEP,MADJC,sBACI,MADa,EACb,IACsCC,mBAAS,CACjDC,UAAW,KACXC,aAAc,KACdC,aAAc,KACdC,eAAgB,KAChBC,eAAgB,KAChBC,QAAS,OAPP,mBACGC,EADH,KACkBC,EADlB,KAsBJ,OAZAC,qBAAU,WACR,IAAMC,EAAa,GACnBA,EAAWT,UAAY,KAAKU,KAAKb,GACjCY,EAAWR,aAAeJ,EAASc,gBAAkBd,EACrDY,EAAWP,aAAeL,EAASe,gBAAkBf,EACrDY,EAAWN,eAAiB,uCAAuCO,KAAKb,GACxEY,EAAWL,eAAiBP,EAASgB,QAAUf,EAC/CW,EAAWJ,QAAUI,EAAWT,WAAaS,EAAWR,cAAgBQ,EAAWP,cAAgBO,EAAWN,gBAAkBM,EAAWL,eAC3IG,EAAiBE,KAChB,CAACZ,EAAUC,IAGPQ,G,kBCfIQ,EAAyB,SAAC,GAMH,IALlCd,EAKiC,EALjCA,UACAC,EAIiC,EAJjCA,aACAC,EAGiC,EAHjCA,aACAC,EAEiC,EAFjCA,eACAC,EACiC,EADjCA,eAEMW,EACG,YADHA,EAEK,WAELC,EACG,WADHA,EAEK,WAEX,OACE,eAAC,IAAD,CAAM3D,SAAU,SAAUC,QAAS,EAAnC,UACE,eAAC,IAAD,CACEG,MAAOuC,EAAYgB,EAAmBA,EACtCtE,QAAQ,OACRuE,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ1D,MAAOuC,EAAYe,EAAmBA,IAP1C,2BAWA,eAAC,IAAD,CACEtD,MAAOwC,EAAee,EAAmBA,EACzCtE,QAAQ,OACRuE,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ1D,MAAOwC,EAAec,EAAmBA,IAP7C,+BAWA,eAAC,IAAD,CACEtD,MAAOyC,EAAec,EAAmBA,EACzCtE,QAAQ,OACRuE,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ1D,MAAOyC,EAAea,EAAmBA,IAP7C,+BAWA,eAAC,IAAD,CACEtD,MAAO0C,EAAiBa,EAAmBA,EAC3CtE,QAAQ,OACRuE,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ1D,MAAO0C,EAAiBY,EAAmBA,IAP/C,mCAWA,eAAC,IAAD,CACEtD,MAAO2C,EAAiBY,EAAmBA,EAC3CtE,QAAQ,OACRuE,WAAW,SAHb,UAKE,cAAC,IAAD,CACEC,GAAIC,IACJ1D,MAAO2C,EAAiBW,EAAmBA,IAP/C,yC,SCzES,MAA0B,wCCA1B,OAA0B,mDCA1B,OAA0B,iDCA1B,OAA0B,kDCcnCK,GAAa,CAAC,CAClBC,MAAO,8BACPC,UAAW,CACT,oCACA,gDACA,sCAGJ,CACED,MAAO,4BACPC,UAAW,CACT,gDACA,uCACA,oCACA,uCC1BSC,GAAe,WAC1B,OACE,gCACE,qCACA,+C,SCIOC,GAAkB,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,OAEzC,OACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAQC,KAAM,OAAd,UACE,cAAC,IAAD,CAAKA,KAAM,CAACC,KAAK,MAAOC,GAAG,OAA3B,SACE,cAAC,IAAD,CAAOC,aAAa,OAAOC,KAAM,OAAQC,IAAKN,MAEhD,eAAC,IAAD,CACEC,KAAM,CAACC,KAAK,MAAOC,GAAG,OACtBI,UAAU,OACV5E,SAAU,CAACuE,KAAK,KAAMC,GAAG,MACzBK,WAAW,SAJb,UAME,cAAC,IAAD,CACEC,aAAa,WACbC,SAAS,SACT/E,SAAU,CAACuE,KAAK,KAAMC,GAAG,OAH3B,SAKGJ,EAASY,WAAa,IAAMZ,EAASa,YAEvCb,EAASc,KACR,eAAC,IAAD,WAAOd,EAASc,IAAhB,OAEDd,EAASnD,UACR,cAAC,IAAD,CAAM6D,aAAa,WAAWC,SAAS,SAAvC,SACGX,EAASnD,WAGd,cAAC,IAAD,CAAM6D,aAAa,WAAWC,SAAS,SAAvC,SACGX,EAASe,iBCxCP,OAA0B,6C,mBCM5BC,GAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEtBC,aAAc,eAAD,OAAgBC,WAAMC,YAAYhB,KAA3DiB,EAFkC,oBAIzC,OACE,cAAC,IAAD,CACEC,EAAE,OACFC,EAAE,OACFrB,KAAK,OACLsB,EAAG,OACHC,cAAc,SACdC,SAAU,EACVC,GAAG,IAPL,SASE,cAAC,IAAD,CACEC,UAAU,qBACVJ,EAAE,OACFC,cAAc,SACdI,SAAS,WACTC,GAAG,MACHC,GAAG,IACHJ,GAAG,MACHK,GAAI,CACF,UAAU,CACRC,gBAAiB5G,YAAkB,cAAc,eACjD6G,QAAQ,KACRL,SAAU,WACVM,KAAK,GAAD,OAAKd,EAAU,SAAU,qBAC7Be,MAAO,OACPC,OAAQ,SAfd,SAmBGpB,OChCIqB,GAAe,SAAC,GAAiF,IAAhFC,EAA+E,EAA/EA,eAAgBC,EAA+D,EAA/DA,kBAAmBC,EAA4C,EAA5CA,qBAA4C,EACxFvB,aAAc,eAAD,OAAgBC,WAAMC,YAAYhB,KAA3DiB,EADoG,oBAE3G,OACE,cAAC,IAAD,CACEO,UAAU,gBACVC,SAAS,WACTL,EAAE,OACFkB,eAAe,WACfC,aAAY,UAAKtB,EAAU,QAAQ,OACnCuB,YAAW,UAAKvB,EAAU,MAAM,SAChCwB,EAAE,SACFT,MAAK,UAAKf,EAAU,OAAO,OAC3BW,GAAI,CACF,oBAAqB,CACnBc,UAAW,WACXJ,eAAgB,aAChBE,YAAa,MACbD,aAAc,KAEhB,2CAA2C,CACzCnC,UAAW,OACXhB,WAAW,cAEb,kDAAkD,CAChDuD,MAAO,OACPZ,KAAM,SAER,mDAAmD,CACjDY,MAAO,OACPZ,KAAM,WA1BZ,SA8BE,eAAC,IAAD,CACE3C,WAAW,WACXwD,EAAE,MACFnH,QAAQ,IACR+F,UAAU,wBACVqB,UAAU,KACVC,QAAQ,KACRC,GAAI9H,YAAkB,QAAS,YAC/BiG,EAAE,OACFd,UAAWa,EAAU,OAAO,QAC5BQ,SAAS,WACTG,GAAI,CACF,UAAU,CACRE,QAAQ,MACRD,gBAAiB5G,YAAkB,QAAS,YAC5CwG,SAAU,WACVuB,IAAK,oBACLL,MAAM,GAAD,OAAK1B,EAAU,QAAQ,UAC5Bc,KAAK,GAAD,OAAKd,EAAU,QAAQ,SAC3BgC,UAAW,gBACXjB,MAAO,MACPC,OAAQ,QArBd,UAyBE,cAAC,IAAD,CACEiB,aAAW,EACXC,UAAW,EACX9C,WAAW,SACX7E,SAAS,KACT4H,WAAW,SACXlC,EAAE,OANJ,SAQGiB,IAEH,cAAC,IAAD,CACEM,EAAG,IACHS,aAAW,EACXC,UAAW,EACX9C,WAAW,SACX7E,SAAS,KACT4H,WAAW,SACXhD,UAAU,QACVc,EAAE,OARJ,SAUGkB,IAEFC,GACD,cAAC,IAAD,CACEa,aAAW,EACXC,UAAW,EACX9C,WAAW,SACX7E,SAAS,KACT4H,WAAW,SACXhD,UAAU,OACVc,EAAE,OAPJ,SASGmB,IAGH,cAAC,IAAD,CAAKhD,GAAG,OACNmC,UAAU,SACVuB,GAAI9H,YAAkB,cAAc,eACpCgF,aAAa,MACbwB,SAAS,WACTuB,IAAI,mBACJ9B,EAAE,MACFC,EAAE,MACFwB,MAAK,UAAM1B,EAAU,QAAQ,UAC7Bc,KAAI,UAAKd,EAAU,SAAS,SAC5BoC,OAAO,Y,UCzGJC,GAAY,WACvB,OACI,cAAC,IAAD,CACEP,GAAI9H,YAAkB,cAAe,eACrC6H,QAAQ,MACRS,OAAO,UACPC,OAAQ,CACNT,GAAG9H,YAAkB,cAAe,gBALxC,SAQE,cAACwI,GAAA,EAAD,CACEvC,EAAE,MACFC,EAAE,MACFyB,EAAE,OACFhH,MAAM,a,oBCnBH8H,GAAc,SAACC,GAE1B,OAD0BC,KAAKC,MAAMF,GACVC,KAAKE,OCkBrBC,GAAmB,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,OAAQC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,mBAA4C,EACpDC,cAAnCC,EADuF,EACvFA,SAAUC,EAD6E,EAC7EA,aAAc3G,EAD+D,EAC/DA,OAEhC,OACE,cAAC,IAAD,UACE,uBAAM4G,GAAIN,EAAQC,SAAUI,EAAaJ,GAAzC,UACE,eAAC,IAAD,CACEM,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOgH,MAH5B,UAIE,cAAC,IAAD,CAAWC,QAAQ,OAAnB,oBACA,cAAC,IAAD,CACED,KAAK,OACLE,KAAK,OACLC,aAAa,KACbC,YAAY,kBACZC,IAAKX,EAAS,CAACY,SAAU,+BAE3B,cAAC,IAAD,UACGtH,EAAOgH,MAAQhH,EAAOgH,KAAKO,aAGhC,eAAC,IAAD,CAAatD,GAAG,IAAI6C,UAAWC,QAAQ/G,EAAOwH,aAA9C,UACE,cAAC,IAAD,CAAWP,QAAQ,cAAnB,yBACA,cAAC,KAAD,CACED,KAAK,cACLI,YAAY,oCACZC,IAAKX,IACL1I,KAAK,UAGT,eAAC,IAAD,CACE6I,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOyH,oBAH5B,UAIE,cAAC,IAAD,CAAWR,QAAQ,qBAAnB,kCACA,cAAC,KAAD,CACED,KAAK,qBACLK,IAAKX,IAFP,SAGGF,EAAmBvG,KAAI,SAAAyH,GAAC,OAAI,wBAAmBzB,MAAOyB,EAAEd,GAA5B,SAAiCc,EAAEV,MAAtBU,EAAEd,YAGhD,eAAC,IAAD,CACEC,YAAU,EACV5C,GAAG,IACH6C,UAAWC,QAAQ/G,EAAO0E,mBAH5B,UAIE,cAAC,IAAD,CAAWuC,QAAQ,oBAAnB,qCACA,cAAC,IAAD,CACED,KAAK,oBACLE,KAAK,OACLC,aAAa,KACbE,IAAKX,EAAS,CACZY,SAAU,0BACVK,SAAU,SAAA1B,GAAK,OAAID,GAAYC,IAAU,gCAE7C,cAAC,IAAD,UACGjG,EAAO0E,mBAAqB1E,EAAO0E,kBAAkB6C,mB,uCC5ErDK,GACF,MADEA,GAEJ,MAGIC,GACL,IADKA,GAEH,IAFGA,GAGJ,IAHIA,GAII,ICUJC,GAAqB,SAAC,GAA4C,IAA3CxB,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,SAAkC,EACjCE,cAAnCC,EADoE,EACpEA,SAAUC,EAD0D,EAC1DA,aAAc3G,EAD4C,EAC5CA,OAD4C,EAE9BQ,oBAAkB,GAFY,mBAErEuH,EAFqE,KAEpDC,EAFoD,OAG5CxH,mBAAiB,IAH2B,mBAGrEF,EAHqE,KAG3D2H,EAH2D,OAWvD5H,EAAsB,CAAEC,aAL3CQ,EAN0E,EAM1EA,QACAD,EAP0E,EAO1EA,eACAJ,EAR0E,EAQ1EA,UACAC,EAT0E,EAS1EA,aACAC,EAV0E,EAU1EA,aACAC,EAX0E,EAW1EA,eAOF,OACE,cAAC,IAAD,UACE,uBAAMgG,GAAIN,EAAQC,SAAUI,EAAaJ,GAAzC,UACA,eAAC,IAAD,CACEtC,GAAG,IACH6C,UAAWC,QAAQgB,GAAmBjH,EAAU,MAFlD,UAGE,cAAC,IAAD,CAAWmG,QAAQ,YAAnB,2BACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,uBACZnB,MAAO3F,EACP4H,SAlBqB,SAACC,GAC5BF,EAAYE,EAAEC,OAAOnC,OACrB+B,GAAmB,IAiBbX,IAAKX,EAAS,CAAEY,UAAU,IAC1BrD,GAAI,KAEJnD,GAAW,cAAC,EAAD,CACXL,UAAWA,EACXE,aAAcA,EACdD,aAAcA,EACdE,eAAgBA,EAChBC,eAAgBA,OAGpB,eAAC,IAAD,CACEoD,GAAI,EACJ6C,UAAWC,QAAQ/G,EAAOqI,WAF5B,UAGE,cAAC,IAAD,CAAWpB,QAAQ,YAAnB,qCAGA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,wBACZkB,QAAS,SAAAH,GAAC,OAAIA,EAAEI,kBAChBlB,IAAKX,EAAS,CACZY,SAAU,4CACVK,SAAU,SAAC1B,GAAD,OAAmBA,IAAU3F,GAAY,uCAGvD,cAAC,IAAD,UACGN,EAAOqI,WAAarI,EAAOqI,UAAUd,mBCnE1CiB,GAA0C,CAC9CC,YAAa,CAAEC,KAAM,YAAaC,UCcL,WAAO,IAAD,EACHnI,mBAA0B,CACxDsC,WAAY,GACZC,UAAW,GACXC,IAAK,GACLC,MAAO,GACP2F,IAAK,GACL1B,KAAM,CAAC,MAP0B,mBAC5BhF,EAD4B,KAClB2G,EADkB,OAUCC,cAA5BC,EAV2B,EAU3BA,OAAQC,EAVmB,EAUnBA,OAAQC,EAVW,EAUXA,QAVW,EAYgBzI,mBAAkC,IAZlD,mBAY5BgG,EAZ4B,KAYR0C,EAZQ,OAcC1I,mBAA0B,IAd3B,mBAc5B2I,EAd4B,KAchBC,EAdgB,KAgB7BC,EAAQC,cACRC,EAAgBC,YAAmB,CAACnH,KAAK,MAAOC,GAAG,cAiBnDmH,EAAU,SAAC9J,GACK,oBAAjBA,EAAK4H,UAA+B5H,EAAK4H,QAAU,2DACtD8B,EAAM,CACJvH,MAAO,OACP0F,YAAa7H,EAAK4H,QAClB3H,OAAQ,QACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,KAIEK,EAAuBC,YAAY,gBAAgB,SAAChK,GAAD,OAA0BjB,EAAKkL,aAAajK,KAAS,CAACkK,UA3B3F,SAACpK,GAC7B,IAAMqK,EAAK,uBAAOb,GAAP,CAAmBxJ,IAC9BqK,EAAMC,MAAK,SAACvC,EAAGwC,GAAJ,OAAUxC,EAAEhD,kBAAoBwF,EAAExF,kBAAoB,GAAK,KACtE0E,EAAcY,GACdf,IACAI,EAAM,CACJvH,MAAO,sBACP0F,YAAa,mEACb5H,OAAQ,UACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,KAgB6IE,YAAnJU,OAmBR,OAbAC,aAAS,cAAc,kBAAMxL,EAAKuK,eAAc,CAC9CY,UAAW,SAACpK,GAAD,OAA0ByJ,EAAczJ,IACnD8J,YAEFW,aAAS,WAAW,kBAAMxL,EAAKyL,mBAAkB,CAC/CN,UAAW,SAACpK,GAAD,OAA0BkJ,EAAYlJ,IACjD8J,YAEFW,aAAS,uBAAuB,kBAAMxL,EAAK4H,uBAAsB,CAC/DuD,UAAW,SAACpK,GAAD,OAAkCuJ,EAAqBvJ,IAClE8J,YAIA,qCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAM3L,SAAS,MAAf,gCACA,cAAC,GAAD,CAAiBoE,SAAUA,EAAUC,OAAQA,KAC7C,cAAC,IAAD,CACEqB,EAAE,OACFpB,KAAM,CAACC,KAAM,OAAQC,GAAI,OAF3B,SAIE,cAAC,GAAD,UACG6G,EAAWlJ,KAAI,SAAAqK,GAAS,OACvB,cAAC,GAAD,CAEE7F,eAAgB6F,EAAUtD,KAC1BtC,kBAAmB4F,EAAU5F,kBAC7BC,qBAAsB2F,EAAU9C,aAH3B8C,EAAU1D,cAUzB,cAAC,KAAD,CACE2D,UAAWf,YAAmB,CAACnH,KAAM,SAAUmI,GAAI,UACnDzB,OAAQA,EACRE,QAASA,EAHX,SAII,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,IACA,cAAC,KAAD,CAAcwB,kBAAkB,MAAhC,gCAIA,cAAC,KAAD,UACE,cAAC,GAAD,CACElE,SApDC,SAAC1G,GAChB+J,EAAmB/J,IAoDLyG,OAAO,iBACPE,mBAAoBA,MAGxB,cAAC,KAAD,UACE,cAAC,IAAD,CACEU,KAAK,SACLwD,KAAK,iBACLC,SAAU,cAAC5E,GAAA,EAAD,IACV6E,YAAY,UAJd,gCASV,cAAC,IAAD,CACEzN,QAAQ,eACR0N,GAAG,OACHC,GAAG,OACH7G,GAAG,OACHF,SAAS,SACTgH,OAAO,OACPlN,QAASmL,EAPX,SASE,cAAC,GAAD,YDvIFgC,GAAyC,CAC7CC,cAAe,CAAEvC,KAAM,eAAgBC,UEhBR,WAC7B,OACI,8BACI,oDFcVuC,eAAgB,CAAExC,KAAM,gBAAiBC,UAAW3G,KAGhDmJ,GAA0C,CAC9CC,QAAS,CAAE1C,KAAM,IAAKC,UXUD,WAEvB,IAAM0C,EAAe7B,YAAmB,CAAEnH,KAAMiJ,GAAsBhJ,GAAIiJ,KAExE,OACE,cAAC,IAAD,CACE/H,EAAE,QACFC,EAAE,OACFrB,KAAK,MACLsB,EAAG,OACHE,SAAU,EACV4H,GAAI,CAACnJ,KAAK,MAAOC,GAAG,OANtB,SAQE,cAAC,IAAD,CACEsB,SAAU,EACV6H,MAAO,aACP7N,QAAS,SACT8N,GAAI,GACJlI,EAAG,OALL,SAOE,eAAC,IAAD,CAAQiI,MAAM,UAAU1N,QAAS,CAACsE,KAAM,MAAOC,GAAG,QAASkB,EAAG,OAA9D,UAEE,eAAC,IAAD,CAAQA,EAAG,OAAQoB,eAAe,SAAS7G,QAAS,MAApD,UACE,cAAC,IAAD,CAAMyF,EAAG,MAAOpB,KAAK,OAAOqJ,MAAM,SAAlC,SACE,cAAC,IAAD,CAAOhJ,IAAK4I,EAAcM,IAAK,cAEjC,eAAC,IAAD,CAAKnI,EAAG,MAAOpB,KAAM,CAACwJ,GAAG,KAAMtJ,GAAG,KAAMuJ,GAAG,MAAOJ,MAAM,SAAxD,UACI,cAAC,IAAD,CAAS9J,GAAG,KACVe,UAAU,OACVuB,GAAI,CAAC5B,KAAK,MAAOmI,GAAG,OACpB1M,SAAU,CAACuE,KAAK,MAAOC,GAAG,MAAOkI,GAAG,OACpCtM,MAAOX,YAAkB,cAAe,SAJ1C,qBAQF,cAAC,IAAD,CAAMO,SAAU,CAAC,KAAM,MAAO,MAAO,OAAQmG,GAAI,MAAOvB,UAAU,OAAOgD,WAAW,SAApF,0EAGA,cAAC,IAAD,CAAKhD,UAAU,SAASc,EAAG,CAAC,MAAO,OAAnC,SACE,cAAC,IAAD,CAAMsI,GAAIC,GAAOC,OAAOtD,KAAxB,SACE,cAAC,IAAD,CAAQ1K,KAAM,KAAMiO,aAAW,EAACrB,YAAa,UAA7C,8BAQR,eAAC,IAAD,CAAQpH,EAAG,OAAQoB,eAAe,SAAS7G,QAAS,CAACsE,KAAK,MAAOC,GAAG,OAApE,UACE,cAAC,IAAD,CAAMkB,EAAG,CAACnB,KAAK,KAAMC,GAAG,MAAOmJ,MAAM,SAArC,SACE,cAAC,IAAD,CAAOhJ,IAAKyJ,EAAaP,IAAK,cAEhC,cAAC,IAAD,CAAKvJ,KAAM,CAACC,KAAK,KAAMC,GAAG,MAAOmJ,MAAM,SAAvC,SACE,cAAC,IAAD,CAAM3N,SAAU,CAAC,KAAM,MAAO,MAAO,OAAQ4E,UAAU,OAAOgD,WAAW,SAAzE,mGAMJ,eAAC,IAAD,WACA,eAAC,IAAD,CAAM5H,SAAU,CAAC,MAAO,MAAO,MAAO,OAAQmG,GAAI,MAAOvB,UAAU,SAASgD,WAAW,SAAvF,UACC,cAAC,IAAD,CAAM/D,GAAI,OAAQzD,MAAOX,YAAkB,cAAe,SAA1D,qBADD,yCAGA,eAAC,IAAD,CAAOqH,eAAe,SAASlD,WAAW,SAAS/D,UAAW,CAAC0E,KAAK,iBAAkBC,GAAG,OAAzF,UACE,cAAC,IAAD,CAAOF,KAAM,OAAQqJ,MAAM,SAAS/I,UAAU,OAA9C,SACGb,GAAW5B,KAAI,SAACkM,EAAKC,GAAN,OAAY,gCAC1B,cAAC,IAAD,CAAmC1G,WAAW,SAAS5H,SAAS,KAAKmG,GAAI,MAAzE,SAAiFkI,EAAKrK,OAA3E,YAAYqK,EAAKrK,OAC5B,cAAC,IAAD,CAAsC/D,QAAS,EAAGkG,GAAI,QAAtD,SACCkI,EAAKpK,UAAU9B,KAAI,SAACoM,EAAMC,GAAP,OAAgB,8BAClC,eAAC,IAAD,WACE,cAAC,IAAD,CAAU3K,GAAIC,IAAW1D,MAAO,gBAC7BmO,MAHuCF,EAAKrK,MAAMwK,EAAKD,OADnD,cAAcF,EAAKrK,SAFMsK,EAAED,EAAKrK,YAY/C,cAAC,IAAD,CAAK0B,EAAG,OAAQpB,KAAM,CAACC,KAAK,OAAQmI,GAAG,QAASiB,MAAM,SAAtD,SACE,cAAC,IAAD,CAAOhJ,IAAK8J,GAAuB/I,EAAE,MAAMmI,IAAK,UAAW1H,GAAI,gBAKnE,cAAC,IAAD,CAAKP,EAAG,OAAQkB,eAAe,SAASpB,EAAG,OAA3C,SACE,cAAC,IAAD,CAAKd,UAAU,SAASc,EAAE,KAA1B,SACE,cAAC,IAAD,CAAMsI,GAAIC,GAAOC,OAAOtD,KAAxB,SACE,cAAC,IAAD,CAAQ1K,KAAM,KAAMiO,aAAW,EAACrB,YAAa,UAA7C,mCW/Fd4B,MAAO,CAAE9D,KAAM,SAAUC,UGGF,WACvB,IAAM8D,EAAUC,cAEVrD,EAAQC,cACRC,EAAgBC,YAAmB,CAACnH,KAAK,MAAOC,GAAG,cAJ5B,EAKcmE,cAAnCC,EALqB,EAKrBA,SAAUC,EALW,EAKXA,aAAc3G,EALH,EAKGA,OAkBxBmK,EAAWN,YAAY,SAAS,SAAChK,GAAD,OAAsBjB,EAAK4N,MAAM3M,KAAS,CAACkK,UAhBjE,WAChB0C,EAAQE,KAAKZ,GAAOtD,YAAYC,OAe4De,QAZ9E,SAAC9J,GACK,oBAAjBA,EAAK4H,UAA+B5H,EAAK4H,QAAU,2DACtD8B,EAAM,CACJvH,MAAO,OACP0F,YAAa7H,EAAK4H,QAClB3H,OAAQ,QACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,OAINY,OAMR,OACE,cAAC,IAAD,CACEvG,SAAU,EACVH,EAAG,OACHgI,MAAO,SACP7N,QAAS,SACTyH,GAAI9H,YAAkB,WAAY,YALpC,SAOE,eAAC,IAAD,CAAOkO,MAAO,SAAU1N,QAAS,EAAGyN,GAAI,OAAQpJ,KAAM,KAAMsJ,GAAI,GAAIkB,GAAI,EAAxE,UACE,cAAC,IAAD,CAAS9O,SAAU,MAAnB,+BACA,eAAC,IAAD,CACEoH,EAAG,EACHG,GAAI9H,YAAkB,QAAS,YAC/BsP,KAAK,KACLzH,QAAS,KACTD,UAAW,KALb,UAQE,uBAAMoB,SAAUI,GAtBP,SAAC9G,GAChBsK,EAAOtK,MAqBD,UACE,eAAC,IAAD,CACEoE,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOiD,OAF5B,UAGE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACLC,aAAa,KACbC,YAAY,oBACZC,IAAKX,EAAS,CACZY,SAAU,0CACVwF,QAAS,CACP7G,MAAO,4CACPsB,QAAS,kDAIf,cAAC,IAAD,UACGvH,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GAAG,IACH6C,UAAWC,QAAQ/G,EAAOM,UAF5B,UAGE,cAAC,IAAD,CAAW2G,QAAQ,WAAnB,2BACA,cAAC,IAAD,CACED,KAAK,WACLE,KAAK,WACLC,aAAa,MACbE,IAAKX,EAAS,CAAEY,UAAU,SAG9B,cAAC,IAAD,CAAOvJ,QAAS,EAAhB,SACE,cAAC,IAAD,CAAQmJ,KAAK,SAAb,yBAGJ,cAAC,IAAD,CAASlD,GAAI,IACb,cAAC,IAAD,CAAKtB,UAAW,SAAhB,SACE,cAAC,IAAD,CACEf,GAAIoL,IACJjB,GAAIC,GAAOC,OAAOtD,KAFpB,SAGI,cAAC,IAAD,CAAMxK,MAAOX,YAAkB,cAAe,eAA9C,kDH5FdyO,OAAQ,CAAEtD,KAAM,UAAWC,UIEH,WACxB,IAAM8D,EAAUC,cAEVrD,EAAQC,cACRC,EAAgBC,YAAmB,CAACnH,KAAK,MAAOC,GAAG,cAJ3B,EAKamE,cAAnCC,EALsB,EAKtBA,SAAUC,EALY,EAKZA,aAAc3G,EALF,EAKEA,OAkBxBmK,EAAWN,YAAY,UAAU,SAAChK,GAAD,OAAuBjB,EAAKoN,OAAOnM,KAAS,CAACkK,UAhBpE,WAChB0C,EAAQE,KAAKZ,GAAOtD,YAAYC,OAe+De,QAZjF,SAAC9J,GACK,oBAAjBA,EAAK4H,UAA+B5H,EAAK4H,QAAU,2DACtD8B,EAAM,CACJvH,MAAO,OACP0F,YAAa7H,EAAK4H,QAClB3H,OAAQ,QACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,OAINY,OAvBsB,EA6BE3J,mBAAiB,IA7BnB,mBA6BvBF,EA7BuB,KA6Bb2H,EA7Ba,OA+BgBzH,oBAAkB,GA/BlC,mBA+BvBuH,EA/BuB,KA+BNC,EA/BM,OAuCT3H,EAAsB,CAAEC,aAL3CQ,EAlC4B,EAkC5BA,QACAD,EAnC4B,EAmC5BA,eACAJ,EApC4B,EAoC5BA,UACAC,EArC4B,EAqC5BA,aACAC,EAtC4B,EAsC5BA,aACAC,EAvC4B,EAuC5BA,eASF,OACE,cAAC,IAAD,CACE4C,EAAE,OACFC,EAAE,OACFrB,KAAK,OACLsB,EAAG,OACHE,SAAU,EALZ,SAOE,cAAC,IAAD,CACEA,SAAU,EACV6H,MAAO,SACP7N,QAAS,SAHX,SAIE,eAAC,IAAD,CACEG,QAAS,EACTqE,KAAM,KACNsJ,GAAI,GACJkB,GAAI,EAJN,UAKE,cAAC,IAAD,CAAOnB,MAAO,SAAd,SACE,cAAC,IAAD,CAAS3N,SAAU,MAAnB,2BAEF,cAAC,IAAD,CACEsH,QAAS,KACTyH,KAAM,KACNxH,GAAI9H,YAAkB,QAAS,YAC/B4H,UAAW,KACXD,EAAG,EALL,SAOE,uBAAMqB,SAAUI,GAlDT,SAAC9G,GAChBsK,EAAOtK,MAiDC,UACE,eAAC,IAAD,CACEoE,GA/BH,EAgCG6C,UAAWC,QAAQ/G,EAAO8C,YAF5B,UAGE,cAAC,IAAD,CAAWmE,QAAQ,aAAnB,oBACA,cAAC,IAAD,CACED,KAAK,aACLE,KAAK,OACLC,aAAa,KACbC,YAAY,OACZC,IAAKX,EAAS,CAAEY,SAAU,+BAE5B,cAAC,IAAD,UACGtH,EAAO8C,YAAc9C,EAAO8C,WAAWyE,aAI5C,eAAC,IAAD,CACEtD,GA/CH,EAgDG6C,UAAWC,QAAQ/G,EAAO+C,WAF5B,UAGE,cAAC,IAAD,CAAWkE,QAAQ,YAAnB,sBACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,OACLC,aAAa,KACbC,YAAY,WACZC,IAAKX,EAAS,CAAEY,SAAU,iCAE5B,cAAC,IAAD,UACGtH,EAAO+C,WAAa/C,EAAO+C,UAAUwE,aAI1C,eAAC,IAAD,CACEtD,GA/DH,EAgEG6C,UAAWC,QAAQ/G,EAAOiD,OAF5B,UAGE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACLC,aAAa,KACbC,YAAY,oBACZC,IAAKX,EAAS,CACZY,SAAU,0CACVwF,QAAS,CACP7G,MAAO,4CACPsB,QAAS,kDAIf,cAAC,IAAD,UACGvH,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GArFH,EAsFG6C,UAAWC,QAAQgB,GAAmBjH,EAAU,MAFlD,UAGE,cAAC,IAAD,CAAWmG,QAAQ,YAAnB,2BACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,uBACZnB,MAAO3F,EACP4H,SAnGa,SAACC,GAC5BF,EAAYE,EAAEC,OAAOnC,OACrB+B,GAAmB,IAkGLX,IAAKX,EAAS,CAAEY,UAAU,IAC1BrD,GAAI+I,KAEJlM,GAAW,cAAC,EAAD,CACXL,UAAWA,EACXE,aAAcA,EACdD,aAAcA,EACdE,eAAgBA,EAChBC,eAAgBA,OAGpB,eAAC,IAAD,CACEoD,GA3GH,EA4GG6C,UAAWC,QAAQ/G,EAAOqI,WAF5B,UAGE,cAAC,IAAD,CAAWpB,QAAQ,YAAnB,qCAGA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,WACLC,aAAa,MACbC,YAAY,wBACZkB,QAAS,SAAAH,GAAC,OAAIA,EAAEI,kBAChBlB,IAAKX,EAAS,CACZY,SAAU,4CACVK,SAAU,SAAC1B,GAAD,OAAmBA,IAAU3F,GAAY,uCAGvD,cAAC,IAAD,UACGN,EAAOqI,WAAarI,EAAOqI,UAAUd,aAI1C,cAAC,IAAD,CACE1J,QAAS,SAAAoP,GAAC,OAAIjF,GAAmB,IACjCd,KAAK,SAFP,4BAOJ,cAAC,IAAD,CAAK/J,QAAQ,OAAOyH,eAAe,SAAnC,SACE,cAAC,IAAD,CAAYjD,GAAIoL,IAAMjB,GAAIC,GAAOS,MAAM9D,KAAvC,4DJvLVwE,QAAS,CAACxE,KAAM,WAAYC,UKgBH,WAAO,IAAD,EAEGnI,oBAAS,GAFZ,mBAExB2M,EAFwB,KAEbC,EAFa,OAGe5M,mBAAwC,CAAC,CAACoG,GAAG,EAAEX,MAAM,MAHpE,mBAGxBoH,EAHwB,KAGPC,EAHO,OAIyB9M,mBAAS,GAJlC,mBAIxB+M,EAJwB,KAIFC,EAJE,OAKOhN,mBAAS,CAAC,KALjB,mBAKxBiN,EALwB,KAKXC,EALW,KAMzBnE,EAAgBC,YAAmB,CAACnH,KAAK,MAAOC,GAAG,cACnD+G,EAAQC,cAPiB,EAQP9I,mBAA0B,CAChDsC,WAAY,GACZC,UAAW,GACXC,IAAK,GACLC,MAAO,GACP2F,IAAK,GACL1B,KAAM,CAAC,MAdsB,mBAQxBvH,EARwB,KAQlBgO,EARkB,OAiBK7E,cAA5BC,EAjBuB,EAiBvBA,OAAQC,EAjBe,EAiBfA,OAAQC,EAjBO,EAiBPA,QAjBO,EAkBsBxC,cAA7CC,EAlBuB,EAkBvBA,SAAUC,EAlBa,EAkBbA,aAAc3G,EAlBD,EAkBCA,OAAQ4N,EAlBT,EAkBSA,SAElCnE,GAAU,SAAC9J,GACK,oBAAjBA,EAAK4H,UAA+B5H,EAAK4H,QAAU,2DACtD8B,EAAM,CACJvH,MAAO,OACP0F,YAAa7H,EAAK4H,QAClB3H,OAAQ,QACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,KAIRsE,GAAKC,uBAAY,SAACb,EAAGtN,GAEzB,IAWMuC,EAAWvC,EACVoO,EAAkB7L,EAAlB6L,QAASC,EAAS9L,EAAT8L,MAChBJ,EAAS,MAAO1L,EAAS0G,KACzB+E,EAAQzL,GAEJA,EAASgF,KAAK+G,SAASrG,MACzBlB,EAAS,qBACT4G,EAlBkC,WAAgC,IAA/BY,EAA8B,uDAAT,CAAC,IACpDA,GAAkC,IAArBA,EAAU5M,SAAc4M,EAAY,CAAC,KAEvD,IAAIC,EAAkBZ,EAChB9N,EAAMyO,EAAUjO,KAAI,SAAAmO,GAAO,MAAK,CACpCxH,GAAIuH,IACJlI,MAAOmI,MAGT,OADAZ,EAAwBW,GACjB1O,EASY4O,CAA4BN,GAAWA,EAAQG,aAEhEhM,EAASgF,KAAK+G,SAASrG,MACzBlB,EAAS,qBACTkH,EAAS,oBAAqBI,EAAOA,EAAMP,YAAc,CAAC,KAC1DC,EAAeM,EAAOA,EAAMP,YAAc,CAAC,MAE7CL,GAAa,KAEb,CAACQ,EAAUlH,IAEb0D,aAAS,WAAW,kBAAMxL,EAAKyL,mBAAkB,CAC/CN,UAAW,SAACpK,GAAD,OAA0BkO,GAAG,KAAMlO,IAC9C8J,WACA6E,UAAW,kBAAMlB,GAAa,MAlED,IAqEvBjD,GAAWN,YAAY,iBAAiB,SAAChK,GAAD,OAA4BjB,EAAK2P,cAAc1O,KAAS,CACtGkK,UAAW,WACTV,EAAM,CACJ7B,YAAa,qDACb5H,OAAQ,UACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,KAGdE,WACA6E,UAAW,kBAAMlB,GAAa,MAXxBjD,OAcQqE,GAAmB3E,YAAY,kBAAkB,SAAChK,GAAD,OAA+BjB,EAAK6P,eAAe5O,KAAS,CAC3HkK,UAAW,YAA+B,IAA5BrL,EAA2B,EAA3BA,MACZD,EAASC,GACTuK,IACAI,EAAM,CACJvH,MAAO,4BACP0F,YAAa,uIACb5H,OAAQ,UACR8J,SAAU,IACVC,YAAY,EACZ5F,SAAUwF,KAGdE,WACA6E,UAAW,kBAAMlB,GAAa,MAdxBjD,OAyDFuE,GAAc,kBAClB,cAAC,IAAD,CACErJ,GAAI,eACJ9C,aAAc,MACdiB,EAAE,MACFC,EAAE,MACF+H,GAAG,UAIP,OACE,eAAC,IAAD,CACAhI,EAAE,QACFC,EAAE,OACFrB,KAAK,MACLsB,EAAG,OACHE,SAAU,EACV4H,GAAI,CAACnJ,KAAK,MAAOC,GAAG,OANpB,UAQE,cAAC,KAAD,CACEiI,UAAWf,YAAmB,CAACnH,KAAM,SAAUmI,GAAI,UACnDzB,OAAQA,EACRE,QAASA,EAHX,SAKE,cAAC,KAAD,UACE,eAAC,KAAD,WACE,cAAC,KAAD,IACA,cAAC,KAAD,uCAIA,cAAC,KAAD,UACE,cAAC,GAAD,CAAoB3C,OAAO,uBAAuBC,SApCrC,SAAC1G,GACxB2O,GAAe3O,QAsCP,cAAC,KAAD,UACE,cAAC,IAAD,CACEqH,KAAK,SACLwD,KAAK,uBACLE,YAAY,UAHd,4CASV,cAAC,IAAD,CACEhH,SAAU,EACV6H,MAAO,aACP7N,QAAS,SACT8N,GAAI,GACJlI,EAAG,OALL,SAOA,eAAC,IAAD,CAAQA,EAAG,OAAQS,GAAI,GAAvB,UACE,cAAC,IAAD,CAASnG,SAAU,MAAnB,2BACA,cAAC,IAAD,CAAO0F,EAAG,OAAQiI,MAAO,SAAzB,SACE,cAAC,KAAD,CAAQhJ,IAAKN,GAAQnE,KAAK,MAAMiG,GAAI,EAApC,SACE,cAAC,KAAD,CACE0K,QAAQ,OACRC,YAAY,cACZvJ,GAAG,QACHS,OAAQ,CAAC5H,MAAM,YAJjB,SAKE,cAAC,IAAD,UAIN,cAAC,IAAD,CACEkH,QAAS,KACTyH,KAAM,CAACxK,KAAK,KAAMC,GAAI,MACtB+C,GAAI9H,YAAkB,QAAS,YAC/B4H,UAAW,KACXD,EAAG,EALL,SAQE,uBAAMqB,SAAUI,GAjHL,SAAC9G,GAChBuN,GAAa,GACTzN,EAAKuH,KAAK+G,SAASrG,KACrB/H,EAAOkO,UAAYlO,EAAOkO,QAAQG,UAAYb,EAAgBpN,KAAI,SAAAyH,GAAC,OAAIA,EAAEzB,SAAO4I,QAAO,SAAA3E,GAAC,MAAU,KAANA,MAE9FC,GAAOtK,MA4GH,UACE,eAAC,IAAD,CACEoE,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAO8C,YAH5B,UAIE,cAAC,IAAD,CAAWmE,QAAQ,aAAnB,uBACA,cAAC,IAAD,CACED,KAAK,aACLE,KAAK,OACLC,aAAa,KACbC,YAAY,OACZ0H,aAAcnP,EAAKmD,WACnBuE,IAAKX,EAAS,CAAEY,SAAU,+BAE5B,cAAC,IAAD,UACGtH,EAAO8C,YAAc9C,EAAO8C,WAAWyE,aAI5C,eAAC,IAAD,CACEtD,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAO+C,WAH5B,UAIE,cAAC,IAAD,CAAWkE,QAAQ,YAAnB,uBACA,cAAC,IAAD,CACED,KAAK,YACLE,KAAK,OACLC,aAAa,KACbC,YAAY,WACZ0H,aAAcnP,EAAKoD,UACnBsE,IAAKX,EAAS,CAAEY,SAAU,iCAE5B,cAAC,IAAD,UACGtH,EAAO+C,WAAa/C,EAAO+C,UAAUwE,aAI1C,eAAC,IAAD,CACEtD,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAOiD,OAH5B,UAIE,cAAC,IAAD,CAAWgE,QAAQ,QAAnB,oBACA,cAAC,IAAD,CACED,KAAK,QACLE,KAAK,QACL6H,UAAU,EACV3H,YAAY,oBACZnB,MAAOtG,EAAKsD,MACZoE,IAAKX,IAGP,cAAC,IAAD,UACG1G,EAAOiD,OAASjD,EAAOiD,MAAMsE,aAIlC,eAAC,IAAD,CACEtD,GAAI,EADN,UAEE,cAAC,IAAD,4BACA,cAAC,IAAD,CAAQpG,QAASmL,EAAQ/K,QAAQ,OAAO2M,YAAY,UAApD,sCAGF,eAAC,IAAD,CACE3G,GAAI,EACJ4C,YAAU,EACVC,UAAWC,QAAQ/G,EAAOgD,KAH5B,UAIE,cAAC,IAAD,CAAWiE,QAAQ,MAAnB,iCACA,cAAC,IAAD,CACED,KAAK,MACLE,KAAK,OACLC,aAAa,KACb2H,aAAcnP,EAAKqD,IACnBqE,IAAKX,EAAS,CACZY,SAAU,0BACVK,SAAU,SAAA1B,GAAK,OAAID,GAAYC,IAAU,gCAG7C,cAAC,IAAD,UACCjG,EAAOgD,KAAOhD,EAAOgD,IAAIuE,aAI5B,eAAC,IAAD,CACEtD,GAAI,EADN,UAEE,cAAC,IAAD,CAAWgD,QAAQ,MAAnB,kBACE,eAAC,KAAD,CACEtF,GAAG,SACHqF,KAAK,MACLkB,SAAW,SAACC,GAAD,OAAOyF,EAAS,MAAOzF,EAAEC,OAAOnC,QAC3CoB,IAAKX,EAJP,UAME,wBAAQT,MAAO4B,GAAf,6BACA,wBAAQ5B,MAAO4B,GAAf,mBACA,wBAAQ5B,MAAO4B,GAAf,oBACA,wBAAQ5B,MAAO4B,GAAf,wBAIN,eAAC,IAAD,CACE5D,GAAI,EADN,UAGE,cAAC,IAAD,CAAWgD,QAAQ,WAAnB,iCACA,cAAC,IAAD,CACED,KAAK,WACLE,KAAK,OACLC,aAAa,KACbC,YAAY,2BACZ0H,aAAcnP,EAAKZ,SACnBsI,IAAKX,OAIR/G,EAAKuH,KAAK+G,SAASrG,KAClB,eAAC,IAAD,CAAa3D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,UAAnB,mCACA,cAAC,IAAD,CACED,KAAK,gBACLE,KAAK,OACLE,YAAY,WACZ0H,aAAcnP,EAAKqO,MAAOrO,EAAKqO,MAAMgB,QAAU,GAC/C3H,IAAKX,OAKV/G,EAAKuH,KAAK+G,SAASrG,KAClB,eAAC,IAAD,CAAa3D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,YAAnB,6BACCwG,EAAYxN,KAAI,SAACgP,EAAUC,GAAX,OACf,eAAC,IAAD,CACEjL,GAAI,EADN,UAIGyK,KACD,cAAC,IAAD,CACEzI,MAAOgJ,EACP/G,SAAU,SAAAC,GAAC,OAvOA,SAACA,EAAkC+G,EAAelI,EAAcmI,GAC3FA,GAAY,SAAAtP,GACV,IAAIuP,EAAS,aAAOvP,GAGpB,OAFAuP,EAAUF,GAAS/G,EAAEC,OAAOnC,MAC5B2H,EAAS5G,EAAMoI,GACRA,KAkOsBC,CAAqBlH,EAAG+G,EAAO,oBAAqBxB,IACnE1P,KAAK,KACLkJ,KAAK,OACLE,YAAY,eART,aAAa8H,MAatB,eAAC,IAAD,WACGR,KACD,8BACA,cAAC,IAAD,CACE1Q,KAAK,KACLC,QAAQ,UACRJ,QA/PU,kBAAM6P,GAAe,SAAC4B,GAAD,6BAAWA,GAAX,CAAc,SAgQ7C3E,SAAU,cAAC5E,GAAA,EAAD,IAJZ,6BAWLpG,EAAKuH,KAAK+G,SAASrG,KAClB,eAAC,IAAD,CAAa3D,GAAI,EAAjB,UACE,cAAC,IAAD,CAAWgD,QAAQ,aAAnB,4BACA,cAAC,IAAD,CACED,KAAK,qBACLE,KAAK,OACLC,aAAa,KACbC,YAAY,KACZ0H,aAAcnP,EAAKoO,QAASpO,EAAKoO,QAAQwB,WAAa,GACtDlI,IAAKX,OAKV/G,EAAKuH,KAAK+G,SAASrG,KACpB,eAAC,IAAD,CACE3D,GAAI,EADN,UAGE,cAAC,IAAD,CAAWgD,QAAQ,YAAnB,sBACCoG,EAAgBpN,KAAI,SAACmO,GAAD,OACnB,eAAC,IAAD,CACEnK,GAAI,EADN,UAIGyK,KACD,cAAC,IAAD,CACEzI,MAAOmI,EAAQnI,MACfiC,SAAU,SAAAC,GAAC,OA/QE,SAACA,EAAkCiG,GAC9D,IAAIoB,EAAYnC,EAAgBoC,WAAU,SAAA/H,GAAC,OAAIA,EAAEd,KAAOwH,EAAQxH,MAChE0G,GAAmB,SAAAY,GACjB,IAAIkB,EAAS,aAAOlB,GAEpB,OADAkB,EAAUI,GAAV,2BAA2BpB,GAA3B,IAAoCnI,MAAMkC,EAAEC,OAAOnC,QAC5CmJ,KA0QoBM,CAAqBvH,EAAGiG,IACvCpQ,KAAK,KACLkJ,KAAK,OACLE,YAAY,eARTgH,EAAQxH,OAYjB,eAAC,IAAD,WACG8H,KACD,8BACA,cAAC,IAAD,CACE1Q,KAAK,KACLC,QAAQ,UACR8Q,SAAU1B,EAAgBA,EAAgB/L,OAAO,IAA0D,KAApD+L,EAAgBA,EAAgB/L,OAAO,GAAG2E,MACjGpI,QA9SU,WACtByP,GAAmB,SAAAqC,GACjB,IAAMC,EAAW,CAAChJ,GAAI2G,EAAsBtH,MAAO,IAEnD,OADAuH,GAAwB,SAAA9F,GAAC,OAAIA,EAAE,KACzB,GAAN,oBAAWiI,GAAX,CAAgBC,QA2SNjF,SAAU,cAAC5E,GAAA,EAAD,IALZ,6BAWJ,cAAC,IAAD,CAAQvC,EAAG,OAAQiI,MAAM,WAAzB,SACE,cAAC,IAAD,CACE0B,UAAWA,EACXvC,YAAY,UACZ1D,KAAK,SAHP,sCLnbV2I,QAAS,CAAEnH,KAAM,WAAYC,UAAW3G,IACxC8N,SAAU,CAAEpH,KAAM,OAAQC,UAAW3G,KAG1B+J,GAAiC,uCACzCZ,IACA3C,IACAwC,IMzBQ+E,GAA8B,CACzC,CACE7S,MAAO,SACPwL,KAAMqD,GAAOX,QAAQ1C,MAEvB,CACExL,MAAO,WACPwL,KAAMqD,GAAO8D,QAAQnH,OCDZsH,GAAe,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,YAC1B,OACI,eAAC,IAAD,CACE5K,GAAI9H,YAAkB,aAAc,eACpCmO,GAAI,EACJvO,QAAS,CAAEmF,GAAI,QAHjB,UAIGyN,GAAY9P,KAAI,SAACiQ,GAAD,OACf,qBAAyBrS,QAASoS,EAAlC,SACE,cAAC,GAAD,eAAoBC,KADZA,EAAQhT,UAIpB,sBAAMW,QAASoS,EAAf,SAA4B,cAAC,EAAD,CAAmB/S,MAAM,uBAKzDiT,GAAgB,SAAC,GAAwC,IAAtCjT,EAAqC,EAArCA,MAAOiG,EAA8B,EAA9BA,SAAUuF,EAAoB,EAApBA,KAAoB,EAC7BI,cAArBC,EADkD,EAClDA,OAAQqH,EAD0C,EAC1CA,SAEhB,OACE,eAAC,IAAD,CAAOrS,QAAS,EAAGF,QAASsF,GAAYiN,EAAxC,UACE,cAAC,IAAD,CAAMtE,GAAE,OAAEpD,QAAF,IAAEA,IAAQ,IAAlB,SACE,eAAC,IAAD,CACEgD,GAAI,EACJkB,GAAI,EACJhP,QAAS,gBACT6N,MAAO,SACP3F,OAAQ,CAACuK,WAAY9S,YAAkB,cAAe,gBALxD,UAOE,cAAC,IAAD,CACEmI,WAAY,IADd,SAGGxI,IAEFiG,GACC,cAAC,IAAD,CACExB,GAAI2O,IACJC,WAAY,uBACZhL,UAAWwD,EAAS,iBAAmB,GACvCvF,EAAG,EACHC,EAAG,SAKX,cAAC,IAAD,CAAU+M,GAAIzH,EAAQ0H,gBAAc,EAACC,MAAO,CAAEC,UAAW,eAAzD,SACE,cAAC,IAAD,CACEC,GAAI,EACJC,GAAI,EACJC,WAAY,EACZC,YAAa,QACbtF,MAAO,QALT,SAMGtI,GACCA,EAASlD,KAAI,SAAC+Q,GAAD,aACX,cAAC,IAAD,CAAwBlF,GAAE,UAAEkF,EAAMtI,YAAR,QAAgB,IAA1C,SACE,cAAC,IAAD,CAAY/G,GAAG,OAAO+J,GAAI,EAA1B,SACGsF,EAAM9T,SAFA8T,EAAM9T,kB,oBC5DpB+T,GAAgB,WAC3B,OAAO,mCACL,cAAC,IAAD,CAAOtT,UAAW,MAAOI,QAAS,EAAlC,SACGgS,GAAY9P,KAAI,SAACiQ,GAAD,aACf,cAAC,IAAD,UACE,eAAC,KAAD,CAASgB,QAAS,QAAS3G,UAAW,eAAtC,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CAAa5I,GAAG,OAAOuD,EAAG,EAAGpH,SAAU,KAAM4H,WAAY,IAAzD,SACE,cAAC,IAAD,CAAMoG,GAAE,UAAEoE,EAAQxH,YAAV,QAAkB,IAA1B,SACGwH,EAAQhT,YAKdgT,EAAQ/M,UACP,cAAC,KAAD,CACEgO,OAAQ,EACRhM,UAAW,KAEXD,EAAG,EACHE,QAAS,KACTyH,KAAM,KANR,SAOE,cAAC,IAAD,UACGqD,EAAQ/M,SAASlD,KAAI,SAAC+Q,GAAD,OACpB,cAAC,GAAD,eAAqCA,GAAjBA,EAAM9T,kBApB5BgT,EAAQhT,eAiCpBkU,GAAgB,SAAC,GAAwC,IAAtClU,EAAqC,EAArCA,MAAOwL,EAA8B,EAA9BA,KAAM2I,EAAwB,EAAxBA,SACpC,OACE,cAAC,IAAD,CAAMvF,GAAE,OAAEpD,QAAF,IAAEA,IAAQ,IAAlB,SACA,cAAC,IAAD,CACE/G,GAAG,OACH2P,KAAM,QACNnU,QAAS,QACT+H,EAAG,EACHE,QAAS,KACTlH,MAAOX,YAAkB,WAAY,SANvC,SAQE,eAAC,IAAD,CAAOI,UAAW,MAAO8N,MAAO,SAAhC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACE8E,WAAY,eACZgB,YAAa,CAAErT,MAAOX,YAAkB,WAAY,aACpDmI,WAAY,IAHd,SAKGxI,IAEH,cAAC,IAAD,CAAMY,SAAU,KAAhB,SAAuBuT,OAEzB,cAAC,IAAD,CACEd,WAAY,eACZhL,UAAW,oBACXiM,QAAS,EACTD,YAAa,CAAEC,QAAS,OAAQjM,UAAW,iBAC3C3H,QAAS,WACT6N,MAAO,SACPgG,KAAM,EAPR,SAQE,cAAC,IAAD,CAAMvT,MAAO,WAAYsF,EAAG,EAAGC,EAAG,EAAG9B,GAAI+P,iBCtDtCC,GAAS,SAAC,GAAmB,EAAlBC,SAAmB,IAAD,EAEX9I,cAArBC,EAFgC,EAEhCA,OAAQqH,EAFwB,EAExBA,SAEhB,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEyB,KAAM,OACNnG,GAAI,CAAErJ,KAAM,GACZuK,GAAI,CAAEvK,KAAM,GACZyP,aAAc,EACdf,YAAa,QACbtF,MAAO,SANT,UAOE,cAAC,IAAD,CACEgG,KAAM,CAAEpP,KAAM,EAAGC,GAAI,QACrBuI,GAAI,CAAExI,MAAO,GACblF,QAAS,CAAEkF,KAAM,OAAQC,GAAI,QAH/B,SAIE,cAAC,IAAD,CACEzE,QAASuS,EACThS,KACE2K,EAAS,cAACgJ,EAAA,EAAD,CAAWvO,EAAG,EAAGC,EAAG,IAAQ,cAACuO,EAAA,EAAD,CAAexO,EAAG,EAAGC,EAAG,IAE/DxF,QAAS,QACTI,aAAY,wBAGhB,eAAC,IAAD,CAAMoT,KAAM,CAAEpP,KAAM,GAAKzE,QAAS,CAAEyE,KAAM,SAAUC,GAAI,SAAxD,UACE,cAAC,IAAD,CAAMwJ,GAAIC,GAAOX,QAAQ1C,KAAzB,SACE,cAAC,IAAD,CACEhG,UAAW8G,YAAmB,CAAEnH,KAAM,SAAUC,GAAI,SACpD2P,WAAY,UACZnU,SAAU,MACV4H,WAAY,OAJd,uBASF,cAAC,IAAD,CAAMvI,QAAS,CAAEkF,KAAM,OAAQC,GAAI,QAAUuI,GAAI,GAAjD,SACE,cAAC,GAAD,SAIJ,eAAC,IAAD,CACE4G,KAAM,CAAEpP,KAAM,EAAGC,GAAI,GACrB1E,QAAS,WACTD,UAAW,MACXI,QAAS,EAJX,UAME,cAAC,EAAD,CAAmBZ,QAAS,CAAEkF,KAAM,OAAQC,GAAI,UAChD,cAAC,IAAD,CAAMwJ,GAAIC,GAAOS,MAAM9D,KAAMgI,MAAO,CAACvS,WAAY,KAAjD,SACE,cAAC,IAAD,CACEH,KAAM,KACNF,SAAU,KACVG,QAAS,QACT0D,GAAG,SAJL,uCAaN,cAAC,IAAD,CAAU6O,GAAIzH,EAAQ0H,gBAAc,EAApC,SACE,cAAC,GAAD,CAAcR,YAAaG,UChFtB8B,GAAS,WACpB,OACE,cAAC,IAAD,CAAKvQ,GAAG,SAAS+J,GAAG,IAAIyG,UAAU,YAAYvD,YAAarR,YAAkB,WAAY,YAAzF,SACE,cAAC,IAAD,CACEI,UAAW,CAAC0E,KAAM,SAAUC,GAAI,OAChCF,KAAM,CAACC,KAAM,KAAMC,GAAI,OACvBkJ,GAAG,OACHoB,GAAI,CAACvK,KAAM,IAAKC,GAAI,KACpBmJ,MAAM,SACN7G,eAAe,SANjB,SAQE,eAAC,IAAD,CACEZ,GAAI,CAAC3B,KAAM,IAAKC,GAAI,GACpB3E,UAAW,CAAC0E,KAAM,SAAUC,GAAI,OAChC8P,YAAa,CAAC9P,GAAI,KAClBxE,SAAS,KACTC,QAAS,CAACsE,KAAM,IAAKC,GAAI,KACzBI,UAAW,CAACL,KAAM,SAAUC,GAAI,SANlC,UAQE,cAAC,IAAD,CAAMwJ,GAAIC,GAAOX,QAAQ1C,KAAzB,SACE,eAAC,IAAD,CAAMxK,MAAOX,YAAkB,cAAe,eAA9C,mBAAsE,IAAI2I,MAAOmM,cAAe,IAAhG,eAGF,cAAC,IAAD,gDCrBGC,GAAY,WAIvB,OACE,cAAC,IAAD,CAAK5O,EAAG,OAAQhC,WAAY,SAAUiC,cAAe,SAAUkO,KAAM,QAArE,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKrO,EAAE,OAAP,SACE,cAAC,GAAD,MAEF,eAAC,IAAD,CAAKC,EAAE,OAAOa,MAAM,OAAOZ,EAAE,OAAOE,SAAU,EAAGD,cAAe,SAAU0B,GAAI9H,YAAkB,WAAY,YAA5G,UACE,eAAC,IAAD,WAEIuC,OAAOC,KAAKgM,IAAQ9L,KAAI,SAAAsS,GAAC,OACvB,cAAC,IAAD,CAAeC,MAAa,QAAND,EAAa7J,KAAMqD,GAAOwG,GAAG7J,KAAMC,UAAWoD,GAAOwG,GAAG5J,WAAlE4J,MAGhB,cAAC,IAAD,CAAUzG,GAAIC,GAAO+D,SAASpH,UAEhC,cAAC,GAAD,a,UCzBG+J,GAAeC,aAAY,CACtCC,OAAQ,CACNC,QAAS,CACPC,GAAI,UACJC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,c,mBCRLC,GAAc,IAAIC,KAEXC,GAAa,kBACxB,cAACC,GAAA,EAAD,CAAqBC,OAAQJ,GAA7B,SACE,cAAC,IAAD,CAAgBlQ,MAAOoP,GAAvB,SACE,cAAC,GAAD,SCGSmB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGM9M,QACW,cAA7BsN,OAAOtV,SAASuV,UAEe,UAA7BD,OAAOtV,SAASuV,UAEhBD,OAAOtV,SAASuV,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,GAAD,OAEF3V,SAAS4V,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAACe,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAM1N,YCvH5BqM,O","file":"static/js/main.83a97f03.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  Button,\n  Flex,\n  HStack,\n  Box,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  label?: string,\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({label, display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n    {label ? \n    <Flex direction=\"row\" justify='right'>\n      <Button \n      onClick={toggleColorMode}\n      display={display}\n      fontSize={'md'}\n      >\n        <HStack spacing={2}>\n          <Box>{label}</Box>\n          <Box><SwitchIcon /></Box>\n        </HStack>\n      </Button>\n      </Flex>\n      : \n      <IconButton \n        display={display}\n        size=\"md\"\n        fontSize=\"lg\"\n        variant=\"ghost\"\n        color=\"current\"\n        marginLeft=\"2\"\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    }\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}","import { \n  userInformation,\n  LoginData,\n  SignUpData,\n  ConditionData,\n  ChangePasswordData\n} from './types';\nimport { getToken, setToken } from '../utils/token';\n\nclass Http {\n  private url = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : document.location.origin;\n\n  public async login(fields:LoginData) {\n    const res = await fetch(`${this.url}/api/v1/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) return setToken(data.data.token);\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async signup(fields:SignUpData) {\n    const res = await fetch(`${this.url}/api/v1/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) return setToken(data.data.token);\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n  \n  public async newCondition(fields:ConditionData) {\n    const res = await fetch(`${this.url}/api/v1/conditions/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${getToken()}`\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async conditions() {\n    const res = await fetch(`${this.url}/api/v1/conditions/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async backgroundSubtypes() {\n    const res = await fetch(`${this.url}/api/v1/background-subtypes/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    if(res.status === 200) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getProfileInfo() {\n    const res = await fetch(`${this.url}/api/v1/profile/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updateProfile(fields:userInformation) {\n    const res = await fetch(`${this.url}/api/v1/profile/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updatePassword(fields:ChangePasswordData) {\n    const res = await fetch(`${this.url}/api/v1/change-password/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n}\n\nexport const http = new Http();\n","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon } from '@chakra-ui/react'\n\ntype passwordChecklistPropsTypes = {\n  hasNumber: boolean,\n  hasUpperCase: boolean,\n  hasLowerCase: boolean,\n  hasSpecialChar: boolean,\n  hasValidLength: boolean\n}\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}: passwordChecklistPropsTypes) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: 'gray.100',\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signup.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signup.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","import React from 'react'\n\nexport const NotfoundPage = () => {\n  return (\n    <div>\n      <h1>404</h1>\n      <h2>Not found</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport { userInformation } from '../http/types'\n\ntype presentationCardPropsTypes = {\n  userData: userInformation,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box>\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'30%', md:'20%'}}>\n          <Image borderRadius=\"full\" maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box \n          maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'xl'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'3xl'}}\n          >\n            {userData.first_name + ' ' + userData.last_name}\n          </Text>\n          {userData.dob &&\n            <Text>{userData.dob} </Text>\n          }\n          {userData.location &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              {userData.location}\n            </Text>\n          }\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-0.1em': 'calc(50% - 0.1em)'}`, //(50% - 1/2(width))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        }\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='1' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import { useColorModeValue } from '@chakra-ui/color-mode'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { Box } from '@chakra-ui/layout'\nimport React from 'react'\n\nexport const AddButton = () => {\n  return (\n      <Box\n        bg={useColorModeValue('primary.500', 'primary.200')}\n        rounded='50%'\n        cursor='pointer'\n        _hover={{\n          bg:useColorModeValue('primary.300', 'primary.300')\n        }}\n      >\n        <AddIcon \n          w='2em'\n          h='2em'\n          p='.5em'\n          color='white'\n        />\n      </Box>\n  )\n}\n","export const isValidDate = (value:string) => {\n  const date_of_diagnosis = Date.parse(value);\n  return date_of_diagnosis < Date.now();\n}","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n  Select\n} from '@chakra-ui/react';\nimport { BackgroundSubtypeData, ConditionData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\nimport { isValidDate } from '../../utils/utils';\n\ntype NewConditionProps = {\n  formId: string;\n  onSubmit: (values:ConditionData) => void;\n  backgroundSubtypes: BackgroundSubtypeData[];\n}\n\nexport const NewConditionForm = ({ formId, onSubmit, backgroundSubtypes }: NewConditionProps) => {\n  const { register, handleSubmit, errors } = useForm<ConditionData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Nombre</FormLabel>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='Diabetes tipo 1'\n            ref={register({required: 'El nombre es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <FormControl mb='4' isInvalid={Boolean(errors.description)}>\n          <FormLabel htmlFor=\"description\">Description</FormLabel>\n          <Textarea\n            name=\"description\"\n            placeholder='Descripción de la condición'\n            ref={register()}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.background_subtype)}>\n          <FormLabel htmlFor=\"background_subtype\">Tipo de condición</FormLabel>\n          <Select\n            name=\"background_subtype\"\n            ref={register()}>\n            {backgroundSubtypes.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.date_of_diagnosis)}>\n          <FormLabel htmlFor=\"date_of_diagnosis\">Fecha de diagnóstico</FormLabel>\n          <Input\n            name=\"date_of_diagnosis\"\n            type=\"date\"\n            autoComplete='on'\n            ref={register({\n              required: 'La fecha es obligatoria',\n              validate: value => isValidDate(value) || 'La fecha no es válida'\n            })}/>\n          <FormErrorMessage>\n            {errors.date_of_diagnosis && errors.date_of_diagnosis.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","export const userTypes = {\n  PATIENT: 'PAT',\n  MEDIC: 'MED',\n}\n\nexport const sexTypes = {\n  MALE: 'M',\n  FEMALE: 'F',\n  OTHER: 'O',\n  NOT_SPECIFIED: 'U',\n}\n\nexport type timeLineItemProps = {\n  conditionTitle: string,\n  date_of_diagnosis: string,\n  conditionType?: string,\n  conditionSubtype?: string,\n  conditionDescription?: string,\n}","import React, {useState, ChangeEvent} from 'react';\nimport { \n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input\n } from '@chakra-ui/react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from '../AuthViews/validPasswordChecklist';\nimport { ChangePasswordData } from '../../http/types';\n\n\ntype ChangePasswordProps = {\n  formId: string;\n  onSubmit: SubmitHandler<ChangePasswordData>;\n}\n\nexport const ChangePasswordForm = ({formId, onSubmit}:ChangePasswordProps) => {\n  const { register, handleSubmit, errors } = useForm<ChangePasswordData>();\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n  const [password, setPassword] = useState<string>('');\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n  \n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n      <FormControl\n        mb='4'\n        isInvalid={Boolean(initialPassword ? !isValid : null)}>\n        <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n        <Input\n          name='password1'\n          type='password'\n          autoComplete='off'\n          placeholder='Contraseña segura'\n          value={password}\n          onChange={handlePasswordChange}\n          ref={register({ required: true })}\n          mb={4}\n        />\n        {!isValid && <ValidPasswordChecklist\n          hasNumber={hasNumber}\n          hasLowerCase={hasLowerCase}\n          hasUpperCase={hasUpperCase}\n          hasSpecialChar={hasSpecialChar}\n          hasValidLength={hasValidLength} />}\n      </FormControl>\n\n      <FormControl\n        mb={4}\n        isInvalid={Boolean(errors.password2)}>\n        <FormLabel htmlFor='password2'>\n          Confirmar contraseña\n        </FormLabel>\n        <Input\n          name='password2'\n          type='password'\n          autoComplete='off'\n          placeholder='Repetir contraseña'\n          onPaste={e => e.preventDefault()}\n          ref={register({\n            required: 'Es obligatorio confirmar la contraseña',\n            validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n          })}\n        />\n        <FormErrorMessage>\n          {errors.password2 && errors.password2.message}\n        </FormErrorMessage>\n      </FormControl>\n      </form>\n\n    </Stack>\n  )\n}","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { DoctorLandingView } from \"../views/Doctor/DoctorLandingView\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientHomeView } from \"../views/Patient/PatientHomeView\";\nimport { ProfileView } from \"../views/Profile/ProfileView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nconst patientPaths: { [name: string]: route } = {\n  patientHome: { path: '/pat/home', component: PatientHomeView },\n}\n\nconst doctorPaths: { [name: string]: route } = {\n  doctorLanding: { path: '/med/landing', component: DoctorLandingView },\n  doctorpatients: { path: '/med/patients', component: NotfoundPage },\n}\n\nconst generalPaths: { [name: string]: route } = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signup: { path: '/signup', component: SignUpView },\n  profile: {path: '/profile', component: ProfileView},\n  contact: { path: '/contact', component: NotfoundPage },\n  notFound: { path: '/404', component: NotfoundPage },\n}\n\nexport const routes: { [name: string]: route } = {\n  ...generalPaths,\n  ...patientPaths,\n  ...doctorPaths,\n};\n","import React, { useState } from 'react';\nimport { Box, Text, VStack } from '@chakra-ui/layout';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { AddButton } from '../../components/TimeLine/AddButton';\nimport { NewConditionForm } from './NewConditionForm';\nimport {\n  useDisclosure,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  useBreakpointValue,\n  ToastPosition\n} from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { BackgroundSubtypeData, ConditionData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useToast } from \"@chakra-ui/react\"\nimport { useMutation, useQuery } from 'react-query';\n\n\nexport const PatientHomeView = () => {\n  const [userData, setUserData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  })\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const [backgroundSubtypes, setBackgroundSubtype] = useState<BackgroundSubtypeData[]>([])\n  \n  const [conditions, setConditions] = useState<ConditionData[]>([])\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n\n  const onSuccessNewCondition = (data:ConditionData) => {\n    const conds = [...conditions, data]\n    conds.sort((x, y) => x.date_of_diagnosis < y.date_of_diagnosis ? 1 : -1)\n    setConditions(conds)\n    onClose();\n    toast({\n      title: 'Condición creada',\n      description: 'Se ha añadido una nueva condición a tu historia clínica',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate: mutateNewCondition } = useMutation('newCondition', (values:ConditionData) => http.newCondition(values), {onSuccess: onSuccessNewCondition, onError})\n\n  const onSubmit = (values:ConditionData) => {\n    mutateNewCondition(values);\n  }\n\n  useQuery('conditions', () => http.conditions(), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n  useQuery('profile', () => http.getProfileInfo(), {\n    onSuccess: (data:userInformation) => setUserData(data),\n    onError\n  })\n  useQuery('background-subtypes', () => http.backgroundSubtypes(), {\n    onSuccess: (data:BackgroundSubtypeData[]) => setBackgroundSubtype(data),\n    onError\n  })\n\n  return (\n    <>\n      <VStack>\n        <Text fontSize='4xl'>Historia Médica</Text>\n        <PresetationCard userData={userData} avatar={avatar} />\n        <Box\n          w='100%'\n          maxW={{base: '100%', md: '75%'}}\n        >\n          <TimeLine>\n            {conditions.map(condition => (\n              <TimeLineItem \n                key={condition.id}\n                conditionTitle={condition.name}\n                date_of_diagnosis={condition.date_of_diagnosis}\n                conditionDescription={condition.description}\n              />\n            ))}\n          </TimeLine>\n        </Box>\n      </VStack>\n      \n      <Drawer \n        placement={useBreakpointValue({base: 'bottom', lg: 'right'})}\n        isOpen={isOpen}\n        onClose={onClose}>\n          <DrawerOverlay>\n            <DrawerContent>\n              <DrawerCloseButton/>\n              <DrawerHeader borderBottomWidth='1px'>\n                Nueva condición\n              </DrawerHeader>\n\n              <DrawerBody>\n                <NewConditionForm\n                  onSubmit={onSubmit}\n                  formId='form-condition'\n                  backgroundSubtypes={backgroundSubtypes}/>\n              </DrawerBody>\n              \n              <DrawerFooter>\n                <Button\n                  type='submit'\n                  form='form-condition'\n                  leftIcon={<AddIcon/>}\n                  colorScheme='primary'>Añadir</Button>\n              </DrawerFooter>\n            </DrawerContent>\n          </DrawerOverlay>\n      </Drawer>\n      <Box\n        display='inline-block'\n        ml='auto'\n        mr='1rem'\n        mb='1rem'\n        position='sticky'\n        bottom='1rem'\n        onClick={onOpen}\n      >\n        <AddButton/>\n      </Box>\n    </>\n  )\n}\n","import React from 'react'\n\nexport const DoctorLandingView = () => {\n    return (\n        <div>\n            <h1>DOCTOR LANDING</h1>\n        </div>\n    )\n}\n","import React from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  useToast,\n  Divider,\n  Text,\n  useBreakpointValue,\n  ToastPosition\n} from '@chakra-ui/react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { LoginData } from '../../http/types';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\n\n\nexport const LoginView = () => {\n  const history = useHistory()\n  \n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  \n  const onSuccess = () => {\n    history.push(routes.patientHome.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('login', (values:LoginData) => http.login(values), {onSuccess, onError})\n  \n  const onSubmit = (values: LoginData) => {\n    mutate(values);\n  }\n\n  return (\n    <Flex\n      flexGrow={1}\n      h={'100%'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.100', 'gray.800')}\n    >\n      <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n        <Box\n          p={8}\n          bg={useColorModeValue('white', 'gray.700')}\n          minW='xs'\n          rounded={'lg'}\n          boxShadow={'lg'}\n        >\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.email)}>\n              <FormLabel htmlFor=\"email\">Correo</FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                autoComplete='on'\n                placeholder='ejemplo@gmail.com'\n                ref={register({\n                  required: 'El correo electrónico es obligatorio',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: 'Ingresa un correo electrónico válido',\n                  },\n                })}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.password)}>\n              <FormLabel htmlFor='password'>Contraseña</FormLabel>\n              <Input\n                name='password'\n                type=\"password\"\n                autoComplete='off'\n                ref={register({ required: true })}\n              />\n            </FormControl>\n            <Stack spacing={8}>\n              <Button type=\"submit\">Entrar</Button>\n            </Stack>\n          </form>\n          <Divider my={4}/>\n          <Box textAlign={'center'} >\n            <ChakraLink \n              as={Link}\n              to={routes.signup.path}>\n                <Text color={useColorModeValue('primary.500', 'primary.300')}>Crear una nueva cuenta</Text>\n            </ChakraLink>\n          </Box>\n        </Box>\n      </Stack>\n     \n    </Flex>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n  useToast,\n  Link as ChakraLink,\n  useBreakpointValue,\n  ToastPosition,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData } from '../../http/types';\nimport { http } from '../../http/client';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\n\nexport const SignUpView = () => {\n  const history = useHistory()\n\n  const toast = useToast()\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const onSuccess = () => {\n    history.push(routes.patientHome.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('signup', (values:SignUpData) => http.signup(values), {onSuccess, onError})\n  \n  const onSubmit = (values: SignUpData) => {\n    mutate(values);\n  }\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n  \n  const MB = 4\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n    >\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  onPaste={e => e.preventDefault()}\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n              \n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n          <Box display='flex' justifyContent='center'>\n            <ChakraLink as={Link} to={routes.login.path}>\n              ¿Ya con cuenta? Inicie Sesión\n            </ChakraLink>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import React, { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react'\nimport { useForm } from 'react-hook-form';\nimport {\n  Avatar,\n  AvatarBadge,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Select,\n  useColorModeValue,\n  useToast,\n  Box,\n  Container,\n  Flex,\n  Heading,\n  HStack,\n  Stack,\n  VStack,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  useBreakpointValue,\n  ToastPosition,\n} from \"@chakra-ui/react\"\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { FaCamera } from 'react-icons/fa';\nimport { sexTypes, userTypes } from '../../utils/typesDefinitions';\nimport { ChangePasswordData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { isValidDate } from '../../utils/utils';\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { setToken } from '../../utils/token';\nimport { useMutation, useQuery } from 'react-query';\n\nexport const ProfileView = () => {\n  \n  const [isLoading, setIsLoading] = useState(true)\n  const [allergiesObject, setAllergiesObject] = useState<{id: number, value: string}[]>([{id:0,value:''},]);\n  const [lastKnownAllergiesId, setLastKnownAllergiesId] = useState(1)\n  const [specialties, setSpecialties] = useState(['']);\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const toast = useToast();\n  const [data, setData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { register, handleSubmit, errors, setValue } = useForm<userInformation>();\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const ok = useCallback((_, data) => {\n    \n    const parseArrayToAllergiesObject = (allergies:string[] = ['']) => {\n      if (!allergies || allergies.length === 0) allergies = [''];\n      \n      let localLastKownID = lastKnownAllergiesId;\n      const res = allergies.map(allergy => ({\n        id: localLastKownID++,\n        value: allergy\n      }));    \n      setLastKnownAllergiesId(localLastKownID);\n      return res;\n    }\n    const userData = data as userInformation;\n    const {patient, medic} = userData;\n    setValue('sex', userData.sex)\n    setData(userData);\n    \n    if (userData.type.includes(userTypes.PATIENT)) {\n      register('patient.allergies');\n      setAllergiesObject(parseArrayToAllergiesObject(patient && patient.allergies));\n    }\n    if (userData.type.includes(userTypes.MEDIC)) {\n      register('medic.specialties');\n      setValue('medic.specialties', medic? medic.specialties : ['']);\n      setSpecialties(medic? medic.specialties : ['']);\n    }\n    setIsLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[setValue, register])\n\n  useQuery('profile', () => http.getProfileInfo(), {\n    onSuccess: (data:userInformation) => ok(null, data),\n    onError,\n    onSettled: () => setIsLoading(false)\n  })\n\n  const { mutate } = useMutation('updateProfile', (values:userInformation) => http.updateProfile(values), {\n    onSuccess: () => {\n      toast({\n        description: '¡Tu información se ha guardado con éxito!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const { mutate: mutatePassword } = useMutation('changePassword', (values:ChangePasswordData) => http.updatePassword(values), {\n    onSuccess: ({ token }:{token:string}) => {\n      setToken(token)\n      onClose()\n      toast({\n        title: 'Contraseña actualizada',\n        description: 'Tu contraseña se ha cambiado exitosamente. Los otros equipos dónde utilices doctory tendrán que volver a iniciar sesión.',\n        status: 'success',\n        duration: 10000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const onSubmit = (values: userInformation) => {\n    setIsLoading(true);\n    if (data.type.includes(userTypes.PATIENT)) {\n      values.patient && (values.patient.allergies = allergiesObject.map(x => x.value).filter(y => y !== ''));\n    }\n    mutate(values);\n  }\n\n  const addSpecialtyField = () => setSpecialties((s) => [...s, '']);\n  \n  const addAllergyField = () => {\n    setAllergiesObject(obj => {\n      const newValue = {id: lastKnownAllergiesId, value: ''};\n      setLastKnownAllergiesId(x => x+1);\n      return [...obj, newValue];\n    })\n  }\n\n  const handleValueArrChange = (e: ChangeEvent<HTMLInputElement>, index: number, name:string,  setArrValue: Dispatch<SetStateAction<string[]>>) => {\n    setArrValue(values => {\n      let newValues = [...values];\n      newValues[index] = e.target.value;\n      setValue(name, newValues);\n      return newValues;\n    })\n  }\n  \n  const handleAllergieChange = (e: ChangeEvent<HTMLInputElement>, allergy:{id:number, value:string} ) => {\n    let allergyId = allergiesObject.findIndex(x => x.id === allergy.id);\n    setAllergiesObject(allergies => {    \n      let newValues = [...allergies];\n      newValues[allergyId] = {...allergy, value:e.target.value};\n      return newValues\n    })\n  }\n\n  const onChangePassword = (values:ChangePasswordData) => {\n    mutatePassword(values);\n  }\n\n  const BulletPoint = () => (\n    <Box \n      bg= 'currentcolor'\n      borderRadius= '50%'\n      w='5px'\n      h='5px'\n      mx='.5em'\n    />\n  )\n\n  return (\n    <Container\n    w=\"100vw\"\n    h=\"100%\"\n    maxW=\"95%\"\n    d={'flex'}\n    flexGrow={1}\n    mx={{base:'1em', md:'2em'}}\n    >\n      <Drawer\n        placement={useBreakpointValue({base: 'bottom', lg: 'right'})}\n        isOpen={isOpen}\n        onClose={onClose}\n        >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader>\n              Actualizar contraseña\n            </DrawerHeader>\n\n            <DrawerBody>\n              <ChangePasswordForm formId='change-password-form' onSubmit={onChangePassword}/>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button\n                type='submit'\n                form='change-password-form'\n                colorScheme='primary'>Cambiar contraseña</Button>\n            </DrawerFooter>\n\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    <Flex\n      flexGrow={1}\n      align={'flex-start'}\n      justify={'center'}\n      py={12}\n      w={'100%'}\n    >\n    <VStack w={'100%'} mb={12} >\n      <Heading fontSize={'3xl'}>Editar Perfil</Heading>\n      <Stack w={'100%'} align={'center'}>\n        <Avatar src={avatar} size=\"2xl\" mb={4}>\n          <AvatarBadge\n            boxSize=\".8em\"\n            borderColor=\"transparent\"\n            bg=\"white\"\n            _hover={{color:'gray.500'}}>\n            <FaCamera />\n          </AvatarBadge>\n        </Avatar>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        minW={{base:'xs', md: 'md'}}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n      >\n       \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.first_name)}>\n            <FormLabel htmlFor='first_name'>Nombre(s)</FormLabel>\n            <Input\n              name='first_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Juan'\n              defaultValue={data.first_name}\n              ref={register({ required: 'El nombre es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.first_name && errors.first_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.last_name)}>\n            <FormLabel htmlFor='last_name'>Apellidos</FormLabel>\n            <Input\n              name='last_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Pérez'\n              defaultValue={data.last_name}\n              ref={register({ required: 'El apellido es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.last_name && errors.last_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.email)}>\n            <FormLabel htmlFor='email'>Correo</FormLabel>\n            <Input\n              name='email'\n              type='email'\n              disabled={true}\n              placeholder='ejemplo@gmail.com'\n              value={data.email}\n              ref={register}\n            />\n            \n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel>Contraseña</FormLabel>\n            <Button onClick={onOpen} variant='link' colorScheme='primary'>Cambiar contraseña</Button>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.dob)}>\n            <FormLabel htmlFor='dob'>Fecha de nacimiento</FormLabel>\n            <Input\n              name='dob'\n              type='date'\n              autoComplete='on'\n              defaultValue={data.dob}\n              ref={register({\n                required: 'La fecha es obligatoria',\n                validate: value => isValidDate(value) || 'La fecha no es válida',\n               })}\n            />\n            <FormErrorMessage>\n            {errors.dob && errors.dob.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel htmlFor='sex'>Sexo</FormLabel>\n              <Select\n                as='select'\n                name='sex'\n                onChange= {(e) => setValue('sex', e.target.value)}\n                ref={register}\n              >\n                <option value={sexTypes.NOT_SPECIFIED}>Sin especificar</option>\n                <option value={sexTypes.FEMALE}>Mujer</option>\n                <option value={sexTypes.MALE}>Hombre</option>\n                <option value={sexTypes.OTHER}>Otro</option>\n              </Select>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='location'>Lugar de Residencia</FormLabel>\n            <Input\n              name='location'\n              type='text'\n              autoComplete='on'\n              placeholder='Monterrey, Nuevo León'\n              defaultValue={data.location}\n              ref={register}\n            />\n          </FormControl>\n          \n          {data.type.includes(userTypes.MEDIC) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='license'>Cédula Profesional</FormLabel>\n              <Input\n                name='medic.license'\n                type='text'\n                placeholder='12345678'\n                defaultValue={data.medic? data.medic.license : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.MEDIC) && \n            <FormControl mb={4} >\n              <FormLabel htmlFor='specialty'>Especialidad(s)</FormLabel>\n              {specialties.map((specialty,index) => (\n                <HStack\n                  mb={2}\n                  key={'specialty-'+index} // TODO: \n                >\n                  {BulletPoint()}\n                  <Input\n                    value={specialty}\n                    onChange={e => handleValueArrChange(e, index, 'medic.specialties', setSpecialties)}\n                    size='sm'\n                    type='text'\n                    placeholder='Cirujano'\n                  />\n                </HStack>\n              ))}\n\n              <HStack>\n                {BulletPoint()}\n                <div>\n                <Button\n                  size='sm'\n                  variant=\"outline\"\n                  onClick={addSpecialtyField}\n                  leftIcon={<AddIcon/>}\n                >Agregar</Button>\n                </div>\n              </HStack>\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='blood_type'>Tipo de Sangre</FormLabel>\n              <Input\n                name='patient.blood_type'\n                type='text'\n                autoComplete='on'\n                placeholder='O+'\n                defaultValue={data.patient? data.patient.blood_type : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) && \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='allergies'>Alergias</FormLabel>\n            {allergiesObject.map((allergy) => (\n              <HStack\n                mb={2}\n                key={allergy.id}\n              >\n                {BulletPoint()}\n                <Input\n                  value={allergy.value}\n                  onChange={e => handleAllergieChange(e, allergy)}\n                  size='sm'\n                  type='text'\n                  placeholder='Pólen'\n                />\n              </HStack>\n            ))}\n            <HStack>\n              {BulletPoint()}\n              <div>\n              <Button\n                size='sm'\n                variant=\"outline\"\n                disabled={allergiesObject[allergiesObject.length-1] && allergiesObject[allergiesObject.length-1].value === ''}\n                onClick={addAllergyField}\n                leftIcon={<AddIcon/>}\n              >Agregar</Button>\n              </div>\n            </HStack>\n          </FormControl>\n          }\n          <Stack  w={'100%'} align='flex-end'>\n            <Button \n              isLoading={isLoading}\n              colorScheme='primary'\n              type=\"submit\"\n            >\n              Guardar\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </VStack>\n    </Flex>\n  </Container>\n  )\n}","import { routes } from \"../../routes/routes\";\n\nexport interface NavItem {\n  label: string;\n  subLabel?: string;\n  children?: Array<NavItem>;\n  path?: string;\n}\n\nexport const navbarItems: Array<NavItem> = [\n  {\n    label: 'Inicio',\n    path: routes.default.path,\n  },\n  {\n    label: 'Contacto',\n    path: routes.contact.path,\n  },\n]\n\n// ---------- STRUCTURE-----------\n// {\n//   label: 'Compartir',\n//   path: '/share',\n// },\n// {\n//   label: 'Doctores',\n//   children: [\n//     {\n//       label: 'Job Board',\n//       subLabel: 'Find your dream design job',\n//       path: '#',\n//     },\n//     {\n//       label: 'Freelance Projects',\n//       subLabel: 'An exclusive list for contract work',\n//       path: '#',\n//     },\n//   ],\n// },\n","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport { useDisclosure } from '@chakra-ui/hooks';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Flex, Link as ChakraLink, Stack, Text } from '@chakra-ui/layout';\nimport { Collapse } from '@chakra-ui/transition';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from '../../theme/ColorModeSwitcher';\nimport { navbarItems, NavItem } from './navbarItems';\n\ntype mobileNavbarProps = {\n  closeNavbar: any\n}\n\nexport const MobileNavbar = ({closeNavbar} : mobileNavbarProps) => {\n    return (\n        <Stack\n          bg={useColorModeValue('primary.50', 'primary.900')}\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <div key={navItem.label} onClick={closeNavbar} >\n              <MobileNavItem  {...navItem} />\n            </div>\n          ))}\n          <span onClick={closeNavbar}><ColorModeSwitcher label='Cambiar tema'/></span>\n        </Stack>\n      );\n}\n\nconst MobileNavItem = ({ label, children, path }: NavItem) => {\n    const { isOpen, onToggle } = useDisclosure();\n  \n    return (\n      <Stack spacing={4} onClick={children && onToggle}>\n        <Link to={path ?? '/'}>\n          <Flex\n            py={2}\n            px={4}\n            justify={'space-between'}\n            align={'center'}\n            _hover={{background: useColorModeValue('primary.100', 'primary.800')}}\n          >\n            <Text\n              fontWeight={600}\n            >\n              {label}\n            </Text>\n            {children && (\n              <Icon\n                as={ChevronDownIcon}\n                transition={'all .25s ease-in-out'}\n                transform={isOpen ? 'rotate(180deg)' : ''}\n                w={6}\n                h={6}\n              />\n            )}\n          </Flex>\n        </Link>\n        <Collapse in={isOpen} animateOpacity style={{ marginTop: '0!important' }}>\n          <Stack\n            mt={2}\n            pl={4}\n            borderLeft={1}\n            borderStyle={'solid'}\n            align={'start'}>\n            {children &&\n              children.map((child) => (\n                <Link key={child.label} to={child.path ?? '/'}>\n                  <ChakraLink as='span' py={2}>\n                    {child.label}\n                  </ChakraLink>\n                </Link>\n              ))}\n          </Stack>\n        </Collapse>\n      </Stack>\n    );\n  };\n  ","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\nimport { Box, Flex, Stack, Link as ChackraLink, Text } from '@chakra-ui/layout';\nimport { Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/popover';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { navbarItems, NavItem } from './navbarItems';\n\nexport const DesktopNavbar = ():JSX.Element => {\n  return <>\n    <Stack direction={'row'} spacing={4}>\n      {navbarItems.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={'hover'} placement={'bottom-start'}>\n            <PopoverTrigger>\n              <ChackraLink as='span' p={2} fontSize={'sm'} fontWeight={600}>\n                <Link to={navItem.path ?? '/'}>\n                  {navItem.label}\n                </Link>\n              </ChackraLink>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={'xl'}\n                // bg={useColorModeValue('white', 'gray.800')}\n                p={4}\n                rounded={'xl'}\n                minW={'sm'}>\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  </>\n}\n\n\nconst DesktopSubNav = ({ label, path, subLabel }: NavItem) => {\n  return (\n    <Link to={path ?? '/'}>\n    <ChackraLink\n      as='span'\n      role={'group'}\n      display={'block'}\n      p={2}\n      rounded={'md'}\n      color={useColorModeValue('blue.800', 'white')}\n    >\n      <Stack direction={'row'} align={'center'}>\n        <Box>\n          <Text\n            transition={'all .3s ease'}\n            _groupHover={{ color: useColorModeValue('blue.400', 'blue.300')}}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={'sm'}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={'all .3s ease'}\n          transform={'translateX(-10px)'}\n          opacity={0}\n          _groupHover={{ opacity: '100%', transform: 'translateX(0)' }}\n          justify={'flex-end'}\n          align={'center'}\n          flex={1}>\n          <Icon color={'blue.400'} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </ChackraLink>\n    </Link>\n  );\n};\n\n","import * as React from \"react\"\nimport {\n    Box,\n    Flex,\n    Text,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useBreakpointValue,\n    useDisclosure,\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\nimport { MobileNavbar } from \"./MobileNavbar\";\nimport { DesktopNavbar } from \"./DesktopNavbar\";\nimport { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\nimport { Link } from \"react-router-dom\";\nimport { routes } from \"../../routes/routes\";\n\nexport const Navbar = ({userType}:any) => {  \n\n  const { isOpen, onToggle } = useDisclosure();\n  \n  return (\n    <Box>\n      <Flex\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n          <Link to={routes.default.path}>\n            <Text\n              textAlign={useBreakpointValue({ base: 'center', md: 'left' })}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n            >\n              Doctory\n            </Text>\n          </Link>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10}>\n            <DesktopNavbar />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n          <Link to={routes.login.path} style={{marginLeft: '0'}}>\n            <Button\n              size={'md'}\n              fontSize={'sm'}\n              variant={'ghost'}\n              as='button'\n            >\n              {/* TODO: when logged in, display none */}\n              Iniciar sesión\n            </Button>\n          </Link>\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNavbar closeNavbar={onToggle} />\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { routes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\n\nexport const AppRouter = () => {\n  // const [isLoggedIn, setisLoggedIn] = useState(false);\n  // const [useType, setUserType] = useState('PAC');\n\n  return (\n    <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n      <Router>\n        <Box w='100%'>\n          <Navbar />\n        </Box>\n        <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n          <Switch>\n            {\n              Object.keys(routes).map(k => (\n                <Route key={k} exact={k !== '404'} path={routes[k].path} component={routes[k].component}/>\n              ))\n            }\n            <Redirect to={routes.notFound.path} />\n          </Switch>\n          <Footer />\n        </Box>\n      </Router>\n  </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\nimport { QueryClient, QueryClientProvider } from 'react-query'\n \nconst queryClient = new QueryClient()\n\nexport const DoctoryApp = () => (\n  <QueryClientProvider client={queryClient}>\n    <ChakraProvider theme={customTheme}>\n      <AppRouter />\n    </ChakraProvider>\n  </QueryClientProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}