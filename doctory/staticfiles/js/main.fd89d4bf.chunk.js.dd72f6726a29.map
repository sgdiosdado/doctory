{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.tsx","http/client.ts","views/AuthViews/validPasswordChecklist.jsx","assets/SecureImage.svg","assets/DoctorsInComputerImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","views/NotFoundPage/NotfoundPage.tsx","components/PresentationCard.tsx","assets/PowerPeople_Emma.png","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","components/TimeLine/AddButton.tsx","routes/routes.tsx","views/Patient/PatientHomeView.tsx","views/Doctor/DoctorLandingView.tsx","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","hooks/usePasswordValidation.jsx","views/Navbar/navbarItems.tsx","views/Navbar/MobileNavbar.tsx","views/Navbar/DesktopNavbar.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","label","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","direction","justify","onClick","fontSize","spacing","size","variant","color","marginLeft","icon","aria-label","setToken","token","localStorage","setItem","defaultOk","status","data","defaultError","errors","http","url","fields","ok","error","fetch","this","method","headers","body","JSON","stringify","res","json","ValidPasswordChecklist","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","iconStates","textStates","alignItems","as","CheckIcon","bulletList","title","listItems","NotfoundPage","PresetationCard","userData","avatar","p","maxW","base","md","maxH","src","textAlign","whiteSpace","textOverflow","overflow","name","lname","dob","location","email","TimeLine","children","useMediaQuery","theme","breakpoints","isMobile","w","h","d","flexDirection","flexGrow","pb","className","position","my","mb","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","date_of_diagnosis","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","right","boxShadow","rounded","bg","top","transform","isTruncated","noOfLines","fontWeight","borderRadius","zIndex","AddButton","cursor","_hover","Add","patientPaths","patientHome","path","component","mx","align","pt","id","date","description","map","condition","bottom","patientNewCondition","patientStudies","patientProfile","patientShareHistory","doctorPaths","doctorLanding","doctorpatients","generalPaths","default","landingImage","useBreakpointValue","DoctorWithPhoneImage","DoctorsInComputerImage","py","alt","sm","xl","lg","to","routes","signin","isFullWidth","colorScheme","SecureImage","list","i","item","indx","PresonInComputerImage","login","defaultAlert","show","useForm","register","handleSubmit","history","useHistory","useState","alert","setAlert","pos","mr","px","minW","onSubmit","values","statusCode","console","log","push","credentials","isInvalid","Boolean","htmlFor","type","autoComplete","placeholder","ref","required","pattern","value","message","password","setPassword","initialPassword","setInitialPassword","requiredLength","isValid","validPassword","setValidPassword","useEffect","validation","test","toLowerCase","toUpperCase","length","usePasswordValidation","signup","first_name","last_name","onChange","e","target","MB","password2","validate","_","contact","notFound","navbarItems","MobileNavbar","closeNavbar","navItem","MobileNavItem","useDisclosure","isOpen","onToggle","background","ChevronDownIcon","transition","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","child","DesktopNavbar","trigger","placement","border","DesktopSubNav","subLabel","role","_groupHover","opacity","flex","ChevronRightIcon","Navbar","userType","minH","borderBottom","ml","Close","Hamburger","fontFamily","Footer","borderTop","borderColor","marginStart","Date","getFullYear","AppRouter","exact","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","DoctoryApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fd89d4bf.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  Button,\n  Flex,\n  HStack,\n  Box,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  label?: string,\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({label, display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n    {label ? \n    <Flex direction=\"row\" justify='right'>\n      <Button \n      onClick={toggleColorMode}\n      display={display}\n      fontSize={'md'}\n      >\n        <HStack spacing={2}>\n          <Box>{label}</Box>\n          <Box><SwitchIcon /></Box>\n        </HStack>\n      </Button>\n      </Flex>\n      : \n      <IconButton \n        display={display}\n        size=\"md\"\n        fontSize=\"lg\"\n        variant=\"ghost\"\n        color=\"current\"\n        marginLeft=\"2\"\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    }\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}","import { LoginData, FunctionOk, FunctionError, SignUpData } from './types';\nimport { setToken } from '../utils/token';\n\nconst defaultOk:FunctionOk = (status, data) => {return};\nconst defaultError:FunctionError = (status, errors) => {return};\n\nclass Http {\n  private url = 'http://localhost:8000'\n\n  public async login(fields:LoginData, ok:FunctionOk=defaultOk, error:FunctionError=defaultError) {\n    const res = await fetch(`${this.url}/api/v1/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) {\n      setToken(data.data.token);\n      ok(res.status, data.data);\n      return;\n    }\n    error(res.status, data.errors);\n  }\n\n  public async signup(fields:SignUpData, ok:FunctionOk=defaultOk, error:FunctionError=defaultError) {\n    const res = await fetch(`${this.url}/api/v1/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) {\n      setToken(data.data.token);\n      ok(res.status, data.data);\n      return;\n    }\n    error(res.status, data.errors);\n  }\n}\n\nexport const http = new Http();","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon } from '@chakra-ui/react'\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: 'gray.100',\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signin.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signin.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","import React from 'react'\n\nexport const NotfoundPage = () => {\n  return (\n    <div>\n      <h1>404</h1>\n      <h2>Not found</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport {userInformation} from '../utils/typesDefinitions'\n\ntype presentationCardPropsTypes = {\n  userData: userInformation,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box\n      p='2em'\n    >\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'35%', md:'30%'}}>\n        <Image maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'xl'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'3xl'}}\n          >\n            {userData.name + ' ' + userData.lname}\n          </Text>\n          <Text>{userData.dob} </Text>\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.location}\n          </Text>\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-.1em': 'calc(50% - .1em)'}`, //(50% - 1/2(with))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}\n","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        },\n\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='100' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import { useColorModeValue } from '@chakra-ui/color-mode'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { Box } from '@chakra-ui/layout'\nimport React from 'react'\n\nexport const AddButton = () => {\n  return (\n      <Box\n        bg={useColorModeValue('primary.500', 'primary.200')}\n        rounded='50%'\n        cursor='pointer'\n        _hover={{\n          bg:useColorModeValue('primary.300', 'primary.300')\n        }}\n      >\n        <AddIcon \n          w='2em'\n          h='2em'\n          p='.5em'\n          color='white'\n        />\n      </Box>\n  )\n}\n","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { DoctorLandingView } from \"../views/Doctor/DoctorLandingView\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientHomeView } from \"../views/Patient/PatientHomeView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nconst patientPaths: {[name:string]: route} = {\n  patientHome: {path: '/pat/home', component: PatientHomeView},\n  patientNewCondition: {path: '/pat/new-condition', component: NotfoundPage}, // TODO: NewCondition component\n  patientStudies: {path: '/pat/studies', component: NotfoundPage}, // TODO: Studies component\n  patientProfile: {path: '/pat/profile', component: NotfoundPage}, // TODO: Profile component (check if will be the same for doctor?¿)\n  patientShareHistory: {path: '/pat/profile', component: NotfoundPage}, //TODO: Profile component (check if will be the same for doctor?¿)\n}\n\nconst doctorPaths: {[name:string]: route} = {\n  doctorLanding: {path: '/med/landing', component: DoctorLandingView},\n  doctorpatients: {path: '/med/patients', component: NotfoundPage}, // TODO: Doctors view on patients component \n  // TODO: check which others paths are required\n}\n\nconst generalPaths: {[name:string]: route} = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signin: { path: '/signup', component: SignUpView },\n  contact: { path: '/contact', component: NotfoundPage }, // TODO: Contanct component\n  notFound: {path: '/404', component: NotfoundPage },\n}\n\nexport const routes:{[name:string]: route} = {\n  ...generalPaths,\n  ...patientPaths,\n  ...doctorPaths,\n};\n","import { Box, Container, Flex, Text, VStack } from '@chakra-ui/layout';\nimport React from 'react';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport { userInformation, conditionTimeLine } from '../../utils/typesDefinitions';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { AddButton } from '../../components/TimeLine/AddButton';\n\nexport const PatientHomeView = () => {\n\n  const userData: userInformation = {\n    name: 'Sergio Gabriel',\n    lname: 'Diosdado Castelazo',\n    dob: '14-dic-1998',\n    email: 'sergio@doctory.com',\n    location: 'Matamoros, Tamaulipas'\n  };\n  const timeLineConditions:conditionTimeLine[] = [\n    {id:'1', title:'Apendicitis', date:'12-Feb-22',  description:'Fue una operación de emergencia, en la mañana me lo detectaron y después de un estudio urgente fue necesaria la operación'},\n    {id:'2', title:'Rinoplastia', date:'12-Feb-23', description:'En realidad nada más acomodaron el tabique'},\n    {id:'3', title:'Un título más largo Un título más largoUn título más largo', date:'12-Feb-23'},\n  ];\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        pt={12}\n        w={'100%'}\n      >\n        <VStack>\n          <Text fontSize='4xl'>Historia Médica</Text>\n          <PresetationCard userData={userData} avatar={avatar} />\n          <Box\n            w={'100%'}\n          >\n            <TimeLine>\n              {timeLineConditions.map(condition => (\n                <TimeLineItem \n                  key={condition.id}\n                  conditionTitle={condition.title}\n                  date_of_diagnosis={condition.date}\n                  conditionDescription={condition.description}\n                />\n              ))}\n            </TimeLine>\n          </Box>\n        </VStack>\n          <Box \n            position='fixed'\n            bottom='2em'\n            right='2em'\n          >\n            <AddButton />\n          </Box>\n      </Flex>\n    </Container>\n\n  )\n}\n","import React from 'react'\n\nexport const DoctorLandingView = () => {\n    return (\n        <div>\n            <h1>DOCTOR LANDING</h1>\n        </div>\n    )\n}\n","import React, { useState } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  CloseButton,\n  AlertStatus\n} from '@chakra-ui/react';\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { FunctionError, LoginData, LoginError  } from '../../http/types';\nimport { FunctionOk } from '../../http/types';\nimport { useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\n\ntype AlertData = {\n  status: AlertStatus;\n  title: string;\n  description: string;\n  show: boolean;\n}\n\nexport const LoginView = () => {\n  const defaultAlert:AlertData = { status: 'info', title: '', description: '', show: false }\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  const history = useHistory()\n\n  const [alert, setAlert] = useState(defaultAlert)\n\n  const onSubmit = (values: LoginData) => {\n    const ok: FunctionOk = (statusCode, data) => {\n      console.log('Redirecting to home page...')\n      setAlert(defaultAlert)\n      history.push(routes.patientHome.path)\n    }\n    const error: FunctionError = (statusCode, error) => {\n      console.log(error);\n      const loginError = error as LoginError;\n      setAlert({ status: 'error', title: 'Ups!', description: loginError.credentials[0], show: true })\n    }\n    http.login(values, ok, error);\n  }\n\n  return (\n    <>\n      {alert.show && <Box\n        w={{ base: '90%', md: '75%' }}\n        mx='auto'\n        pos='fixed'\n        top='5rem'\n        left='50%'\n        transform='translateX(-50%)'>\n        <Alert status={alert.status} variant='left-accent'>\n          <AlertIcon />\n          <AlertTitle mr={2}>{alert.title}</AlertTitle>\n          <AlertDescription mr={8}>{alert.description}</AlertDescription>\n          <CloseButton\n            position=\"absolute\"\n            right=\"8px\"\n            top=\"8px\"\n            onClick={() => setAlert(defaultAlert)} />\n        </Alert>\n      </Box>}\n      <Flex\n        flexGrow={1}\n        h={'100%'}\n        align={'center'}\n        justify={'center'}\n        bg={useColorModeValue('gray.100', 'gray.800')}\n      >\n        <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n          <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n          <Box\n            p={8}\n            bg={useColorModeValue('white', 'gray.700')}\n            minW='xs'\n            rounded={'lg'}\n            boxShadow={'lg'}\n          >\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb='4'\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor=\"email\">Correo</FormLabel>\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb='4'\n                isInvalid={Boolean(errors.password)}>\n                <FormLabel htmlFor='password'>Contraseña</FormLabel>\n                <Input\n                  name='password'\n                  type=\"password\"\n                  autoComplete='off'\n                  ref={register({ required: true })}\n                />\n              </FormControl>\n              <Stack spacing={8}>\n                <ChakraLink>¿Olvidó la contraseña?</ChakraLink>\n                <Button type=\"submit\">Entrar</Button>\n              </Stack>\n            </form>\n          </Box>\n        </Stack>\n      </Flex>\n    </>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData, FunctionOk, FunctionError } from '../../http/types';\nimport { http } from '../../http/client';\n\nexport const SignUpView = () => {\n  const MB = 4\n\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n\n  const onSubmit = (values: SignUpData) => {\n    console.log(values);\n    const ok: FunctionOk = (statusCode, data) => {\n      // TODO: Implement redirect\n      console.log('Redirecting to home page...')\n      console.log(data)\n      // setAlert(defaultAlert)\n    }\n    const error: FunctionError = (statusCode, error) => {\n      console.log(error);\n      // setAlert({ status: 'error', title: 'Ups!', description: loginError.credentials[0], show: true })\n    }\n    http.signup(values, ok, error);\n  }\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n\t\t\td={'flex'}\n\t\t\tflexGrow={1}\n\t\t>\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import { routes } from \"../../routes/routes\";\n\nexport interface NavItem {\n  label: string;\n  subLabel?: string;\n  children?: Array<NavItem>;\n  path?: string;\n}\n\nexport const navbarItems: Array<NavItem> = [\n  {\n    label: 'Inicio',\n    path: routes.default.path,\n  },\n  {\n    label: 'Contacto',\n    path: routes.contact.path,\n  },\n]\n\n// ---------- STRUCTURE-----------\n// {\n//   label: 'Compartir',\n//   path: '/share',\n// },\n// {\n//   label: 'Doctores',\n//   children: [\n//     {\n//       label: 'Job Board',\n//       subLabel: 'Find your dream design job',\n//       path: '#',\n//     },\n//     {\n//       label: 'Freelance Projects',\n//       subLabel: 'An exclusive list for contract work',\n//       path: '#',\n//     },\n//   ],\n// },\n","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport { useDisclosure } from '@chakra-ui/hooks';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronDownIcon } from '@chakra-ui/icons';\nimport { Flex, Link as ChakraLink, Stack, Text } from '@chakra-ui/layout';\nimport { Collapse } from '@chakra-ui/transition';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { ColorModeSwitcher } from '../../theme/ColorModeSwitcher';\nimport { navbarItems, NavItem } from './navbarItems';\n\ntype mobileNavbarProps = {\n  closeNavbar: any\n}\n\nexport const MobileNavbar = ({closeNavbar} : mobileNavbarProps) => {\n    return (\n        <Stack\n          bg={useColorModeValue('primary.50', 'primary.900')}\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <div key={navItem.label} onClick={closeNavbar} >\n              <MobileNavItem  {...navItem} />\n            </div>\n          ))}\n          <span onClick={closeNavbar}><ColorModeSwitcher label='Cambiar tema'/></span>\n        </Stack>\n      );\n}\n\nconst MobileNavItem = ({ label, children, path }: NavItem) => {\n    const { isOpen, onToggle } = useDisclosure();\n  \n    return (\n      <Stack spacing={4} onClick={children && onToggle}>\n        <Link to={path ?? '/'}>\n          <Flex\n            py={2}\n            px={4}\n            justify={'space-between'}\n            align={'center'}\n            _hover={{background: useColorModeValue('primary.100', 'primary.800')}}\n          >\n            <Text\n              fontWeight={600}\n            >\n              {label}\n            </Text>\n            {children && (\n              <Icon\n                as={ChevronDownIcon}\n                transition={'all .25s ease-in-out'}\n                transform={isOpen ? 'rotate(180deg)' : ''}\n                w={6}\n                h={6}\n              />\n            )}\n          </Flex>\n        </Link>\n        <Collapse in={isOpen} animateOpacity style={{ marginTop: '0!important' }}>\n          <Stack\n            mt={2}\n            pl={4}\n            borderLeft={1}\n            borderStyle={'solid'}\n            align={'start'}>\n            {children &&\n              children.map((child) => (\n                <Link key={child.label} to={child.path ?? '/'}>\n                  <ChakraLink as='span' py={2}>\n                    {child.label}\n                  </ChakraLink>\n                </Link>\n              ))}\n          </Stack>\n        </Collapse>\n      </Stack>\n    );\n  };\n  ","import { useColorModeValue } from '@chakra-ui/color-mode';\nimport Icon from '@chakra-ui/icon';\nimport { ChevronRightIcon } from '@chakra-ui/icons';\nimport { Box, Flex, Stack, Link as ChackraLink, Text } from '@chakra-ui/layout';\nimport { Popover, PopoverContent, PopoverTrigger } from '@chakra-ui/popover';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { navbarItems, NavItem } from './navbarItems';\n\nexport const DesktopNavbar = ():JSX.Element => {\n  return <>\n    <Stack direction={'row'} spacing={4}>\n      {navbarItems.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={'hover'} placement={'bottom-start'}>\n            <PopoverTrigger>\n              <ChackraLink as='span' p={2} fontSize={'sm'} fontWeight={600}>\n                <Link to={navItem.path ?? '/'}>\n                  {navItem.label}\n                </Link>\n              </ChackraLink>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={'xl'}\n                // bg={useColorModeValue('white', 'gray.800')}\n                p={4}\n                rounded={'xl'}\n                minW={'sm'}>\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  </>\n}\n\n\nconst DesktopSubNav = ({ label, path, subLabel }: NavItem) => {\n  return (\n    <Link to={path ?? '/'}>\n    <ChackraLink\n      as='span'\n      role={'group'}\n      display={'block'}\n      p={2}\n      rounded={'md'}\n      color={useColorModeValue('blue.800', 'white')}\n    >\n      <Stack direction={'row'} align={'center'}>\n        <Box>\n          <Text\n            transition={'all .3s ease'}\n            _groupHover={{ color: useColorModeValue('blue.400', 'blue.300')}}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={'sm'}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={'all .3s ease'}\n          transform={'translateX(-10px)'}\n          opacity={0}\n          _groupHover={{ opacity: '100%', transform: 'translateX(0)' }}\n          justify={'flex-end'}\n          align={'center'}\n          flex={1}>\n          <Icon color={'blue.400'} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </ChackraLink>\n    </Link>\n  );\n};\n\n","import * as React from \"react\"\nimport {\n    Box,\n    Flex,\n    Text,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useColorModeValue,\n    useBreakpointValue,\n    useDisclosure,\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\nimport { MobileNavbar } from \"./MobileNavbar\";\nimport { DesktopNavbar } from \"./DesktopNavbar\";\nimport { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\nimport { Link } from \"react-router-dom\";\nimport { routes } from \"../../routes/routes\";\n\nexport const Navbar = ({userType}:any) => {  \n\n  const { isOpen, onToggle } = useDisclosure();\n  \n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue('primary.500','primary.800')}\n        color='white'\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n          <Link to={routes.default.path}>\n            <Text\n              textAlign={useBreakpointValue({ base: 'center', md: 'left' })}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n              color='white'\n            >\n              {/* TODO: replace for logo */}\n              Doctory\n            </Text>\n          </Link>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10}>\n            <DesktopNavbar />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n          <Link to={routes.login.path} style={{marginLeft: '0'}}>\n            <Button\n              size={'md'}\n              fontSize={'sm'}\n              variant={'ghost'}\n              as='button'\n            >\n              {/* TODO: when logged in, display none */}\n              Iniciar sesión\n            </Button>\n          </Link>\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNavbar closeNavbar={onToggle} />\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Box } from '@chakra-ui/layout';\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { routes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\n\nexport const AppRouter = () => {\n  // const [isLoggedIn, setisLoggedIn] = useState(false);\n  // const [useType, setUserType] = useState('PAC');\n\n  return (\n    <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n      <Router>\n        <Box w='100%'>\n          <Navbar />\n        </Box>\n        <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n          <Switch>\n            <Route exact path={routes.default.path} component={routes.default.component} />\n            <Route exact path={routes.login.path} component={routes.login.component} />\n            <Route exact path={routes.signin.path} component={routes.signin.component} />\n            <Route exact path={routes.patientHome.path} component={routes.patientHome.component} />\n            {/* <Route exact path={paths.contact.path} component={} /> TODO: create contact component */}\n            <Route path={routes.notFound.path} component={routes.notFound.component} />\n            <Redirect to={routes.notFound.path} />\n          </Switch>\n          <Footer />\n        </Box>\n      </Router>\n  </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\n\nexport const DoctoryApp = () => (\n  <ChakraProvider theme={customTheme}>\n    <AppRouter />\n  </ChakraProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}