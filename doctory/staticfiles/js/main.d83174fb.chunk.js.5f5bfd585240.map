{"version":3,"sources":["theme/ColorModeSwitcher.tsx","utils/token.ts","http/client.ts","provider/AuthProvider.tsx","hooks/usePasswordValidation.jsx","views/AuthViews/validPasswordChecklist.tsx","assets/SecureImage.svg","assets/DoctorsInComputerImage.svg","assets/DoctorWithPhoneImage.svg","assets/PresonInComputerImage.svg","views/Landing/Landing.tsx","views/Medic/PatientsTable.tsx","views/NotFoundPage/NotfoundPage.tsx","components/PresentationCard.tsx","assets/PowerPeople_Emma.png","components/TimeLine/AddButton.tsx","utils/utils.ts","views/Patient/NewConditionForm.tsx","components/TimeLine/TimeLine.tsx","components/TimeLine/TimeLineItem.tsx","views/Patient/ConditionsTimeLine.tsx","views/Patient/ConditionsTable.tsx","views/Patient/PatientHomeView.tsx","utils/typesDefinitions.ts","views/Profile/ChangePasswordForm.tsx","routes/routes.ts","views/AuthViews/LoginView.tsx","views/AuthViews/SignUpView.tsx","views/Profile/ProfileView.tsx","views/Medic/MedicHomeView.tsx","views/Navbar/Navbar.tsx","views/Footer/Footer.tsx","views/AuthViews/LoadingView.tsx","routes/AppRouter.tsx","theme/customTheme.tsx","DoctoryApp.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","display","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","mx","onClick","icon","aria-label","getToken","localStorage","getItem","setToken","token","setItem","clearToken","removeItem","http","url","document","location","origin","fetch","this","headers","res","json","data","status","types","fields","method","body","JSON","stringify","values","Object","keys","errors","map","key","join","Error","id","params","defaultContextValues","authContext","type","isLoggedIn","isLoading","login","logout","UserContext","createContext","AuthProvider","children","useState","setAuthContext","useEffect","getUserType","then","undefined","Provider","value","_","usePasswordValidation","password","requiredLength","hasNumber","hasUpperCase","hasLowerCase","hasSpecialChar","hasValidLength","isValid","validPassword","setValidPassword","validation","test","toLowerCase","toUpperCase","length","ValidPasswordChecklist","iconStates","textStates","valid","invalid","fontSize","spacing","alignItems","as","CheckIcon","bulletList","title","listItems","PatientsTable","patients","linkColor","patient","Link","to","routes","path","replace","String","first_name","last_name","dob","blood_type","NotfoundPage","PresetationCard","userData","avatar","maxW","base","md","borderRadius","maxH","src","textAlign","whiteSpace","textOverflow","overflow","email","AddButton","bg","rounded","cursor","_hover","Add","w","h","p","isValidDate","Date","parse","now","NewConditionForm","formId","onSubmit","backgroundSubtypes","useForm","register","handleSubmit","isRequired","mb","isInvalid","Boolean","name","htmlFor","autoComplete","placeholder","ref","required","message","description","background_subtype","x","date_of_diagnosis","validate","TimeLine","useMediaQuery","theme","breakpoints","isMobile","d","flexDirection","flexGrow","pb","className","position","my","sx","backgroundColor","content","left","width","height","TimeLineItem","conditionTitle","conditionDescription","justifyContent","paddingRight","paddingLeft","m","alignSelf","right","boxShadow","top","transform","isTruncated","noOfLines","fontWeight","zIndex","ConditionsTimeLine","conditions","condition","ConditionsTable","lg","ml","background_subtype_name","PatientHomeView","patientId","useParams","sex","setUserData","useDisclosure","isOpen","onOpen","onClose","setBackgroundSubtype","setConditions","toast","useToast","toastPosition","useBreakpointValue","drawerPlacement","onError","duration","isClosable","mutateNewCondition","useMutation","newCondition","onSuccess","conds","sort","y","mutate","useQuery","getProfileInfo","pt","isFitted","overflowX","placement","borderBottomWidth","form","leftIcon","colorScheme","mr","bottom","userTypes","sexTypes","ChangePasswordForm","initialPassword","setInitialPassword","setPassword","onChange","e","target","password2","onPaste","preventDefault","publicRoutes","default","component","landingImage","DoctorWithPhoneImage","DoctorsInComputerImage","align","justify","py","alt","sm","xl","signup","isFullWidth","SecureImage","direction","list","i","item","indx","PresonInComputerImage","useContext","history","useHistory","push","home","px","minW","pattern","MB","contact","notFound","protectedRoutes","profile","setIsLoading","allergiesObject","setAllergiesObject","lastKnownAllergiesId","setLastKnownAllergiesId","specialties","setSpecialties","setData","setValue","ok","useCallback","medic","includes","allergies","localLastKownID","allergy","parseArrayToAllergiesObject","onSettled","updateProfile","mutatePassword","updatePassword","BulletPoint","boxSize","borderColor","filter","defaultValue","disabled","license","specialty","index","setArrValue","newValues","handleValueArrChange","s","allergyId","findIndex","handleAllergieChange","obj","newValue","setPatients","getPatients","Navbar","onToggle","navbarItems","setNavbarItems","homePath","setHomePath","mobileContainerHover","loggedInItems","label","minH","borderBottom","borderStyle","flex","Close","Hamburger","fontFamily","navItem","in","animateOpacity","Footer","borderTop","marginStart","getFullYear","LoadingView","isIndeterminate","AppRouter","k","exact","customTheme","extendTheme","colors","primary","50","100","200","300","400","500","600","700","800","900","queryClient","QueryClient","DoctoryApp","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d83174fb.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype swtchProps = {\n  display?: { base: string; md: string; },\n}\n\nexport const ColorModeSwitcher = ({display}: swtchProps) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <>\n      <IconButton \n        display={display}\n        size=\"md\"\n        variant=\"ghost\"\n        color=\"current\"\n        mx={2}\n        onClick={toggleColorMode}\n        icon={<SwitchIcon />}\n        aria-label= {`Switch to ${text} mode`}\n      />\n    </>\n  )\n}\n","\nexport const getToken = () => {\n  return localStorage.getItem('doctory_token');\n}\nexport const setToken = (token: string) => {\n  localStorage.setItem('doctory_token', token);\n}\nexport const clearToken = () => {\n  localStorage.removeItem('doctory_token');\n}","import { \n  userInformation,\n  LoginData,\n  SignUpData,\n  ConditionData,\n  ChangePasswordData\n} from './types';\nimport { getToken, setToken } from '../utils/token';\n\nclass Http {\n  private url = process.env.NODE_ENV === 'development' ? 'http://localhost:8000' : document.location.origin;\n\n  public async getUserType() {\n    const res = await fetch(`${this.url}/api/v1/type/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data.types;\n    return null;\n  }\n\n  public async login(fields:LoginData) {\n    const res = await fetch(`${this.url}/api/v1/login/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async signup(fields:SignUpData) {\n    const res = await fetch(`${this.url}/api/v1/signup/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) {\n      setToken(data.data.token);\n      return data.data.types;\n    }\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n  \n  public async newCondition(fields:ConditionData) {\n    const res = await fetch(`${this.url}/api/v1/conditions/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${getToken()}`\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 201) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async conditions(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/conditions/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    \n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async backgroundSubtypes() {\n    const res = await fetch(`${this.url}/api/v1/background-subtypes/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n    if(res.status === 200) return data.data;\n\n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getProfileInfo(id:number|null = null) {\n    const params = id? `?patient_id=${id}` : ''\n    const res = await fetch(`${this.url}/api/v1/profile/${params}`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updateProfile(fields:userInformation) {\n    const res = await fetch(`${this.url}/api/v1/profile/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async updatePassword(fields:ChangePasswordData) {\n    const res = await fetch(`${this.url}/api/v1/change-password/`, {\n      method: 'PUT',\n      headers: {\n        'Authorization': `Token ${getToken()}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(fields)\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n\n  public async getPatients() {\n    const res = await fetch(`${this.url}/api/v1/patients/`, {\n      headers: {\n        'Authorization': `Token ${getToken()}`\n      }\n    });\n    const data = await res.json();\n\n    if(res.status === 200) return data.data;\n    \n    const values = Object.keys(data.errors).map(key => data.errors[key].join(';'))[0]\n    if(res.status === 400) throw new Error(values)\n    if(res.status === 500) throw new Error('Error con el servidor. Contacte al equipo administrador.')\n  }\n}\n\nexport const http = new Http();\n","import React, { useState, FC, useEffect } from 'react';\nimport { createContext } from \"react\";\nimport { http } from '../http/client';\nimport { clearToken, getToken } from '../utils/token';\n\n\ntype authContextStateType = {\n  type?: string[],\n  isLoggedIn: boolean,\n  isLoading: boolean,\n}\n\ntype authContextType = {\n  authContext: authContextStateType,\n  login: (type: string[]) => void,\n  logout: () => void,\n}\n\nconst defaultContextValues: authContextType = {\n  authContext: { type: [''], isLoggedIn: false, isLoading: true },\n  login: () => {},\n  logout: () => {},\n}\n// Context\nexport const UserContext = createContext<authContextType>(defaultContextValues);\n\n// Provider\nexport const AuthProvider : FC = ({ children }) => {\n  \n  const [authContext, setAuthContext] = useState<authContextStateType>(defaultContextValues.authContext);\n\n  const login = (type : string[]) => {\n    setAuthContext(_ => ({\n      type,\n      isLoggedIn: true,\n      isLoading: false,\n    }));\n  };\n\n  const logout = () => {\n    clearToken();\n    setAuthContext(_ => ({\n      type: [''],\n      isLoggedIn: false,\n      isLoading: false,\n    }));\n  };\n\n  useEffect(() => {\n    if(getToken()) { // If there's already a Token in storage we validate it\n      http.getUserType().then(type => {\n        if(!type) {\n          clearToken();\n          setAuthContext({type:undefined, isLoggedIn: false, isLoading: false})\n        }else{\n          setAuthContext({type:type, isLoggedIn: true, isLoading: false})\n        }\n      })\n    }else{\n      setAuthContext({type:undefined, isLoggedIn: false,  isLoading: false})\n    }\n\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ authContext, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}\n","import { useState, useEffect } from 'react'\n\nexport const usePasswordValidation = ({\n  password = '',\n  requiredLength = 8,\n}) => {\n  const [validPassword, setValidPassword] = useState({\n    hasNumber: null,\n    hasUpperCase: null,\n    hasLowerCase: null,\n    hasSpecialChar: null,\n    hasValidLength: null,\n    isValid: null,\n  })\n\n  useEffect(() => {\n    const validation = {};\n    validation.hasNumber = /\\d/.test(password);\n    validation.hasUpperCase = password.toLowerCase() !== password;\n    validation.hasLowerCase = password.toUpperCase() !== password;\n    validation.hasSpecialChar = /[ `!@#$%^&*()_+\\-=\\]{};':\"\\\\|,.<>?~]/.test(password);\n    validation.hasValidLength = password.length >= requiredLength;\t\t\n    validation.isValid = validation.hasNumber && validation.hasUpperCase && validation.hasLowerCase && validation.hasSpecialChar && validation.hasValidLength;\n    setValidPassword(validation);\n  }, [password, requiredLength])\n  \n\n  return validPassword;\n}\n","import React from 'react'\nimport { CheckIcon } from '@chakra-ui/icons'\nimport { List, ListItem, ListIcon, useColorModeValue } from '@chakra-ui/react'\n\ntype passwordChecklistPropsTypes = {\n  hasNumber: boolean,\n  hasUpperCase: boolean,\n  hasLowerCase: boolean,\n  hasSpecialChar: boolean,\n  hasValidLength: boolean\n}\n\nexport const ValidPasswordChecklist = ({\n  hasNumber,\n  hasUpperCase,\n  hasLowerCase,\n  hasSpecialChar,\n  hasValidLength,\n}: passwordChecklistPropsTypes) => {\n  const iconStates = {\n    valid: 'green.500',\n    invalid: 'gray.500',\n  }\n  const textStates = {\n    valid: useColorModeValue('gray.800','gray.100'),\n    invalid: 'gray.500',\n  }\n  return (\n    <List fontSize={'0.75em'} spacing={2}>\n      <ListItem\n        color={hasNumber ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasNumber ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un número\n      </ListItem>\n      <ListItem\n        color={hasUpperCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasUpperCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una mayúscula\n      </ListItem>\n      <ListItem\n        color={hasLowerCase ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasLowerCase ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene una minúscula\n      </ListItem>\n      <ListItem\n        color={hasSpecialChar ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasSpecialChar ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene un caracter especial\n      </ListItem>\n      <ListItem\n        color={hasValidLength ? textStates.valid : textStates.invalid}\n        display='flex'\n        alignItems='center'\n      >\n        <ListIcon\n          as={CheckIcon}\n          color={hasValidLength ? iconStates.valid : iconStates.invalid}\n        />\n        Contiene mínimo 8 caracteres\n      </ListItem>\n    </List>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/SecureImage.1ecb348c.svg\";","export default __webpack_public_path__ + \"static/media/DoctorsInComputerImage.9b5784fb.svg\";","export default __webpack_public_path__ + \"static/media/DoctorWithPhoneImage.c8f46967.svg\";","export default __webpack_public_path__ + \"static/media/PresonInComputerImage.81476f02.svg\";","import React from 'react';\nimport { Button } from '@chakra-ui/button';\nimport { Image } from '@chakra-ui/react'\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Container, Flex, Heading, HStack, List, ListIcon, ListItem, Stack, Text, VStack } from '@chakra-ui/layout';\nimport { useBreakpointValue } from '@chakra-ui/media-query';\nimport { CheckIcon } from '@chakra-ui/icons';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport SecureImage from '../../assets/SecureImage.svg';\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport DoctorWithPhoneImage from '../../assets/DoctorWithPhoneImage.svg';\nimport PresonInComputerImage from '../../assets/PresonInComputerImage.svg';\n\nconst bulletList = [{\n  title: 'Con una cuenta de paciente:',\n  listItems: [\n    'Administrar tu historia médica',\n    'Compartir tu historia médica con tu doctor',\n    'Organizar tus estudios médicos'\n  ]\n},\n{\n  title: 'Con una cuenta de doctor:',\n  listItems: [\n    'Ver las historias médicas de tus pacientes',\n    'Organizar las notas de tus pacientes',\n    'Administrar tu historia médica',\n    'Organizar tus estudios médicos'\n  ]\n}, \n]\n\nexport const Landing = () => {\n\nconst landingImage = useBreakpointValue({ base: DoctorWithPhoneImage, md: DoctorsInComputerImage })\n\n  return (\n    <Container\n      w=\"100vw\"\n      h=\"100%\"\n      maxW=\"95%\"\n      d={'flex'}\n      flexGrow={1}\n      mx={{base:'1em', md:'2em'}}\n    >\n      <Flex\n        flexGrow={1}\n        align={'flex-start'}\n        justify={'center'}\n        py={12}\n        w={'100%'}\n      >\n        <VStack align=\"stretch\" spacing={{base: '5em', md:'10em'}} w={'100%'}>\n          {/**************  Call to Action Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={'1em'}>\n            <Box  w={'55%'} maxW='60em' align='center'>\n              <Image src={landingImage} alt={'Doctory'}/>\n            </Box>\n            <Box w={'40%'} maxW={{sm:'xs', md:'sm', xl:'md'}} align='center'>\n                <Heading as='h1' \n                  textAlign='left'\n                  mb={{base:'1em', lg:'2em'}} \n                  fontSize={{base:'2xl', md:'4xl', lg:'6xl'}}\n                  color={useColorModeValue('primary.500', 'white')}\n                >\n                  Doctory\n                </Heading>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} mb={'2em'} textAlign='left' fontWeight='medium'>\n                Administra tu historia clínica y compartela con tu doctor\n              </Text>\n              <Box textAlign='center' w={['90%', '50%']} >\n                <Link to={routes.signup.path}>\n                  <Button size={'md'} isFullWidth colorScheme={'primary'} >\n                    Unirse\n                  </Button>\n                </Link>\n              </Box>\n            </Box>\n          </HStack>\n          {/**************  Information is Secure Section **************/}\n          <HStack w={'100%'} justifyContent='center' spacing={{base:'1em', md:'3em'}}>\n            <Box  w={{base:'md', md:'xl'}} align='center'>\n              <Image src={SecureImage} alt={'Doctory'}/>\n            </Box>\n            <Box maxW={{base:'md', md:'sm'}} align='center'>\n              <Text fontSize={['xl', '2xl', '3xl', '4xl']} textAlign='left' fontWeight='normal'>\n                Tu información es segura y confidencial, tú decides con quien la compartes\n              </Text>\n            </Box>\n          </HStack>\n          {/************** Features Section **************/}\n          <Box>\n          <Text fontSize={['2xl', '3xl', '4xl', '5xl']} mb={'2em'} textAlign='center' fontWeight='medium'>\n           <Text as={'span'} color={useColorModeValue('primary.500', 'white')}>Doctory</Text> funciona para doctores y pacientes\n          </Text>\n          <Stack justifyContent='center' alignItems='center' direction={{base:'column-reverse', md:'row'}}>\n            <Box   maxW={'30em'} align='center' textAlign='left'>\n              {bulletList.map((list,i) => <div key={i+list.title}>\n                <Text key={'listTitle'+list.title} fontWeight='medium' fontSize='lg' mb={'1em'}>{list.title}</Text>\n                <List key={'listSection'+list.title}  spacing={3} mb={'2.5em'}>\n                {list.listItems.map((item, indx) => <div key={list.title+indx+item}>\n                  <ListItem>\n                    <ListIcon as={CheckIcon} color={'primary.400'} />\n                      {item}\n                  </ListItem>\n                </div>)}\n                </List>\n              </div>)}            \n            </Box>\n            <Box w={'100%'} maxW={{base:'20em', lg:'35em'}} align='center'>\n              <Image src={PresonInComputerImage} w='75%' alt={'Doctory'} mb={'2em'}/>\n            </Box>\n          </Stack>\n          </Box>\n          {/**************  Call to Action Section **************/}\n          <Box d={'flex'} justifyContent='center' w={'100%'}>\n            <Box textAlign='center' w='sm' >\n              <Link to={routes.signup.path}>\n                <Button size={'lg'} isFullWidth colorScheme={'primary'} >\n                  Unirse\n                </Button>\n              </Link>\n            </Box>\n          </Box>\n        </VStack>\n      </Flex>\n    </Container>\n  )\n}\n\n\n","import React from 'react';\nimport { Table, Tbody, Td, Th, Thead, Tr, Link as ChakraLink, useColorModeValue } from '@chakra-ui/react';\nimport { userInformation } from '../../http/types';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\n\ntype PatientsTableProps = {\n  patients: userInformation[];\n};\n\nexport const PatientsTable = ({ patients }: PatientsTableProps) => {\n  const linkColor = useColorModeValue('blue.600', 'blue.400');\n  return (\n    <Table variant=\"striped\">\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Edad</Th>\n          <Th>Tipo de sangre</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {patients.map((patient) => (\n          <Tr key={patient.id}>\n            <Td>\n              <ChakraLink \n                as={Link} \n                to={routes.patient.path.replace(':id', String(patient.id))}\n                color={linkColor}\n              >\n              {patient.first_name + ' ' + patient.last_name}\n              </ChakraLink>\n            </Td>\n            <Td>{patient.dob || '-'}</Td>\n            <Td>{patient.patient?.blood_type || '-'}</Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n","import React from 'react'\n\nexport const NotfoundPage = () => {\n  return (\n    <div>\n      <h1>404</h1>\n      <h2>Not found</h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Image } from '@chakra-ui/image'\nimport { Box, HStack, Text } from '@chakra-ui/layout'\nimport { userInformation } from '../http/types'\n\ntype presentationCardPropsTypes = {\n  userData: userInformation,\n  avatar?: string,\n}\n\nexport const PresetationCard = ({userData, avatar}:presentationCardPropsTypes) => {\n  \n  return (\n    <Box>\n      <HStack maxW={'100%'}>\n        <Box maxW={{base:'30%', md:'20%'}}>\n          <Image borderRadius=\"full\" maxH={'15em'} src={avatar}/>\n        </Box>\n        <Box \n          maxW={{base:'60%', md:'70%'}}\n          textAlign='left' \n          fontSize={{base:'sm', md:'xl'}}\n          whiteSpace='nowrap' \n        >\n          <Text \n            textOverflow='ellipsis'\n            overflow='hidden' \n            fontSize={{base:'md', md:'3xl'}}\n          >\n            {userData.first_name + ' ' + userData.last_name}\n          </Text>\n          {userData.dob &&\n            <Text>{userData.dob} </Text>\n          }\n          {userData.location &&\n            <Text textOverflow='ellipsis' overflow='hidden' >\n              {userData.location}\n            </Text>\n          }\n          <Text textOverflow='ellipsis' overflow='hidden' >\n            {userData.email}\n          </Text>\n        </Box>\n      </HStack>\n    </Box>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/PowerPeople_Emma.1670a887.png\";","import { useColorModeValue } from '@chakra-ui/color-mode'\nimport { AddIcon } from '@chakra-ui/icons'\nimport { Box } from '@chakra-ui/layout'\nimport React from 'react'\n\nexport const AddButton = () => {\n  return (\n      <Box\n        bg={useColorModeValue('primary.500', 'primary.200')}\n        rounded='50%'\n        cursor='pointer'\n        _hover={{\n          bg:useColorModeValue('primary.300', 'primary.300')\n        }}\n      >\n        <AddIcon \n          w='2em'\n          h='2em'\n          p='.5em'\n          color='white'\n        />\n      </Box>\n  )\n}\n","export const isValidDate = (value:string) => {\n  const date_of_diagnosis = Date.parse(value);\n  return date_of_diagnosis < Date.now();\n}","import React from 'react';\nimport {\n  Stack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n  Textarea,\n  Select\n} from '@chakra-ui/react';\nimport { BackgroundSubtypeData, ConditionData } from '../../http/types';\nimport { useForm } from 'react-hook-form';\nimport { isValidDate } from '../../utils/utils';\n\ntype NewConditionProps = {\n  formId: string;\n  onSubmit: (values:ConditionData) => void;\n  backgroundSubtypes: BackgroundSubtypeData[];\n}\n\nexport const NewConditionForm = ({ formId, onSubmit, backgroundSubtypes }: NewConditionProps) => {\n  const { register, handleSubmit, errors } = useForm<ConditionData>();\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.name)}>\n          <FormLabel htmlFor=\"name\">Nombre</FormLabel>\n          <Input\n            name=\"name\"\n            type=\"text\"\n            autoComplete='on'\n            placeholder='Diabetes tipo 1'\n            ref={register({required: 'El nombre es obligatorio'})}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n        <FormControl mb='4' isInvalid={Boolean(errors.description)}>\n          <FormLabel htmlFor=\"description\">Description</FormLabel>\n          <Textarea\n            name=\"description\"\n            placeholder='Descripción de la condición'\n            ref={register()}\n            size=\"sm\"\n          />\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.background_subtype)}>\n          <FormLabel htmlFor=\"background_subtype\">Tipo de condición</FormLabel>\n          <Select\n            name=\"background_subtype\"\n            ref={register()}>\n            {backgroundSubtypes.map(x => <option key={x.id} value={x.id}>{x.name}</option>)}\n          </Select>\n        </FormControl>\n        <FormControl\n          isRequired\n          mb='4'\n          isInvalid={Boolean(errors.date_of_diagnosis)}>\n          <FormLabel htmlFor=\"date_of_diagnosis\">Fecha de diagnóstico</FormLabel>\n          <Input\n            name=\"date_of_diagnosis\"\n            type=\"date\"\n            autoComplete='on'\n            ref={register({\n              required: 'La fecha es obligatoria',\n              validate: value => isValidDate(value) || 'La fecha no es válida'\n            })}/>\n          <FormErrorMessage>\n            {errors.date_of_diagnosis && errors.date_of_diagnosis.message}\n          </FormErrorMessage>\n        </FormControl>\n      </form>\n    </Stack>\n  )\n}","import React, { FC } from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Container } from '@chakra-ui/layout'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLine:FC = ({children}) => {\n\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexDirection='column'\n      flexGrow={1}\n      pb='0'\n    >\n      <Box\n        className='timeline-container'\n        d='flex'\n        flexDirection='column'\n        position='relative'\n        my='2em'\n        mb='0'\n        pb='2em'\n        sx={{\n          '::after':{\n            backgroundColor: useColorModeValue('primary.500','primary.800'),\n            content:'\"\"',\n            position: 'absolute',\n            left: `${isMobile? '-0.1em': 'calc(50% - 0.1em)'}`, //(50% - 1/2(width))\n            width: '.2em',  //line with\n            height: '100%',\n          }\n        }}\n      >\n        {children}\n      </Box>\n    </Container>\n  )\n}","import React from 'react'\nimport theme from '@chakra-ui/theme'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\nimport { Box, Text, VStack } from '@chakra-ui/layout'\nimport { timeLineItemProps } from '../../utils/typesDefinitions'\nimport { useMediaQuery } from '@chakra-ui/media-query'\n\nexport const TimeLineItem = ({conditionTitle, date_of_diagnosis, conditionDescription}:timeLineItemProps) => {\n  const [isMobile] = useMediaQuery(`(max-width: ${theme.breakpoints.md}`);\n  return (\n    <Box\n      className='timeline-item'\n      position='relative'\n      d='flex'\n      justifyContent='flex-end'\n      paddingRight={`${isMobile? 'unset':'2em'}`} //distance between card and line\n      paddingLeft={`${isMobile? '2em':'unset'}`} //distance between card and line\n      m='.5em 0'\n      width={`${isMobile? '100%':'50%'}`}\n      sx={{\n        ':nth-of-type(odd)': {\n          alignSelf: 'flex-end',\n          justifyContent: 'flex-start',\n          paddingLeft: '2em', //distance between card and line\n          paddingRight: '0',\n        },\n        ':nth-of-type(odd) .timeline-item-content':{\n          textAlign: 'left',\n          alignItems:'flex-start',\n        },\n        ':nth-of-type(odd) .timeline-item-content::after':{ //little triangle of cards\n          right: 'auto',\n          left: '-.5em'\n        },\n        ':nth-of-type(odd) .timeline-item-content .circle':{\n          right: 'auto',\n          left: '-2.5em', //distance form card to circle (paddingRight from card + half of circle's with)\n        }\n      }}\n    >\n      <VStack\n        alignItems='flex-end'\n        p='1em'\n        spacing='0'\n        className='timeline-item-content'\n        boxShadow='lg'\n        rounded='lg'\n        bg={useColorModeValue('white', 'gray.700')}\n        w='100%'\n        textAlign={isMobile? 'left':'right'} \n        position='relative'\n        sx={{\n          '::after':{  //little triangle of cards\n            content:`' '`,\n            backgroundColor: useColorModeValue('white', 'gray.700'),\n            position: 'absolute',\n            top: 'calc(50% - 0.5em)',\n            right: `${isMobile? 'unset':'-0.5em'}`,\n            left: `${isMobile? '-.5em':'unset'}`,\n            transform: 'rotate(45deg)',\n            width: '1em',\n            height: '1em',\n          }\n        }}\n      >\n        <Text \n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='lg'\n          fontWeight='medium'\n          w='100%'\n        >\n          {conditionTitle}\n        </Text>\n        <Text \n          m={'0'}\n          isTruncated\n          noOfLines={1}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='medium'\n          textAlign='right'\n          w='100%'\n        >\n          {date_of_diagnosis}\n        </Text>\n        {conditionDescription &&\n        <Text\n          isTruncated\n          noOfLines={3}\n          whiteSpace='normal'\n          fontSize='xs'\n          fontWeight='normal'\n          textAlign='left'\n          w='100%'\n        >\n          {conditionDescription}\n        </Text>}\n        {/* Point of card in line */}\n        <Box as='span' \n          className=\"circle\" \n          bg={useColorModeValue('primary.500','primary.800')}\n          borderRadius='50%'\n          position='absolute'\n          top='calc(50% - .5em)' //half of height\n          w='1em'\n          h='1em'\n          right= {`${isMobile? 'unset':'-2.5em'}`} //distance form card to circle (paddingRight from card + half of circle's with)\n          left={`${isMobile? '-2.5em':'unset'}`}\n          zIndex='1' // circle on top from line\n        />\n      </VStack>\n    </Box>\n  )\n}\n","import React from 'react';\nimport { TimeLine } from '../../components/TimeLine/TimeLine';\nimport { TimeLineItem } from '../../components/TimeLine/TimeLineItem';\nimport { ConditionData } from '../../http/types';\n\ntype ConditionsTimeLineProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTimeLine = ({ conditions }:ConditionsTimeLineProps) => {\n  return(\n    <TimeLine>\n      {conditions.map((condition:ConditionData) => (\n        <TimeLineItem \n          key={condition.id}\n          conditionTitle={condition.name}\n          date_of_diagnosis={condition.date_of_diagnosis}\n          conditionDescription={condition.description}\n        />\n      ))}\n    </TimeLine>\n  )\n}","import React from 'react';\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from \"@chakra-ui/react\"\nimport { ConditionData } from '../../http/types';\n\ntype ConditionsTableProps = {\n  conditions: ConditionData[];\n}\n\nexport const ConditionsTable = ({ conditions }:ConditionsTableProps) => {\n  return (\n    <Table variant=\"striped\" width={{lg:'150%'}} ml={{lg:'-25%'}}>\n      <Thead>\n        <Tr>\n          <Th>Nombre</Th>\n          <Th>Descripción</Th>\n          <Th>Fecha de diagnóstico</Th>\n          <Th>Tipo de condición</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {\n          conditions.map((condition:ConditionData) => (\n            <Tr key={condition.id}>\n              <Td>{condition.name}</Td>\n              <Td>{condition.description}</Td>\n              <Td>{condition.date_of_diagnosis}</Td>\n              <Td>{condition.background_subtype_name}</Td>\n            </Tr>\n          ))\n        }\n      </Tbody>\n    </Table>\n  )\n}","import React, { useState } from 'react';\nimport { Box, Text, VStack } from '@chakra-ui/layout';\nimport { PresetationCard } from '../../components/PresentationCard';\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddButton } from '../../components/TimeLine/AddButton';\nimport { NewConditionForm } from './NewConditionForm';\nimport {\n  useDisclosure,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  useBreakpointValue,\n  ToastPosition,\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  DrawerProps\n} from '@chakra-ui/react';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { BackgroundSubtypeData, ConditionData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useToast } from \"@chakra-ui/react\"\nimport { useMutation, useQuery } from 'react-query';\nimport { ConditionsTimeLine } from './ConditionsTimeLine';\nimport { ConditionsTable } from './ConditionsTable';\nimport { useParams } from 'react-router';\n\nexport const PatientHomeView = () => {\n  const {id: patientId} = useParams();\n  const [userData, setUserData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  })\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  const [backgroundSubtypes, setBackgroundSubtype] = useState<BackgroundSubtypeData[]>([])\n  \n  const [conditions, setConditions] = useState<ConditionData[]>([])\n\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const drawerPlacement = useBreakpointValue({base: 'bottom', lg: 'right'});\n\n  const onSuccessNewCondition = (data:ConditionData) => {\n    const conds = [...conditions, data]\n    conds.sort((x, y) => x.date_of_diagnosis < y.date_of_diagnosis ? 1 : -1)\n    setConditions(conds)\n    onClose();\n    toast({\n      title: 'Condición creada',\n      description: 'Se ha añadido una nueva condición a tu historia clínica',\n      status: 'success',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate: mutateNewCondition } = useMutation('newCondition', (values:ConditionData) => http.newCondition(values), {onSuccess: onSuccessNewCondition, onError})\n\n  const onSubmit = (values:ConditionData) => {\n    mutateNewCondition(values);\n  }\n\n  useQuery('conditions', () => http.conditions(patientId), {\n    onSuccess: (data:ConditionData[]) => setConditions(data),\n    onError\n  })\n  useQuery('profile', () => http.getProfileInfo(patientId), {\n    onSuccess: (data:userInformation) => setUserData(data),\n    onError\n  })\n  useQuery('background-subtypes', () => http.backgroundSubtypes(), {\n    onSuccess: (data:BackgroundSubtypeData[]) => setBackgroundSubtype(data),\n    onError\n  })\n\n  return (\n    <>\n      <VStack>\n        <Text fontSize='4xl'>Historia Médica</Text>\n        <PresetationCard userData={userData} avatar={avatar}/>\n        <Box\n          w='100%'\n          pt='2rem'\n          maxW={{base: '100%', md: '75%', lg: '50%'}}\n        >\n          <Tabs isFitted>\n            <TabList>\n              <Tab>Línea del tiempo</Tab>\n              <Tab>Tabla</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <ConditionsTimeLine conditions={conditions}/>\n              </TabPanel>\n              <TabPanel overflowX={{base: 'scroll', lg: 'visible'}}>\n                <ConditionsTable conditions={conditions}/>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n        </Box>\n      </VStack>\n      {!patientId && <>\n        <Drawer \n          placement={drawerPlacement as DrawerProps['placement']}\n          isOpen={isOpen}\n          onClose={onClose}>\n            <DrawerOverlay>\n              <DrawerContent>\n                <DrawerCloseButton/>\n                <DrawerHeader borderBottomWidth='1px'>\n                  Nueva condición\n                </DrawerHeader>\n\n                <DrawerBody>\n                  <NewConditionForm\n                    onSubmit={onSubmit}\n                    formId='form-condition'\n                    backgroundSubtypes={backgroundSubtypes}/>\n                </DrawerBody>\n                \n                <DrawerFooter>\n                  <Button\n                    type='submit'\n                    form='form-condition'\n                    leftIcon={<AddIcon/>}\n                    colorScheme='primary'>Añadir</Button>\n                </DrawerFooter>\n              </DrawerContent>\n            </DrawerOverlay>\n        </Drawer>\n        <Box\n          display='inline-block'\n          ml='auto'\n          mr='1rem'\n          mb='1rem'\n          position='sticky'\n          bottom='1rem'\n          onClick={onOpen}\n        >\n          <AddButton/>\n        </Box>\n      </>\n      }\n    </>\n  )\n}\n","export const userTypes = {\n  PATIENT: 'PAT',\n  MEDIC: 'MED',\n}\n\nexport const sexTypes = {\n  MALE: 'M',\n  FEMALE: 'F',\n  OTHER: 'O',\n  NOT_SPECIFIED: 'U',\n}\n\nexport type timeLineItemProps = {\n  conditionTitle: string,\n  date_of_diagnosis: string,\n  conditionType?: string,\n  conditionSubtype?: string,\n  conditionDescription?: string,\n}\n","import React, {useState, ChangeEvent} from 'react';\nimport { \n  Stack,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input\n } from '@chakra-ui/react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from '../AuthViews/validPasswordChecklist';\nimport { ChangePasswordData } from '../../http/types';\n\n\ntype ChangePasswordProps = {\n  formId: string;\n  onSubmit: SubmitHandler<ChangePasswordData>;\n}\n\nexport const ChangePasswordForm = ({formId, onSubmit}:ChangePasswordProps) => {\n  const { register, handleSubmit, errors } = useForm<ChangePasswordData>();\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n  const [password, setPassword] = useState<string>('');\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n  \n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n\n  return (\n    <Stack>\n      <form id={formId} onSubmit={handleSubmit(onSubmit)}>\n      <FormControl\n        mb='4'\n        isInvalid={Boolean(initialPassword ? !isValid : null)}>\n        <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n        <Input\n          name='password1'\n          type='password'\n          autoComplete='off'\n          placeholder='Contraseña segura'\n          value={password}\n          onChange={handlePasswordChange}\n          ref={register({ required: true })}\n          mb={4}\n        />\n        {!isValid && <ValidPasswordChecklist\n          hasNumber={hasNumber}\n          hasLowerCase={hasLowerCase}\n          hasUpperCase={hasUpperCase}\n          hasSpecialChar={hasSpecialChar}\n          hasValidLength={hasValidLength} />}\n      </FormControl>\n\n      <FormControl\n        mb={4}\n        isInvalid={Boolean(errors.password2)}>\n        <FormLabel htmlFor='password2'>\n          Confirmar contraseña\n        </FormLabel>\n        <Input\n          name='password2'\n          type='password'\n          autoComplete='off'\n          placeholder='Repetir contraseña'\n          onPaste={e => e.preventDefault()}\n          ref={register({\n            required: 'Es obligatorio confirmar la contraseña',\n            validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n          })}\n        />\n        <FormErrorMessage>\n          {errors.password2 && errors.password2.message}\n        </FormErrorMessage>\n      </FormControl>\n      </form>\n\n    </Stack>\n  )\n}","import { LoginView } from \"../views/AuthViews/LoginView\";\nimport { SignUpView } from \"../views/AuthViews/SignUpView\";\nimport { Landing } from \"../views/Landing/Landing\";\nimport { MedicHomeView } from \"../views/Medic/MedicHomeView\";\nimport { NotfoundPage } from \"../views/NotFoundPage/NotfoundPage\";\nimport { PatientHomeView } from \"../views/Patient/PatientHomeView\";\nimport { ProfileView } from \"../views/Profile/ProfileView\";\n\ntype route = {\n  path: string,\n  component: React.FC,\n}\n\nexport const publicRoutes: { [name: string]: route } = {\n  default: { path: '/', component: Landing },\n  login: { path: '/login', component: LoginView },\n  signup: { path: '/signup', component: SignUpView },\n  contact: { path: '/contact', component: NotfoundPage },\n  notFound: { path: '/404', component: NotfoundPage },\n}\n\nexport const protectedRoutes: { [name: string]: route } = {\n  profile: { path: '/profile', component: ProfileView },\n  home: { path: '/home', component: PatientHomeView },\n  patient: { path: '/patient/:id', component: PatientHomeView },\n  medic: { path: '/med/home', component: MedicHomeView }, //UNIFY WITH HOME\n}\n\nexport const routes: { [name: string]: route } = {\n  ...publicRoutes,\n  ...protectedRoutes,\n};\n","import React, { useContext } from 'react';\nimport {\n  Flex,\n  Box,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Stack,\n  Link as ChakraLink,\n  Button,\n  Heading,\n  useColorModeValue,\n  useToast,\n  Divider,\n  Text,\n  useBreakpointValue,\n  ToastPosition\n} from '@chakra-ui/react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport { http } from '../../http/client';\nimport { useForm } from 'react-hook-form';\nimport { LoginData } from '../../http/types';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\n\n\nexport const LoginView = () => {\n  const { login } = useContext(UserContext);\n  const { register, handleSubmit, errors } = useForm<LoginData>();\n  const history = useHistory()\n  \n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  \n  const onSuccess = (type: string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('login', (values:LoginData) => http.login(values), {onSuccess, onError})\n  \n  const onSubmit = (values: LoginData) => {\n    mutate(values);\n  }\n\n  return (\n    <Flex\n      flexGrow={1}\n      h={'100%'}\n      align={'center'}\n      justify={'center'}\n      bg={useColorModeValue('gray.100', 'gray.800')}\n    >\n      <Stack align={'center'} spacing={8} mx={'auto'} maxW={'lg'} py={12} px={6}>\n        <Heading fontSize={'4xl'}>Iniciar sesión</Heading>\n        <Box\n          p={8}\n          bg={useColorModeValue('white', 'gray.700')}\n          minW='xs'\n          rounded={'lg'}\n          boxShadow={'lg'}\n        >\n\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.email)}>\n              <FormLabel htmlFor=\"email\">Correo</FormLabel>\n              <Input\n                name=\"email\"\n                type=\"email\"\n                autoComplete='on'\n                placeholder='ejemplo@gmail.com'\n                ref={register({\n                  required: 'El correo electrónico es obligatorio',\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: 'Ingresa un correo electrónico válido',\n                  },\n                })}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              mb='4'\n              isInvalid={Boolean(errors.password)}>\n              <FormLabel htmlFor='password'>Contraseña</FormLabel>\n              <Input\n                name='password'\n                type=\"password\"\n                autoComplete='off'\n                ref={register({ required: true })}\n              />\n            </FormControl>\n            <Stack spacing={8}>\n              <Button type=\"submit\">Entrar</Button>\n            </Stack>\n          </form>\n          <Divider my={4}/>\n          <Box textAlign={'center'} >\n            <ChakraLink \n              as={Link}\n              to={routes.signup.path}>\n                <Text color={useColorModeValue('primary.500', 'primary.300')}>Crear una nueva cuenta</Text>\n            </ChakraLink>\n          </Box>\n        </Box>\n      </Stack>\n     \n    </Flex>\n  );\n}\n","import React, { ChangeEvent, useState, useContext } from 'react'\nimport {\n  Flex,\n  Box,\n  FormErrorMessage,\n  FormControl,\n  FormLabel,\n  Input,\n  Stack,\n  Button,\n  Heading,\n  useColorModeValue,\n  Container,\n  useToast,\n  Link as ChakraLink,\n  useBreakpointValue,\n  ToastPosition,\n} from '@chakra-ui/react'\nimport { useForm } from 'react-hook-form';\nimport { usePasswordValidation } from '../../hooks/usePasswordValidation';\nimport { ValidPasswordChecklist } from './validPasswordChecklist';\nimport { SignUpData } from '../../http/types';\nimport { http } from '../../http/client';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes } from '../../routes/routes';\nimport { useMutation } from 'react-query';\nimport { UserContext } from '../../provider/AuthProvider';\n\nexport const SignUpView = () => {\n  const history = useHistory()\n  const { login } = useContext(UserContext);\n  const toast = useToast()\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const { register, handleSubmit, errors } = useForm<SignUpData>();\n\n  const onSuccess = (type:string[]) => {\n    login(type)\n    history.push(routes.home.path)\n  }\n  \n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const { mutate } = useMutation('signup', (values:SignUpData) => http.signup(values), {onSuccess, onError})\n  \n  const onSubmit = (values: SignUpData) => {\n    mutate(values);\n  }\n\n  const [password, setPassword] = useState<string>('');\n\n  const [initialPassword, setInitialPassword] = useState<boolean>(false);\n\n  const {\n    isValid,\n    hasValidLength,\n    hasNumber,\n    hasUpperCase,\n    hasLowerCase,\n    hasSpecialChar } = usePasswordValidation({ password });\n\n  const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.target.value);\n    setInitialPassword(true);\n  }\n  \n  const MB = 4\n\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n    >\n      <Flex\n        flexGrow={1}\n        align={'center'}\n        justify={'center'}>\n        <Stack\n          spacing={8}\n          maxW={'lg'}\n          py={12}\n          px={6}>\n          <Stack align={'center'}>\n            <Heading fontSize={'4xl'}>Registrarse</Heading>\n          </Stack>\n          <Box\n            rounded={'lg'}\n            minW={'xs'}\n            bg={useColorModeValue('white', 'gray.700')}\n            boxShadow={'lg'}\n            p={8}>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.first_name)}>\n                <FormLabel htmlFor='first_name'>Nombre</FormLabel>\n                <Input\n                  name='first_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Juan'\n                  ref={register({ required: 'El nombre es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.first_name && errors.first_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.last_name)}>\n                <FormLabel htmlFor='last_name'>Apellido</FormLabel>\n                <Input\n                  name='last_name'\n                  type='text'\n                  autoComplete='on'\n                  placeholder='Pérez'\n                  ref={register({ required: 'El apellido es obligatorio' })}\n                />\n                <FormErrorMessage>\n                  {errors.last_name && errors.last_name.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.email)}>\n                <FormLabel htmlFor='email'>Correo</FormLabel>\n                <Input\n                  name='email'\n                  type='email'\n                  autoComplete='on'\n                  placeholder='ejemplo@gmail.com'\n                  ref={register({\n                    required: 'El correo electrónico es obligatorio',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Ingresa un correo electrónico válido',\n                    },\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.email && errors.email.message}\n                </FormErrorMessage>\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(initialPassword ? !isValid : null)}>\n                <FormLabel htmlFor='password1'>Contraseña</FormLabel>\n                <Input\n                  name='password1'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Contraseña segura'\n                  value={password}\n                  onChange={handlePasswordChange}\n                  ref={register({ required: true })}\n                  mb={MB / 2}\n                />\n                {!isValid && <ValidPasswordChecklist\n                  hasNumber={hasNumber}\n                  hasLowerCase={hasLowerCase}\n                  hasUpperCase={hasUpperCase}\n                  hasSpecialChar={hasSpecialChar}\n                  hasValidLength={hasValidLength} />}\n              </FormControl>\n\n              <FormControl\n                mb={MB}\n                isInvalid={Boolean(errors.password2)}>\n                <FormLabel htmlFor='password2'>\n                  Confirmar contraseña\n                </FormLabel>\n                <Input\n                  name='password2'\n                  type='password'\n                  autoComplete='off'\n                  placeholder='Repetir contraseña'\n                  onPaste={e => e.preventDefault()}\n                  ref={register({\n                    required: 'Es obligatorio confirmar la contraseña',\n                    validate: (value: string) => value === password || 'Las contraseñas no coinciden'\n                  })}\n                />\n                <FormErrorMessage>\n                  {errors.password2 && errors.password2.message}\n                </FormErrorMessage>\n              </FormControl>\n              \n              <Button\n                onClick={_ => setInitialPassword(true)}\n                type='submit'>\n                Registrar\n              </Button>\n            </form>\n          </Box>\n          <Box display='flex' justifyContent='center'>\n            <ChakraLink as={Link} to={routes.login.path}>\n              ¿Ya con cuenta? Inicie Sesión\n            </ChakraLink>\n          </Box>\n        </Stack>\n      </Flex>\n    </Container>\n  )\n}","import React, { ChangeEvent, Dispatch, SetStateAction, useCallback, useState } from 'react'\nimport { useForm } from 'react-hook-form';\nimport {\n  Avatar,\n  AvatarBadge,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Select,\n  useColorModeValue,\n  useToast,\n  Box,\n  Container,\n  Flex,\n  Heading,\n  HStack,\n  Stack,\n  VStack,\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  useBreakpointValue,\n  ToastPosition,\n} from \"@chakra-ui/react\"\nimport avatar from '../../assets/PowerPeople_Emma.png';\nimport { AddIcon } from '@chakra-ui/icons';\nimport { FaCamera } from 'react-icons/fa';\nimport { sexTypes, userTypes } from '../../utils/typesDefinitions';\nimport { ChangePasswordData, userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { isValidDate } from '../../utils/utils';\nimport { ChangePasswordForm } from './ChangePasswordForm';\nimport { setToken } from '../../utils/token';\nimport { useMutation, useQuery } from 'react-query';\n\nexport const ProfileView = () => {\n  \n  const [isLoading, setIsLoading] = useState(true)\n  const [allergiesObject, setAllergiesObject] = useState<{id: number, value: string}[]>([{id:0,value:''},]);\n  const [lastKnownAllergiesId, setLastKnownAllergiesId] = useState(1)\n  const [specialties, setSpecialties] = useState(['']);\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n  const toast = useToast();\n  const [data, setData] = useState<userInformation>({\n    first_name: '',\n    last_name: '',\n    dob: '',\n    email: '',\n    sex: '',\n    type: [''],\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const { register, handleSubmit, errors, setValue } = useForm<userInformation>();\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  const ok = useCallback((_, data) => {\n    \n    const parseArrayToAllergiesObject = (allergies:string[] = ['']) => {\n      if (!allergies || allergies.length === 0) allergies = [''];\n      \n      let localLastKownID = lastKnownAllergiesId;\n      const res = allergies.map(allergy => ({\n        id: localLastKownID++,\n        value: allergy\n      }));    \n      setLastKnownAllergiesId(localLastKownID);\n      return res;\n    }\n    const userData = data as userInformation;\n    const {patient, medic} = userData;\n    setValue('sex', userData.sex)\n    setData(userData);\n    \n    if (userData.type.includes(userTypes.PATIENT)) {\n      register('patient.allergies');\n      setAllergiesObject(parseArrayToAllergiesObject(patient && patient.allergies));\n    }\n    if (userData.type.includes(userTypes.MEDIC)) {\n      register('medic.specialties');\n      setValue('medic.specialties', medic? medic.specialties : ['']);\n      setSpecialties(medic? medic.specialties : ['']);\n    }\n    setIsLoading(false);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[setValue, register])\n\n  useQuery('profile', () => http.getProfileInfo(), {\n    onSuccess: (data:userInformation) => ok(null, data),\n    onError,\n    onSettled: () => setIsLoading(false)\n  })\n\n  const { mutate } = useMutation('updateProfile', (values:userInformation) => http.updateProfile(values), {\n    onSuccess: () => {\n      toast({\n        description: '¡Tu información se ha guardado con éxito!',\n        status: 'success',\n        duration: 5000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const { mutate: mutatePassword } = useMutation('changePassword', (values:ChangePasswordData) => http.updatePassword(values), {\n    onSuccess: ({ token }:{token:string}) => {\n      setToken(token)\n      onClose()\n      toast({\n        title: 'Contraseña actualizada',\n        description: 'Tu contraseña se ha cambiado exitosamente. Los otros equipos dónde utilices doctory tendrán que volver a iniciar sesión.',\n        status: 'success',\n        duration: 10000,\n        isClosable: true,\n        position: toastPosition as ToastPosition,\n      })\n    },\n    onError,\n    onSettled: () => setIsLoading(false)\n  });\n\n  const onSubmit = (values: userInformation) => {\n    setIsLoading(true);\n    if (data.type.includes(userTypes.PATIENT)) {\n      values.patient && (values.patient.allergies = allergiesObject.map(x => x.value).filter(y => y !== ''));\n    }\n    mutate(values);\n  }\n\n  const addSpecialtyField = () => setSpecialties((s) => [...s, '']);\n  \n  const addAllergyField = () => {\n    setAllergiesObject(obj => {\n      const newValue = {id: lastKnownAllergiesId, value: ''};\n      setLastKnownAllergiesId(x => x+1);\n      return [...obj, newValue];\n    })\n  }\n\n  const handleValueArrChange = (e: ChangeEvent<HTMLInputElement>, index: number, name:string,  setArrValue: Dispatch<SetStateAction<string[]>>) => {\n    setArrValue(values => {\n      let newValues = [...values];\n      newValues[index] = e.target.value;\n      setValue(name, newValues);\n      return newValues;\n    })\n  }\n  \n  const handleAllergieChange = (e: ChangeEvent<HTMLInputElement>, allergy:{id:number, value:string} ) => {\n    let allergyId = allergiesObject.findIndex(x => x.id === allergy.id);\n    setAllergiesObject(allergies => {    \n      let newValues = [...allergies];\n      newValues[allergyId] = {...allergy, value:e.target.value};\n      return newValues\n    })\n  }\n\n  const onChangePassword = (values:ChangePasswordData) => {\n    mutatePassword(values);\n  }\n\n  const BulletPoint = () => (\n    <Box \n      bg= 'currentcolor'\n      borderRadius= '50%'\n      w='5px'\n      h='5px'\n      mx='.5em'\n    />\n  )\n\n  return (\n    <Container\n    w=\"100vw\"\n    h=\"100%\"\n    maxW=\"95%\"\n    d={'flex'}\n    flexGrow={1}\n    mx={{base:'1em', md:'2em'}}\n    >\n      <Drawer\n        placement={useBreakpointValue({base: 'bottom', lg: 'right'})}\n        isOpen={isOpen}\n        onClose={onClose}\n        >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton/>\n            <DrawerHeader>\n              Actualizar contraseña\n            </DrawerHeader>\n\n            <DrawerBody>\n              <ChangePasswordForm formId='change-password-form' onSubmit={onChangePassword}/>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button\n                type='submit'\n                form='change-password-form'\n                colorScheme='primary'>Cambiar contraseña</Button>\n            </DrawerFooter>\n\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n    <Flex\n      flexGrow={1}\n      align={'flex-start'}\n      justify={'center'}\n      py={12}\n      w={'100%'}\n    >\n    <VStack w={'100%'} mb={12} >\n      <Heading fontSize={'3xl'}>Editar Perfil</Heading>\n      <Stack w={'100%'} align={'center'}>\n        <Avatar src={avatar} size=\"2xl\" mb={4}>\n          <AvatarBadge\n            boxSize=\".8em\"\n            borderColor=\"transparent\"\n            bg=\"white\"\n            _hover={{color:'gray.500'}}>\n            <FaCamera />\n          </AvatarBadge>\n        </Avatar>\n      </Stack>\n      <Box\n        rounded={'lg'}\n        minW={{base:'xs', md: 'md'}}\n        bg={useColorModeValue('white', 'gray.700')}\n        boxShadow={'lg'}\n        p={8}\n      >\n       \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.first_name)}>\n            <FormLabel htmlFor='first_name'>Nombre(s)</FormLabel>\n            <Input\n              name='first_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Juan'\n              defaultValue={data.first_name}\n              ref={register({ required: 'El nombre es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.first_name && errors.first_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.last_name)}>\n            <FormLabel htmlFor='last_name'>Apellidos</FormLabel>\n            <Input\n              name='last_name'\n              type='text'\n              autoComplete='on'\n              placeholder='Pérez'\n              defaultValue={data.last_name}\n              ref={register({ required: 'El apellido es obligatorio' })}\n            />\n            <FormErrorMessage>\n              {errors.last_name && errors.last_name.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.email)}>\n            <FormLabel htmlFor='email'>Correo</FormLabel>\n            <Input\n              name='email'\n              type='email'\n              disabled={true}\n              placeholder='ejemplo@gmail.com'\n              value={data.email}\n              ref={register}\n            />\n            \n            <FormErrorMessage>\n              {errors.email && errors.email.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel>Contraseña</FormLabel>\n            <Button onClick={onOpen} variant='link' colorScheme='primary'>Cambiar contraseña</Button>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n            isRequired\n            isInvalid={Boolean(errors.dob)}>\n            <FormLabel htmlFor='dob'>Fecha de nacimiento</FormLabel>\n            <Input\n              name='dob'\n              type='date'\n              autoComplete='on'\n              defaultValue={data.dob}\n              ref={register({\n                required: 'La fecha es obligatoria',\n                validate: value => isValidDate(value) || 'La fecha no es válida',\n               })}\n            />\n            <FormErrorMessage>\n            {errors.dob && errors.dob.message}\n            </FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            mb={4}>\n            <FormLabel htmlFor='sex'>Sexo</FormLabel>\n              <Select\n                as='select'\n                name='sex'\n                onChange= {(e) => setValue('sex', e.target.value)}\n                ref={register}\n              >\n                <option value={sexTypes.NOT_SPECIFIED}>Sin especificar</option>\n                <option value={sexTypes.FEMALE}>Mujer</option>\n                <option value={sexTypes.MALE}>Hombre</option>\n                <option value={sexTypes.OTHER}>Otro</option>\n              </Select>\n          </FormControl>\n          \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='location'>Lugar de Residencia</FormLabel>\n            <Input\n              name='location'\n              type='text'\n              autoComplete='on'\n              placeholder='Monterrey, Nuevo León'\n              defaultValue={data.location}\n              ref={register}\n            />\n          </FormControl>\n          \n          {data.type.includes(userTypes.MEDIC) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='license'>Cédula Profesional</FormLabel>\n              <Input\n                name='medic.license'\n                type='text'\n                placeholder='12345678'\n                defaultValue={data.medic? data.medic.license : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.MEDIC) && \n            <FormControl mb={4} >\n              <FormLabel htmlFor='specialty'>Especialidad(s)</FormLabel>\n              {specialties.map((specialty,index) => (\n                <HStack\n                  mb={2}\n                  key={'specialty-'+index} // TODO: \n                >\n                  {BulletPoint()}\n                  <Input\n                    value={specialty}\n                    onChange={e => handleValueArrChange(e, index, 'medic.specialties', setSpecialties)}\n                    size='sm'\n                    type='text'\n                    placeholder='Cirujano'\n                  />\n                </HStack>\n              ))}\n\n              <HStack>\n                {BulletPoint()}\n                <div>\n                <Button\n                  size='sm'\n                  variant=\"outline\"\n                  onClick={addSpecialtyField}\n                  leftIcon={<AddIcon/>}\n                >Agregar</Button>\n                </div>\n              </HStack>\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) &&\n            <FormControl mb={4}>\n              <FormLabel htmlFor='blood_type'>Tipo de Sangre</FormLabel>\n              <Input\n                name='patient.blood_type'\n                type='text'\n                autoComplete='on'\n                placeholder='O+'\n                defaultValue={data.patient? data.patient.blood_type : ''}\n                ref={register}\n              />\n            </FormControl>\n          }\n\n          {data.type.includes(userTypes.PATIENT) && \n          <FormControl\n            mb={4}\n          >\n            <FormLabel htmlFor='allergies'>Alergias</FormLabel>\n            {allergiesObject.map((allergy) => (\n              <HStack\n                mb={2}\n                key={allergy.id}\n              >\n                {BulletPoint()}\n                <Input\n                  value={allergy.value}\n                  onChange={e => handleAllergieChange(e, allergy)}\n                  size='sm'\n                  type='text'\n                  placeholder='Pólen'\n                />\n              </HStack>\n            ))}\n            <HStack>\n              {BulletPoint()}\n              <div>\n              <Button\n                size='sm'\n                variant=\"outline\"\n                disabled={allergiesObject[allergiesObject.length-1] && allergiesObject[allergiesObject.length-1].value === ''}\n                onClick={addAllergyField}\n                leftIcon={<AddIcon/>}\n              >Agregar</Button>\n              </div>\n            </HStack>\n          </FormControl>\n          }\n          <Stack  w={'100%'} align='flex-end'>\n            <Button \n              isLoading={isLoading}\n              colorScheme='primary'\n              type=\"submit\"\n            >\n              Guardar\n            </Button>\n          </Stack>\n        </form>\n      </Box>\n    </VStack>\n    </Flex>\n  </Container>\n  )\n}","import React, { useState } from 'react';\nimport { Box, Image, Tabs, TabList, Tab, TabPanel, TabPanels, VStack, useToast, useBreakpointValue, ToastPosition } from '@chakra-ui/react';\n\nimport { PatientsTable } from './PatientsTable'\nimport DoctorsInComputerImage from '../../assets/DoctorsInComputerImage.svg';\nimport { userInformation } from '../../http/types';\nimport { http } from '../../http/client';\nimport { useQuery } from 'react-query';\n\nexport const MedicHomeView = () => {\n  const [patients, setPatients] = useState<userInformation[]>([])\n  const toast = useToast();\n  const toastPosition = useBreakpointValue({base:'top', md:'top-right'});\n\n  const onError = (data:Error) => {\n    if(data.message === 'Failed to fetch') data.message = 'Comprueba tu conexión a internet e intenta de nuevo.'\n    toast({\n      title: 'Ups!',\n      description: data.message,\n      status: 'error',\n      duration: 5000,\n      isClosable: true,\n      position: toastPosition as ToastPosition,\n    });\n  }\n\n  useQuery('patients', () => http.getPatients(), {\n    onSuccess: (data:userInformation[]) => setPatients(data),\n    onError\n  })\n\n  return (\n    <VStack>\n      <Image \n        maxH='15rem'\n        src={DoctorsInComputerImage}\n      />\n      <Box\n        w='100%'\n        pt='2rem'\n        maxW={{base: '100%', md: '75%', lg: '50%'}}\n      >\n        <Tabs isFitted>\n            <TabList>\n              <Tab>Pacientes</Tab>\n            </TabList>\n\n            <TabPanels>\n              <TabPanel>\n                <PatientsTable patients={patients}/>\n              </TabPanel>\n            </TabPanels>\n          </Tabs>\n      </Box>\n    </VStack>\n  );\n};\n","import React, { useContext, useState, useEffect } from 'react'\nimport { Link } from \"react-router-dom\";\nimport {\n    Box,\n    Flex,\n    IconButton,\n    Button,\n    Stack,\n    Collapse,\n    useDisclosure,\n    Link as ChackraLink,\n    useColorModeValue\n  } from '@chakra-ui/react'\n  import {\n    HamburgerIcon,\n    CloseIcon,\n  } from '@chakra-ui/icons'\n  import { ColorModeSwitcher } from \"../../theme/ColorModeSwitcher\";\n  import { UserContext } from '../../provider/AuthProvider';\nimport { routes } from \"../../routes/routes\";\nimport { userTypes } from '../../utils/typesDefinitions';\n\ntype NavItem = {\n  label: string;\n  path: string;\n}\n\nexport const Navbar = () => {\n  const { authContext, logout } = useContext(UserContext)\n  const { isOpen, onToggle } = useDisclosure();\n  const [navbarItems, setNavbarItems] = useState<NavItem[]>([]);\n  const [homePath, setHomePath] = useState('/')\n  const mobileContainerHover = useColorModeValue('gray.100', 'gray.700');\n\n  useEffect(() => {\n    const loggedInItems:NavItem[] = [\n      {label: 'Perfil', path: routes.profile.path},\n    ];\n    const loggedOutItems:NavItem[] = [];\n\n    if (authContext.isLoggedIn) {\n      setHomePath(routes.home.path);\n      if(authContext.type?.includes(userTypes.MEDIC)){\n        setHomePath(routes.medic.path)\n        loggedInItems.push({label:'Mis condiciones', path:routes.home.path})\n      }\n      setNavbarItems(loggedInItems);\n    }else{\n      setHomePath(routes.default.path)\n      setNavbarItems(loggedOutItems);\n    }\n  }, [authContext])\n\n  return (\n    <Box>\n      <Flex\n        minH={'60px'}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={'solid'}\n        align={'center'}>\n        <Flex\n          flex={{ base: 1, md: 'auto' }}\n          ml={{ base: -2 }}\n          display={{ base: 'flex', md: 'none' }}>\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={'ghost'}\n            aria-label={'Toggle Navigation'}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>\n            <ChackraLink\n              as={Link}\n              to={homePath}\n              fontFamily={'heading'}\n              fontSize={'1em'}\n              fontWeight={'bold'}\n              my='auto'\n            >\n              Doctory\n            </ChackraLink>\n          <Flex display={{ base: 'none', md: 'flex' }} ml={10} alignItems='center'>\n            <Stack direction={'row'} alignItems='center' spacing={4}>\n              {navbarItems.map((navItem) => (\n                <ChackraLink key={navItem.label} as={Link} to={navItem.path ?? '/'} fontSize={'sm'} fontWeight={600} sx={{display:'block'}}>\n                    {navItem.label}\n                </ChackraLink>\n              ))}\n              <ColorModeSwitcher display={{ base: 'none', md: 'flex' }}/>\n            </Stack>\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={'flex-end'}\n          direction={'row'}\n          spacing={6}\n        >\n          {!authContext.isLoading &&\n            authContext.isLoggedIn ? (\n              <Button as={Link} to={routes.default.path} onClick={logout} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Cerrar Sesión\n              </Button>\n            ):(\n              <Button as={Link} to={routes.login.path} size={'md'} fontSize={'sm'} variant={'ghost'}>\n                Iniciar sesión\n              </Button>\n            )\n          }\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <Stack\n          borderBottom='0.5px solid gray'\n          py={4}\n          display={{ md: 'none' }}>\n          {navbarItems.map((navItem) => (\n            <Link key={navItem.label} to={navItem.path ?? '/'} onClick={onToggle}>\n              <Box\n                mx={3}\n                p={1}\n                _hover={{bg: mobileContainerHover}}\n              >\n              {navItem.label}\n              </Box>\n            </Link>\n          ))}\n          <Box\n            mx={3}\n            p={1}\n            d='flex'\n            justifyContent='end'\n            onClick={onToggle}>\n              <ColorModeSwitcher display={{base: 'flex', md: 'none'}}/>\n          </Box>\n        </Stack>\n      </Collapse>\n    </Box>\n  );\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Box, Flex, Stack, Text } from '@chakra-ui/layout'\nimport { routes } from '../../routes/routes'\nimport { useColorModeValue } from '@chakra-ui/color-mode'\n\nexport const Footer = () => {\n  return (\n    <Box as=\"footer\" py=\"5\" borderTop='1px solid' borderColor={useColorModeValue('gray.300', 'gray.700')}>\n      <Flex\n        direction={{base: 'column', md: 'row'}}\n        maxW={{base: 'xl', md: '7xl'}}\n        mx=\"auto\"\n        px={{base: '6', md: '8'}}\n        align=\"center\"\n        justifyContent='center'\n      >\n        <Stack\n          my={{base: '3', md: 0}}\n          direction={{base: 'column', md: 'row'}}\n          marginStart={{md: '8'}}\n          fontSize=\"sm\"\n          spacing={{base: '2', md: '8'}}\n          textAlign={{base: 'center', md: 'start'}}\n        >\n          <Link to={routes.default.path}>\n            <Text color={useColorModeValue('primary.500', 'primary.300')}>&copy; {new Date().getFullYear()}{' '}Doctory</Text>\n          </Link>\n          {/* TODO: add terms and conditions */}\n          <Text>Términos y condiciones</Text>\n        </Stack>\n      </Flex>\n    </Box>\n  )\n}","import { Container, Stack, Text } from '@chakra-ui/layout'\nimport { Progress } from '@chakra-ui/progress'\nimport React from 'react'\n\nexport const LoadingView = () => {\n  return (\n    <Container\n      w=\"100%\"\n      h=\"100%\"\n      maxW=\"100%\"\n      d={'flex'}\n      flexGrow={1}\n      justifyContent='center'\n      alignItems='center'\n    >\n      <Stack spacing='5' width='100%'>\n        <Text fontSize=\"4xl\" textAlign='center' >Doctory</Text>\n        <Progress size=\"xs\" isIndeterminate colorScheme='primary' />\n      </Stack>\n    </Container>\n  )\n}\n","import { Box } from '@chakra-ui/layout';\nimport React, { useContext } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\nimport { Navbar } from '../views/Navbar/Navbar';\nimport { protectedRoutes, publicRoutes } from './routes';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Footer } from '../views/Footer/Footer';\nimport { UserContext } from '../provider/AuthProvider';\nimport { LoadingView } from '../views/AuthViews/LoadingView';\n\nexport const AppRouter = () => {\n  const { authContext } = useContext(UserContext)\n\n  return (\n      <Box d={'flex'} alignItems={'center'} flexDirection={'column'} minH={'100vh'}>\n        <Router>\n          <Box w='100%'>\n            <Navbar />\n          </Box>\n          <Box h='100%' width='100%' d='flex' flexGrow={1} flexDirection={'column'} bg={useColorModeValue('gray.100', 'gray.800')}>\n              { authContext.isLoading\n                ? <LoadingView />\n                : (\n                  <Switch>\n                  {authContext.isLoggedIn &&\n                  Object.keys(protectedRoutes).map(k => (\n                    authContext.isLoggedIn\n                    ? <Route key={k} exact path={protectedRoutes[k].path} component={protectedRoutes[k].component} />\n                    : <Redirect key={k} to={publicRoutes.login.path} />\n                  ))}\n\n                  {Object.keys(publicRoutes).map(k => (\n                    <Route key={k} exact={k !== '404'} path={publicRoutes[k].path} component={publicRoutes[k].component}/>\n                  ))}\n                  <Redirect to={publicRoutes.notFound.path} />\n                  </Switch>\n                )\n              }\n            <Footer />\n          </Box>\n        </Router>\n      </Box>\n  )\n}\n","import { extendTheme } from \"@chakra-ui/react\"\n\nexport const customTheme =  extendTheme({\n  colors: {\n    primary: {\n      50: '#e9e8ff',\n      100: '#c3c0f5',\n      200: '#9a97e8',\n      300: '#6f6fdd',\n      400: '#464ad3',\n      500: '#302cb9',\n      600: '#2d2291',\n      700: '#241769',\n      800: '#170c41',\n      900: '#0c041c'\n    }\n  }\n})\n","import * as React from \"react\"\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { AppRouter } from \"./routes/AppRouter\"\nimport { customTheme } from \"./theme/customTheme\"\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { AuthProvider } from \"./provider/AuthProvider\"\n \nconst queryClient = new QueryClient()\n\nexport const DoctoryApp = () => (\n  <AuthProvider>\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={customTheme}>\n        <AppRouter />\n      </ChakraProvider>\n    </QueryClientProvider>\n  </AuthProvider>\n)\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { DoctoryApp } from \"./DoctoryApp\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <DoctoryApp />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}